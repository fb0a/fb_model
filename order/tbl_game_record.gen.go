// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package order

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newTblGameRecord(db *gorm.DB, opts ...gen.DOOption) tblGameRecord {
	_tblGameRecord := tblGameRecord{}

	_tblGameRecord.tblGameRecordDo.UseDB(db, opts...)
	_tblGameRecord.tblGameRecordDo.UseModel(&model.TblGameRecord{})

	tableName := _tblGameRecord.tblGameRecordDo.TableName()
	_tblGameRecord.ALL = field.NewAsterisk(tableName)
	_tblGameRecord.BillNoHash = field.NewInt64(tableName, "bill_no_hash")
	_tblGameRecord.BillNo = field.NewString(tableName, "bill_no")
	_tblGameRecord.PlatformBillNo = field.NewString(tableName, "platform_bill_no")
	_tblGameRecord.PlatformID = field.NewString(tableName, "platform_id")
	_tblGameRecord.PlatformName = field.NewString(tableName, "platform_name")
	_tblGameRecord.PlayerName = field.NewString(tableName, "player_name")
	_tblGameRecord.UID = field.NewString(tableName, "uid")
	_tblGameRecord.Username = field.NewString(tableName, "username")
	_tblGameRecord.Phone = field.NewString(tableName, "phone")
	_tblGameRecord.ParentUID = field.NewString(tableName, "parent_uid")
	_tblGameRecord.ParentName = field.NewString(tableName, "parent_name")
	_tblGameRecord.GameClass = field.NewString(tableName, "game_class")
	_tblGameRecord.GameName = field.NewString(tableName, "game_name")
	_tblGameRecord.GameCode = field.NewString(tableName, "game_code")
	_tblGameRecord.RoundID = field.NewString(tableName, "round_id")
	_tblGameRecord.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_tblGameRecord.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_tblGameRecord.NetAmount = field.NewFloat64(tableName, "net_amount")
	_tblGameRecord.BetTime = field.NewInt64(tableName, "bet_time")
	_tblGameRecord.BetArea = field.NewString(tableName, "bet_area")
	_tblGameRecord.State = field.NewInt32(tableName, "state")
	_tblGameRecord.Tester = field.NewInt32(tableName, "tester")
	_tblGameRecord.SettleTime = field.NewInt64(tableName, "settle_time")
	_tblGameRecord.Detail = field.NewString(tableName, "detail")
	_tblGameRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_tblGameRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_tblGameRecord.Prefix = field.NewString(tableName, "prefix")

	_tblGameRecord.fillFieldMap()

	return _tblGameRecord
}

// tblGameRecord 注单记录表
type tblGameRecord struct {
	tblGameRecordDo

	ALL            field.Asterisk
	BillNoHash     field.Int64   // 三方注单号hash
	BillNo         field.String  // 平台唯一注单流水号
	PlatformBillNo field.String  // 第三方注单流水号
	PlatformID     field.String  // 接口平台 如 AG MG
	PlatformName   field.String  // 平台名称
	PlayerName     field.String  // 玩家各平台账号
	UID            field.String  // 用户ID
	Username       field.String  // 玩家账号
	Phone          field.String  // 手机号
	ParentUID      field.String  // 上级uid
	ParentName     field.String  // 上级代理
	GameClass      field.String  // 游戏类型
	GameName       field.String  // 第三方游戏名称
	GameCode       field.String  // 第三方游戏名称编码
	RoundID        field.String  // 局号
	BetAmount      field.Float64 // 投注金额(钱包币种)
	ValidBetAmount field.Float64 // 有效投注金额(钱包币种)
	NetAmount      field.Float64 // 玩家输赢金额(钱包币种)
	BetTime        field.Int64   // 投注时间
	BetArea        field.String  // 投注区域(游戏:区域编号)
	State          field.Int32   // 结算状态 0:下注确认(未结算) 1:已结算 2:会员取消 3:无效
	Tester         field.Int32   // 1:正式0:测试
	SettleTime     field.Int64   // 结算时间
	Detail         field.String  // 详情
	CreatedAt      field.Int64   // 创建时间
	UpdatedAt      field.Int64   // 更新时间
	Prefix         field.String

	fieldMap map[string]field.Expr
}

func (t tblGameRecord) Table(newTableName string) *tblGameRecord {
	t.tblGameRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tblGameRecord) As(alias string) *tblGameRecord {
	t.tblGameRecordDo.DO = *(t.tblGameRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tblGameRecord) updateTableName(table string) *tblGameRecord {
	t.ALL = field.NewAsterisk(table)
	t.BillNoHash = field.NewInt64(table, "bill_no_hash")
	t.BillNo = field.NewString(table, "bill_no")
	t.PlatformBillNo = field.NewString(table, "platform_bill_no")
	t.PlatformID = field.NewString(table, "platform_id")
	t.PlatformName = field.NewString(table, "platform_name")
	t.PlayerName = field.NewString(table, "player_name")
	t.UID = field.NewString(table, "uid")
	t.Username = field.NewString(table, "username")
	t.Phone = field.NewString(table, "phone")
	t.ParentUID = field.NewString(table, "parent_uid")
	t.ParentName = field.NewString(table, "parent_name")
	t.GameClass = field.NewString(table, "game_class")
	t.GameName = field.NewString(table, "game_name")
	t.GameCode = field.NewString(table, "game_code")
	t.RoundID = field.NewString(table, "round_id")
	t.BetAmount = field.NewFloat64(table, "bet_amount")
	t.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	t.NetAmount = field.NewFloat64(table, "net_amount")
	t.BetTime = field.NewInt64(table, "bet_time")
	t.BetArea = field.NewString(table, "bet_area")
	t.State = field.NewInt32(table, "state")
	t.Tester = field.NewInt32(table, "tester")
	t.SettleTime = field.NewInt64(table, "settle_time")
	t.Detail = field.NewString(table, "detail")
	t.CreatedAt = field.NewInt64(table, "created_at")
	t.UpdatedAt = field.NewInt64(table, "updated_at")
	t.Prefix = field.NewString(table, "prefix")

	t.fillFieldMap()

	return t
}

func (t *tblGameRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tblGameRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 27)
	t.fieldMap["bill_no_hash"] = t.BillNoHash
	t.fieldMap["bill_no"] = t.BillNo
	t.fieldMap["platform_bill_no"] = t.PlatformBillNo
	t.fieldMap["platform_id"] = t.PlatformID
	t.fieldMap["platform_name"] = t.PlatformName
	t.fieldMap["player_name"] = t.PlayerName
	t.fieldMap["uid"] = t.UID
	t.fieldMap["username"] = t.Username
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["parent_uid"] = t.ParentUID
	t.fieldMap["parent_name"] = t.ParentName
	t.fieldMap["game_class"] = t.GameClass
	t.fieldMap["game_name"] = t.GameName
	t.fieldMap["game_code"] = t.GameCode
	t.fieldMap["round_id"] = t.RoundID
	t.fieldMap["bet_amount"] = t.BetAmount
	t.fieldMap["valid_bet_amount"] = t.ValidBetAmount
	t.fieldMap["net_amount"] = t.NetAmount
	t.fieldMap["bet_time"] = t.BetTime
	t.fieldMap["bet_area"] = t.BetArea
	t.fieldMap["state"] = t.State
	t.fieldMap["tester"] = t.Tester
	t.fieldMap["settle_time"] = t.SettleTime
	t.fieldMap["detail"] = t.Detail
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["prefix"] = t.Prefix
}

func (t tblGameRecord) clone(db *gorm.DB) tblGameRecord {
	t.tblGameRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tblGameRecord) replaceDB(db *gorm.DB) tblGameRecord {
	t.tblGameRecordDo.ReplaceDB(db)
	return t
}

type tblGameRecordDo struct{ gen.DO }

type ITblGameRecordDo interface {
	gen.SubQuery
	Debug() ITblGameRecordDo
	WithContext(ctx context.Context) ITblGameRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITblGameRecordDo
	WriteDB() ITblGameRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITblGameRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITblGameRecordDo
	Not(conds ...gen.Condition) ITblGameRecordDo
	Or(conds ...gen.Condition) ITblGameRecordDo
	Select(conds ...field.Expr) ITblGameRecordDo
	Where(conds ...gen.Condition) ITblGameRecordDo
	Order(conds ...field.Expr) ITblGameRecordDo
	Distinct(cols ...field.Expr) ITblGameRecordDo
	Omit(cols ...field.Expr) ITblGameRecordDo
	Join(table schema.Tabler, on ...field.Expr) ITblGameRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITblGameRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITblGameRecordDo
	Group(cols ...field.Expr) ITblGameRecordDo
	Having(conds ...gen.Condition) ITblGameRecordDo
	Limit(limit int) ITblGameRecordDo
	Offset(offset int) ITblGameRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITblGameRecordDo
	Unscoped() ITblGameRecordDo
	Create(values ...*model.TblGameRecord) error
	CreateInBatches(values []*model.TblGameRecord, batchSize int) error
	Save(values ...*model.TblGameRecord) error
	First() (*model.TblGameRecord, error)
	Take() (*model.TblGameRecord, error)
	Last() (*model.TblGameRecord, error)
	Find() ([]*model.TblGameRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TblGameRecord, err error)
	FindInBatches(result *[]*model.TblGameRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TblGameRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITblGameRecordDo
	Assign(attrs ...field.AssignExpr) ITblGameRecordDo
	Joins(fields ...field.RelationField) ITblGameRecordDo
	Preload(fields ...field.RelationField) ITblGameRecordDo
	FirstOrInit() (*model.TblGameRecord, error)
	FirstOrCreate() (*model.TblGameRecord, error)
	FindByPage(offset int, limit int) (result []*model.TblGameRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITblGameRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tblGameRecordDo) Debug() ITblGameRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tblGameRecordDo) WithContext(ctx context.Context) ITblGameRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tblGameRecordDo) ReadDB() ITblGameRecordDo {
	return t.Clauses(dbresolver.Read)
}

func (t tblGameRecordDo) WriteDB() ITblGameRecordDo {
	return t.Clauses(dbresolver.Write)
}

func (t tblGameRecordDo) Session(config *gorm.Session) ITblGameRecordDo {
	return t.withDO(t.DO.Session(config))
}

func (t tblGameRecordDo) Clauses(conds ...clause.Expression) ITblGameRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tblGameRecordDo) Returning(value interface{}, columns ...string) ITblGameRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tblGameRecordDo) Not(conds ...gen.Condition) ITblGameRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tblGameRecordDo) Or(conds ...gen.Condition) ITblGameRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tblGameRecordDo) Select(conds ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tblGameRecordDo) Where(conds ...gen.Condition) ITblGameRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tblGameRecordDo) Order(conds ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tblGameRecordDo) Distinct(cols ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tblGameRecordDo) Omit(cols ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tblGameRecordDo) Join(table schema.Tabler, on ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tblGameRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tblGameRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tblGameRecordDo) Group(cols ...field.Expr) ITblGameRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tblGameRecordDo) Having(conds ...gen.Condition) ITblGameRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tblGameRecordDo) Limit(limit int) ITblGameRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tblGameRecordDo) Offset(offset int) ITblGameRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tblGameRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITblGameRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tblGameRecordDo) Unscoped() ITblGameRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tblGameRecordDo) Create(values ...*model.TblGameRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tblGameRecordDo) CreateInBatches(values []*model.TblGameRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tblGameRecordDo) Save(values ...*model.TblGameRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tblGameRecordDo) First() (*model.TblGameRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblGameRecord), nil
	}
}

func (t tblGameRecordDo) Take() (*model.TblGameRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblGameRecord), nil
	}
}

func (t tblGameRecordDo) Last() (*model.TblGameRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblGameRecord), nil
	}
}

func (t tblGameRecordDo) Find() ([]*model.TblGameRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TblGameRecord), err
}

func (t tblGameRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TblGameRecord, err error) {
	buf := make([]*model.TblGameRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tblGameRecordDo) FindInBatches(result *[]*model.TblGameRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tblGameRecordDo) Attrs(attrs ...field.AssignExpr) ITblGameRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tblGameRecordDo) Assign(attrs ...field.AssignExpr) ITblGameRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tblGameRecordDo) Joins(fields ...field.RelationField) ITblGameRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tblGameRecordDo) Preload(fields ...field.RelationField) ITblGameRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tblGameRecordDo) FirstOrInit() (*model.TblGameRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblGameRecord), nil
	}
}

func (t tblGameRecordDo) FirstOrCreate() (*model.TblGameRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblGameRecord), nil
	}
}

func (t tblGameRecordDo) FindByPage(offset int, limit int) (result []*model.TblGameRecord, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tblGameRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tblGameRecordDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tblGameRecordDo) Delete(models ...*model.TblGameRecord) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tblGameRecordDo) withDO(do gen.Dao) *tblGameRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
