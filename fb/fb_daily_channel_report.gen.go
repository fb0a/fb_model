// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbDailyChannelReport(db *gorm.DB, opts ...gen.DOOption) fbDailyChannelReport {
	_fbDailyChannelReport := fbDailyChannelReport{}

	_fbDailyChannelReport.fbDailyChannelReportDo.UseDB(db, opts...)
	_fbDailyChannelReport.fbDailyChannelReportDo.UseModel(&model.FbDailyChannelReport{})

	tableName := _fbDailyChannelReport.fbDailyChannelReportDo.TableName()
	_fbDailyChannelReport.ALL = field.NewAsterisk(tableName)
	_fbDailyChannelReport.ID = field.NewInt64(tableName, "id")
	_fbDailyChannelReport.Channel = field.NewString(tableName, "channel")
	_fbDailyChannelReport.Day = field.NewInt32(tableName, "day")
	_fbDailyChannelReport.Regs = field.NewInt32(tableName, "regs")
	_fbDailyChannelReport.FirstDeposit = field.NewInt32(tableName, "first_deposit")
	_fbDailyChannelReport.Bets = field.NewInt32(tableName, "bets")
	_fbDailyChannelReport.BetOrders = field.NewInt32(tableName, "bet_orders")
	_fbDailyChannelReport.ValidBetAmount = field.NewString(tableName, "valid_bet_amount")
	_fbDailyChannelReport.AvgBetAmount = field.NewString(tableName, "avg_bet_amount")
	_fbDailyChannelReport.Bonus = field.NewString(tableName, "bonus")
	_fbDailyChannelReport.Ggr = field.NewString(tableName, "ggr")
	_fbDailyChannelReport.Profit = field.NewString(tableName, "profit")

	_fbDailyChannelReport.fillFieldMap()

	return _fbDailyChannelReport
}

// fbDailyChannelReport 渠道业绩日报表
type fbDailyChannelReport struct {
	fbDailyChannelReportDo

	ALL            field.Asterisk
	ID             field.Int64
	Channel        field.String // 渠道名称
	Day            field.Int32  // 年月日
	Regs           field.Int32  // 新增注册
	FirstDeposit   field.Int32  // 新增首存
	Bets           field.Int32  // 活跃人数
	BetOrders      field.Int32  // 总注单数
	ValidBetAmount field.String // 总有效投注额
	AvgBetAmount   field.String // 笔均注单额
	Bonus          field.String // 总派彩
	Ggr            field.String // ggr
	Profit         field.String // 杀率

	fieldMap map[string]field.Expr
}

func (f fbDailyChannelReport) Table(newTableName string) *fbDailyChannelReport {
	f.fbDailyChannelReportDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbDailyChannelReport) As(alias string) *fbDailyChannelReport {
	f.fbDailyChannelReportDo.DO = *(f.fbDailyChannelReportDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbDailyChannelReport) updateTableName(table string) *fbDailyChannelReport {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Channel = field.NewString(table, "channel")
	f.Day = field.NewInt32(table, "day")
	f.Regs = field.NewInt32(table, "regs")
	f.FirstDeposit = field.NewInt32(table, "first_deposit")
	f.Bets = field.NewInt32(table, "bets")
	f.BetOrders = field.NewInt32(table, "bet_orders")
	f.ValidBetAmount = field.NewString(table, "valid_bet_amount")
	f.AvgBetAmount = field.NewString(table, "avg_bet_amount")
	f.Bonus = field.NewString(table, "bonus")
	f.Ggr = field.NewString(table, "ggr")
	f.Profit = field.NewString(table, "profit")

	f.fillFieldMap()

	return f
}

func (f *fbDailyChannelReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbDailyChannelReport) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["id"] = f.ID
	f.fieldMap["channel"] = f.Channel
	f.fieldMap["day"] = f.Day
	f.fieldMap["regs"] = f.Regs
	f.fieldMap["first_deposit"] = f.FirstDeposit
	f.fieldMap["bets"] = f.Bets
	f.fieldMap["bet_orders"] = f.BetOrders
	f.fieldMap["valid_bet_amount"] = f.ValidBetAmount
	f.fieldMap["avg_bet_amount"] = f.AvgBetAmount
	f.fieldMap["bonus"] = f.Bonus
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["profit"] = f.Profit
}

func (f fbDailyChannelReport) clone(db *gorm.DB) fbDailyChannelReport {
	f.fbDailyChannelReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbDailyChannelReport) replaceDB(db *gorm.DB) fbDailyChannelReport {
	f.fbDailyChannelReportDo.ReplaceDB(db)
	return f
}

type fbDailyChannelReportDo struct{ gen.DO }

type IFbDailyChannelReportDo interface {
	gen.SubQuery
	Debug() IFbDailyChannelReportDo
	WithContext(ctx context.Context) IFbDailyChannelReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbDailyChannelReportDo
	WriteDB() IFbDailyChannelReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbDailyChannelReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbDailyChannelReportDo
	Not(conds ...gen.Condition) IFbDailyChannelReportDo
	Or(conds ...gen.Condition) IFbDailyChannelReportDo
	Select(conds ...field.Expr) IFbDailyChannelReportDo
	Where(conds ...gen.Condition) IFbDailyChannelReportDo
	Order(conds ...field.Expr) IFbDailyChannelReportDo
	Distinct(cols ...field.Expr) IFbDailyChannelReportDo
	Omit(cols ...field.Expr) IFbDailyChannelReportDo
	Join(table schema.Tabler, on ...field.Expr) IFbDailyChannelReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyChannelReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyChannelReportDo
	Group(cols ...field.Expr) IFbDailyChannelReportDo
	Having(conds ...gen.Condition) IFbDailyChannelReportDo
	Limit(limit int) IFbDailyChannelReportDo
	Offset(offset int) IFbDailyChannelReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyChannelReportDo
	Unscoped() IFbDailyChannelReportDo
	Create(values ...*model.FbDailyChannelReport) error
	CreateInBatches(values []*model.FbDailyChannelReport, batchSize int) error
	Save(values ...*model.FbDailyChannelReport) error
	First() (*model.FbDailyChannelReport, error)
	Take() (*model.FbDailyChannelReport, error)
	Last() (*model.FbDailyChannelReport, error)
	Find() ([]*model.FbDailyChannelReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyChannelReport, err error)
	FindInBatches(result *[]*model.FbDailyChannelReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbDailyChannelReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbDailyChannelReportDo
	Assign(attrs ...field.AssignExpr) IFbDailyChannelReportDo
	Joins(fields ...field.RelationField) IFbDailyChannelReportDo
	Preload(fields ...field.RelationField) IFbDailyChannelReportDo
	FirstOrInit() (*model.FbDailyChannelReport, error)
	FirstOrCreate() (*model.FbDailyChannelReport, error)
	FindByPage(offset int, limit int) (result []*model.FbDailyChannelReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbDailyChannelReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbDailyChannelReportDo) Debug() IFbDailyChannelReportDo {
	return f.withDO(f.DO.Debug())
}

func (f fbDailyChannelReportDo) WithContext(ctx context.Context) IFbDailyChannelReportDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbDailyChannelReportDo) ReadDB() IFbDailyChannelReportDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbDailyChannelReportDo) WriteDB() IFbDailyChannelReportDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbDailyChannelReportDo) Session(config *gorm.Session) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbDailyChannelReportDo) Clauses(conds ...clause.Expression) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbDailyChannelReportDo) Returning(value interface{}, columns ...string) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbDailyChannelReportDo) Not(conds ...gen.Condition) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbDailyChannelReportDo) Or(conds ...gen.Condition) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbDailyChannelReportDo) Select(conds ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbDailyChannelReportDo) Where(conds ...gen.Condition) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbDailyChannelReportDo) Order(conds ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbDailyChannelReportDo) Distinct(cols ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbDailyChannelReportDo) Omit(cols ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbDailyChannelReportDo) Join(table schema.Tabler, on ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbDailyChannelReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbDailyChannelReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbDailyChannelReportDo) Group(cols ...field.Expr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbDailyChannelReportDo) Having(conds ...gen.Condition) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbDailyChannelReportDo) Limit(limit int) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbDailyChannelReportDo) Offset(offset int) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbDailyChannelReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbDailyChannelReportDo) Unscoped() IFbDailyChannelReportDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbDailyChannelReportDo) Create(values ...*model.FbDailyChannelReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbDailyChannelReportDo) CreateInBatches(values []*model.FbDailyChannelReport, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbDailyChannelReportDo) Save(values ...*model.FbDailyChannelReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbDailyChannelReportDo) First() (*model.FbDailyChannelReport, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyChannelReport), nil
	}
}

func (f fbDailyChannelReportDo) Take() (*model.FbDailyChannelReport, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyChannelReport), nil
	}
}

func (f fbDailyChannelReportDo) Last() (*model.FbDailyChannelReport, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyChannelReport), nil
	}
}

func (f fbDailyChannelReportDo) Find() ([]*model.FbDailyChannelReport, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbDailyChannelReport), err
}

func (f fbDailyChannelReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyChannelReport, err error) {
	buf := make([]*model.FbDailyChannelReport, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbDailyChannelReportDo) FindInBatches(result *[]*model.FbDailyChannelReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbDailyChannelReportDo) Attrs(attrs ...field.AssignExpr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbDailyChannelReportDo) Assign(attrs ...field.AssignExpr) IFbDailyChannelReportDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbDailyChannelReportDo) Joins(fields ...field.RelationField) IFbDailyChannelReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbDailyChannelReportDo) Preload(fields ...field.RelationField) IFbDailyChannelReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbDailyChannelReportDo) FirstOrInit() (*model.FbDailyChannelReport, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyChannelReport), nil
	}
}

func (f fbDailyChannelReportDo) FirstOrCreate() (*model.FbDailyChannelReport, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyChannelReport), nil
	}
}

func (f fbDailyChannelReportDo) FindByPage(offset int, limit int) (result []*model.FbDailyChannelReport, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbDailyChannelReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbDailyChannelReportDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbDailyChannelReportDo) Delete(models ...*model.FbDailyChannelReport) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbDailyChannelReportDo) withDO(do gen.Dao) *fbDailyChannelReportDo {
	f.DO = *do.(*gen.DO)
	return f
}
