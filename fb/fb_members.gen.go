// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMember(db *gorm.DB, opts ...gen.DOOption) fbMember {
	_fbMember := fbMember{}

	_fbMember.fbMemberDo.UseDB(db, opts...)
	_fbMember.fbMemberDo.UseModel(&model.FbMember{})

	tableName := _fbMember.fbMemberDo.TableName()
	_fbMember.ALL = field.NewAsterisk(tableName)
	_fbMember.UID = field.NewUint64(tableName, "uid")
	_fbMember.Username = field.NewString(tableName, "username")
	_fbMember.WithdrawTotal = field.NewFloat64(tableName, "withdraw_total")
	_fbMember.WithdrawCount = field.NewInt32(tableName, "withdraw_count")
	_fbMember.DepositTotal = field.NewFloat64(tableName, "deposit_total")
	_fbMember.DepositCount = field.NewInt32(tableName, "deposit_count")
	_fbMember.Email = field.NewString(tableName, "email")
	_fbMember.EmailCheckState = field.NewInt32(tableName, "email_check_state")
	_fbMember.CountryCode = field.NewString(tableName, "country_code")
	_fbMember.Phone = field.NewString(tableName, "phone")
	_fbMember.PhoneCheckState = field.NewInt32(tableName, "phone_check_state")
	_fbMember.Avatar = field.NewString(tableName, "avatar")
	_fbMember.Gender = field.NewString(tableName, "gender")
	_fbMember.Password = field.NewString(tableName, "password")
	_fbMember.OauthSecrets = field.NewString(tableName, "oauth_secrets")
	_fbMember.ReferralCode = field.NewString(tableName, "referral_code")
	_fbMember.Tags = field.NewString(tableName, "tags")
	_fbMember.Vip = field.NewInt32(tableName, "vip")
	_fbMember.ParentUID = field.NewString(tableName, "parent_uid")
	_fbMember.ParentName = field.NewString(tableName, "parent_name")
	_fbMember.Tester = field.NewInt32(tableName, "tester")
	_fbMember.DeviceNumber = field.NewString(tableName, "device_number")
	_fbMember.State = field.NewInt32(tableName, "state")
	_fbMember.Note = field.NewString(tableName, "note")
	_fbMember.CreatedAt = field.NewUint64(tableName, "created_at")
	_fbMember.CreatedIP = field.NewString(tableName, "created_ip")
	_fbMember.RegIP = field.NewString(tableName, "reg_ip")
	_fbMember.RegDevice = field.NewInt32(tableName, "reg_device")
	_fbMember.RegDeviceNo = field.NewString(tableName, "reg_device_no")
	_fbMember.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_fbMember.LastLoginAt = field.NewUint64(tableName, "last_login_at")
	_fbMember.LastLoginDevice = field.NewInt32(tableName, "last_login_device")
	_fbMember.NickName = field.NewString(tableName, "nick_name")
	_fbMember.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbMember.ThirdParty = field.NewString(tableName, "third_party")
	_fbMember.RealUsername = field.NewString(tableName, "real_username")
	_fbMember.Birthday = field.NewString(tableName, "birthday")
	_fbMember.FirstDeposit = field.NewInt64(tableName, "first_deposit")
	_fbMember.SecondDeposit = field.NewInt64(tableName, "second_deposit")
	_fbMember.ThirdDeposit = field.NewInt64(tableName, "third_deposit")
	_fbMember.Source = field.NewString(tableName, "source")

	_fbMember.fillFieldMap()

	return _fbMember
}

// fbMember 会员表
type fbMember struct {
	fbMemberDo

	ALL             field.Asterisk
	UID             field.Uint64
	Username        field.String  // 用户名
	WithdrawTotal   field.Float64 // 提现总数
	WithdrawCount   field.Int32   // 提现次数
	DepositTotal    field.Float64 // 存款总额
	DepositCount    field.Int32   // 存款次数
	Email           field.String
	EmailCheckState field.Int32  // 邮箱是否验证1=已验证,2=未验证
	CountryCode     field.String // 国家区号
	Phone           field.String // 手机号
	PhoneCheckState field.Int32  // 手机号是否验证1=已验证,2=未验证
	Avatar          field.String // 头像图片地址
	Gender          field.String // 性别
	Password        field.String // 密码
	OauthSecrets    field.String // 授权密码
	ReferralCode    field.String // 推荐码
	Tags            field.String // 标签
	Vip             field.Int32  // vip等级
	ParentUID       field.String // 父级代理id
	ParentName      field.String // 父级代理名
	Tester          field.Int32  // 1 正式账号 2 测试帐号
	DeviceNumber    field.String // 登录设备号
	State           field.Int32  // 会员状态，0=正常 1=停用
	Note            field.String // 账号备注
	CreatedAt       field.Uint64 // 创建时间
	CreatedIP       field.String // 创建ip
	RegIP           field.String // 注册IP
	RegDevice       field.Int32  // 注册设备
	RegDeviceNo     field.String // 注册设备号
	LastLoginIP     field.String // 登陆IP
	LastLoginAt     field.Uint64 // 登陆时间
	LastLoginDevice field.Int32  // 登陆设备
	NickName        field.String
	UpdatedAt       field.Int64
	ThirdParty      field.String
	RealUsername    field.String
	Birthday        field.String // 生日
	FirstDeposit    field.Int64
	SecondDeposit   field.Int64
	ThirdDeposit    field.Int64
	Source          field.String

	fieldMap map[string]field.Expr
}

func (f fbMember) Table(newTableName string) *fbMember {
	f.fbMemberDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMember) As(alias string) *fbMember {
	f.fbMemberDo.DO = *(f.fbMemberDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMember) updateTableName(table string) *fbMember {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewUint64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.WithdrawTotal = field.NewFloat64(table, "withdraw_total")
	f.WithdrawCount = field.NewInt32(table, "withdraw_count")
	f.DepositTotal = field.NewFloat64(table, "deposit_total")
	f.DepositCount = field.NewInt32(table, "deposit_count")
	f.Email = field.NewString(table, "email")
	f.EmailCheckState = field.NewInt32(table, "email_check_state")
	f.CountryCode = field.NewString(table, "country_code")
	f.Phone = field.NewString(table, "phone")
	f.PhoneCheckState = field.NewInt32(table, "phone_check_state")
	f.Avatar = field.NewString(table, "avatar")
	f.Gender = field.NewString(table, "gender")
	f.Password = field.NewString(table, "password")
	f.OauthSecrets = field.NewString(table, "oauth_secrets")
	f.ReferralCode = field.NewString(table, "referral_code")
	f.Tags = field.NewString(table, "tags")
	f.Vip = field.NewInt32(table, "vip")
	f.ParentUID = field.NewString(table, "parent_uid")
	f.ParentName = field.NewString(table, "parent_name")
	f.Tester = field.NewInt32(table, "tester")
	f.DeviceNumber = field.NewString(table, "device_number")
	f.State = field.NewInt32(table, "state")
	f.Note = field.NewString(table, "note")
	f.CreatedAt = field.NewUint64(table, "created_at")
	f.CreatedIP = field.NewString(table, "created_ip")
	f.RegIP = field.NewString(table, "reg_ip")
	f.RegDevice = field.NewInt32(table, "reg_device")
	f.RegDeviceNo = field.NewString(table, "reg_device_no")
	f.LastLoginIP = field.NewString(table, "last_login_ip")
	f.LastLoginAt = field.NewUint64(table, "last_login_at")
	f.LastLoginDevice = field.NewInt32(table, "last_login_device")
	f.NickName = field.NewString(table, "nick_name")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.ThirdParty = field.NewString(table, "third_party")
	f.RealUsername = field.NewString(table, "real_username")
	f.Birthday = field.NewString(table, "birthday")
	f.FirstDeposit = field.NewInt64(table, "first_deposit")
	f.SecondDeposit = field.NewInt64(table, "second_deposit")
	f.ThirdDeposit = field.NewInt64(table, "third_deposit")
	f.Source = field.NewString(table, "source")

	f.fillFieldMap()

	return f
}

func (f *fbMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMember) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 41)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["withdraw_total"] = f.WithdrawTotal
	f.fieldMap["withdraw_count"] = f.WithdrawCount
	f.fieldMap["deposit_total"] = f.DepositTotal
	f.fieldMap["deposit_count"] = f.DepositCount
	f.fieldMap["email"] = f.Email
	f.fieldMap["email_check_state"] = f.EmailCheckState
	f.fieldMap["country_code"] = f.CountryCode
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["phone_check_state"] = f.PhoneCheckState
	f.fieldMap["avatar"] = f.Avatar
	f.fieldMap["gender"] = f.Gender
	f.fieldMap["password"] = f.Password
	f.fieldMap["oauth_secrets"] = f.OauthSecrets
	f.fieldMap["referral_code"] = f.ReferralCode
	f.fieldMap["tags"] = f.Tags
	f.fieldMap["vip"] = f.Vip
	f.fieldMap["parent_uid"] = f.ParentUID
	f.fieldMap["parent_name"] = f.ParentName
	f.fieldMap["tester"] = f.Tester
	f.fieldMap["device_number"] = f.DeviceNumber
	f.fieldMap["state"] = f.State
	f.fieldMap["note"] = f.Note
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["created_ip"] = f.CreatedIP
	f.fieldMap["reg_ip"] = f.RegIP
	f.fieldMap["reg_device"] = f.RegDevice
	f.fieldMap["reg_device_no"] = f.RegDeviceNo
	f.fieldMap["last_login_ip"] = f.LastLoginIP
	f.fieldMap["last_login_at"] = f.LastLoginAt
	f.fieldMap["last_login_device"] = f.LastLoginDevice
	f.fieldMap["nick_name"] = f.NickName
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["third_party"] = f.ThirdParty
	f.fieldMap["real_username"] = f.RealUsername
	f.fieldMap["birthday"] = f.Birthday
	f.fieldMap["first_deposit"] = f.FirstDeposit
	f.fieldMap["second_deposit"] = f.SecondDeposit
	f.fieldMap["third_deposit"] = f.ThirdDeposit
	f.fieldMap["source"] = f.Source
}

func (f fbMember) clone(db *gorm.DB) fbMember {
	f.fbMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMember) replaceDB(db *gorm.DB) fbMember {
	f.fbMemberDo.ReplaceDB(db)
	return f
}

type fbMemberDo struct{ gen.DO }

type IFbMemberDo interface {
	gen.SubQuery
	Debug() IFbMemberDo
	WithContext(ctx context.Context) IFbMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMemberDo
	WriteDB() IFbMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMemberDo
	Not(conds ...gen.Condition) IFbMemberDo
	Or(conds ...gen.Condition) IFbMemberDo
	Select(conds ...field.Expr) IFbMemberDo
	Where(conds ...gen.Condition) IFbMemberDo
	Order(conds ...field.Expr) IFbMemberDo
	Distinct(cols ...field.Expr) IFbMemberDo
	Omit(cols ...field.Expr) IFbMemberDo
	Join(table schema.Tabler, on ...field.Expr) IFbMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMemberDo
	Group(cols ...field.Expr) IFbMemberDo
	Having(conds ...gen.Condition) IFbMemberDo
	Limit(limit int) IFbMemberDo
	Offset(offset int) IFbMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMemberDo
	Unscoped() IFbMemberDo
	Create(values ...*model.FbMember) error
	CreateInBatches(values []*model.FbMember, batchSize int) error
	Save(values ...*model.FbMember) error
	First() (*model.FbMember, error)
	Take() (*model.FbMember, error)
	Last() (*model.FbMember, error)
	Find() ([]*model.FbMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMember, err error)
	FindInBatches(result *[]*model.FbMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMemberDo
	Assign(attrs ...field.AssignExpr) IFbMemberDo
	Joins(fields ...field.RelationField) IFbMemberDo
	Preload(fields ...field.RelationField) IFbMemberDo
	FirstOrInit() (*model.FbMember, error)
	FirstOrCreate() (*model.FbMember, error)
	FindByPage(offset int, limit int) (result []*model.FbMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMemberDo) Debug() IFbMemberDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMemberDo) WithContext(ctx context.Context) IFbMemberDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMemberDo) ReadDB() IFbMemberDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMemberDo) WriteDB() IFbMemberDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMemberDo) Session(config *gorm.Session) IFbMemberDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMemberDo) Clauses(conds ...clause.Expression) IFbMemberDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMemberDo) Returning(value interface{}, columns ...string) IFbMemberDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMemberDo) Not(conds ...gen.Condition) IFbMemberDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMemberDo) Or(conds ...gen.Condition) IFbMemberDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMemberDo) Select(conds ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMemberDo) Where(conds ...gen.Condition) IFbMemberDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMemberDo) Order(conds ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMemberDo) Distinct(cols ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMemberDo) Omit(cols ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMemberDo) Join(table schema.Tabler, on ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMemberDo) Group(cols ...field.Expr) IFbMemberDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMemberDo) Having(conds ...gen.Condition) IFbMemberDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMemberDo) Limit(limit int) IFbMemberDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMemberDo) Offset(offset int) IFbMemberDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMemberDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMemberDo) Unscoped() IFbMemberDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMemberDo) Create(values ...*model.FbMember) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMemberDo) CreateInBatches(values []*model.FbMember, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMemberDo) Save(values ...*model.FbMember) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMemberDo) First() (*model.FbMember, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMember), nil
	}
}

func (f fbMemberDo) Take() (*model.FbMember, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMember), nil
	}
}

func (f fbMemberDo) Last() (*model.FbMember, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMember), nil
	}
}

func (f fbMemberDo) Find() ([]*model.FbMember, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMember), err
}

func (f fbMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMember, err error) {
	buf := make([]*model.FbMember, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMemberDo) FindInBatches(result *[]*model.FbMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMemberDo) Attrs(attrs ...field.AssignExpr) IFbMemberDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMemberDo) Assign(attrs ...field.AssignExpr) IFbMemberDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMemberDo) Joins(fields ...field.RelationField) IFbMemberDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMemberDo) Preload(fields ...field.RelationField) IFbMemberDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMemberDo) FirstOrInit() (*model.FbMember, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMember), nil
	}
}

func (f fbMemberDo) FirstOrCreate() (*model.FbMember, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMember), nil
	}
}

func (f fbMemberDo) FindByPage(offset int, limit int) (result []*model.FbMember, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMemberDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMemberDo) Delete(models ...*model.FbMember) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMemberDo) withDO(do gen.Dao) *fbMemberDo {
	f.DO = *do.(*gen.DO)
	return f
}
