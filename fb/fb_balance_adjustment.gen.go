// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbBalanceAdjustment(db *gorm.DB, opts ...gen.DOOption) fbBalanceAdjustment {
	_fbBalanceAdjustment := fbBalanceAdjustment{}

	_fbBalanceAdjustment.fbBalanceAdjustmentDo.UseDB(db, opts...)
	_fbBalanceAdjustment.fbBalanceAdjustmentDo.UseModel(&model.FbBalanceAdjustment{})

	tableName := _fbBalanceAdjustment.fbBalanceAdjustmentDo.TableName()
	_fbBalanceAdjustment.ALL = field.NewAsterisk(tableName)
	_fbBalanceAdjustment.ID = field.NewInt64(tableName, "id")
	_fbBalanceAdjustment.BillNo = field.NewString(tableName, "bill_no")
	_fbBalanceAdjustment.UID = field.NewInt64(tableName, "uid")
	_fbBalanceAdjustment.Username = field.NewString(tableName, "username")
	_fbBalanceAdjustment.Action = field.NewInt32(tableName, "action")
	_fbBalanceAdjustment.Amount = field.NewFloat64(tableName, "amount")
	_fbBalanceAdjustment.State = field.NewInt32(tableName, "state")
	_fbBalanceAdjustment.BetMultiplier = field.NewFloat64(tableName, "bet_multiplier")
	_fbBalanceAdjustment.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbBalanceAdjustment.Remark = field.NewString(tableName, "remark")
	_fbBalanceAdjustment.OperatorUID = field.NewInt64(tableName, "operator_uid")
	_fbBalanceAdjustment.OperatorName = field.NewString(tableName, "operator_name")
	_fbBalanceAdjustment.ReviewAt = field.NewInt64(tableName, "review_at")
	_fbBalanceAdjustment.ReviewRemark = field.NewString(tableName, "review_remark")
	_fbBalanceAdjustment.ReviewUID = field.NewInt64(tableName, "review_uid")
	_fbBalanceAdjustment.ReviewName = field.NewString(tableName, "review_name")

	_fbBalanceAdjustment.fillFieldMap()

	return _fbBalanceAdjustment
}

// fbBalanceAdjustment 后台余额加减记录表
type fbBalanceAdjustment struct {
	fbBalanceAdjustmentDo

	ALL           field.Asterisk
	ID            field.Int64
	BillNo        field.String  // 订单号
	UID           field.Int64   // 用户ID
	Username      field.String  // 用户名
	Action        field.Int32   // 1=加钱,2=减钱,3=清零
	Amount        field.Float64 // 金额
	State         field.Int32   //  状态 1审核通过 2审核拒绝
	BetMultiplier field.Float64 // 打码倍数
	CreatedAt     field.Int64   // 时间
	Remark        field.String  // 提交备注
	OperatorUID   field.Int64   // 操作人uid
	OperatorName  field.String  // 操作人名
	ReviewAt      field.Int64   // 审核时间
	ReviewRemark  field.String  // 审核备注
	ReviewUID     field.Int64   // 审核人uid
	ReviewName    field.String  // 审核人名

	fieldMap map[string]field.Expr
}

func (f fbBalanceAdjustment) Table(newTableName string) *fbBalanceAdjustment {
	f.fbBalanceAdjustmentDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbBalanceAdjustment) As(alias string) *fbBalanceAdjustment {
	f.fbBalanceAdjustmentDo.DO = *(f.fbBalanceAdjustmentDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbBalanceAdjustment) updateTableName(table string) *fbBalanceAdjustment {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.BillNo = field.NewString(table, "bill_no")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.Action = field.NewInt32(table, "action")
	f.Amount = field.NewFloat64(table, "amount")
	f.State = field.NewInt32(table, "state")
	f.BetMultiplier = field.NewFloat64(table, "bet_multiplier")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.Remark = field.NewString(table, "remark")
	f.OperatorUID = field.NewInt64(table, "operator_uid")
	f.OperatorName = field.NewString(table, "operator_name")
	f.ReviewAt = field.NewInt64(table, "review_at")
	f.ReviewRemark = field.NewString(table, "review_remark")
	f.ReviewUID = field.NewInt64(table, "review_uid")
	f.ReviewName = field.NewString(table, "review_name")

	f.fillFieldMap()

	return f
}

func (f *fbBalanceAdjustment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbBalanceAdjustment) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 16)
	f.fieldMap["id"] = f.ID
	f.fieldMap["bill_no"] = f.BillNo
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["action"] = f.Action
	f.fieldMap["amount"] = f.Amount
	f.fieldMap["state"] = f.State
	f.fieldMap["bet_multiplier"] = f.BetMultiplier
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["operator_uid"] = f.OperatorUID
	f.fieldMap["operator_name"] = f.OperatorName
	f.fieldMap["review_at"] = f.ReviewAt
	f.fieldMap["review_remark"] = f.ReviewRemark
	f.fieldMap["review_uid"] = f.ReviewUID
	f.fieldMap["review_name"] = f.ReviewName
}

func (f fbBalanceAdjustment) clone(db *gorm.DB) fbBalanceAdjustment {
	f.fbBalanceAdjustmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbBalanceAdjustment) replaceDB(db *gorm.DB) fbBalanceAdjustment {
	f.fbBalanceAdjustmentDo.ReplaceDB(db)
	return f
}

type fbBalanceAdjustmentDo struct{ gen.DO }

type IFbBalanceAdjustmentDo interface {
	gen.SubQuery
	Debug() IFbBalanceAdjustmentDo
	WithContext(ctx context.Context) IFbBalanceAdjustmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbBalanceAdjustmentDo
	WriteDB() IFbBalanceAdjustmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbBalanceAdjustmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbBalanceAdjustmentDo
	Not(conds ...gen.Condition) IFbBalanceAdjustmentDo
	Or(conds ...gen.Condition) IFbBalanceAdjustmentDo
	Select(conds ...field.Expr) IFbBalanceAdjustmentDo
	Where(conds ...gen.Condition) IFbBalanceAdjustmentDo
	Order(conds ...field.Expr) IFbBalanceAdjustmentDo
	Distinct(cols ...field.Expr) IFbBalanceAdjustmentDo
	Omit(cols ...field.Expr) IFbBalanceAdjustmentDo
	Join(table schema.Tabler, on ...field.Expr) IFbBalanceAdjustmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbBalanceAdjustmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbBalanceAdjustmentDo
	Group(cols ...field.Expr) IFbBalanceAdjustmentDo
	Having(conds ...gen.Condition) IFbBalanceAdjustmentDo
	Limit(limit int) IFbBalanceAdjustmentDo
	Offset(offset int) IFbBalanceAdjustmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBalanceAdjustmentDo
	Unscoped() IFbBalanceAdjustmentDo
	Create(values ...*model.FbBalanceAdjustment) error
	CreateInBatches(values []*model.FbBalanceAdjustment, batchSize int) error
	Save(values ...*model.FbBalanceAdjustment) error
	First() (*model.FbBalanceAdjustment, error)
	Take() (*model.FbBalanceAdjustment, error)
	Last() (*model.FbBalanceAdjustment, error)
	Find() ([]*model.FbBalanceAdjustment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBalanceAdjustment, err error)
	FindInBatches(result *[]*model.FbBalanceAdjustment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbBalanceAdjustment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbBalanceAdjustmentDo
	Assign(attrs ...field.AssignExpr) IFbBalanceAdjustmentDo
	Joins(fields ...field.RelationField) IFbBalanceAdjustmentDo
	Preload(fields ...field.RelationField) IFbBalanceAdjustmentDo
	FirstOrInit() (*model.FbBalanceAdjustment, error)
	FirstOrCreate() (*model.FbBalanceAdjustment, error)
	FindByPage(offset int, limit int) (result []*model.FbBalanceAdjustment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbBalanceAdjustmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbBalanceAdjustmentDo) Debug() IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Debug())
}

func (f fbBalanceAdjustmentDo) WithContext(ctx context.Context) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbBalanceAdjustmentDo) ReadDB() IFbBalanceAdjustmentDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbBalanceAdjustmentDo) WriteDB() IFbBalanceAdjustmentDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbBalanceAdjustmentDo) Session(config *gorm.Session) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbBalanceAdjustmentDo) Clauses(conds ...clause.Expression) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbBalanceAdjustmentDo) Returning(value interface{}, columns ...string) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbBalanceAdjustmentDo) Not(conds ...gen.Condition) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbBalanceAdjustmentDo) Or(conds ...gen.Condition) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbBalanceAdjustmentDo) Select(conds ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbBalanceAdjustmentDo) Where(conds ...gen.Condition) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbBalanceAdjustmentDo) Order(conds ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbBalanceAdjustmentDo) Distinct(cols ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbBalanceAdjustmentDo) Omit(cols ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbBalanceAdjustmentDo) Join(table schema.Tabler, on ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbBalanceAdjustmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbBalanceAdjustmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbBalanceAdjustmentDo) Group(cols ...field.Expr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbBalanceAdjustmentDo) Having(conds ...gen.Condition) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbBalanceAdjustmentDo) Limit(limit int) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbBalanceAdjustmentDo) Offset(offset int) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbBalanceAdjustmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbBalanceAdjustmentDo) Unscoped() IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbBalanceAdjustmentDo) Create(values ...*model.FbBalanceAdjustment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbBalanceAdjustmentDo) CreateInBatches(values []*model.FbBalanceAdjustment, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbBalanceAdjustmentDo) Save(values ...*model.FbBalanceAdjustment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbBalanceAdjustmentDo) First() (*model.FbBalanceAdjustment, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceAdjustment), nil
	}
}

func (f fbBalanceAdjustmentDo) Take() (*model.FbBalanceAdjustment, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceAdjustment), nil
	}
}

func (f fbBalanceAdjustmentDo) Last() (*model.FbBalanceAdjustment, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceAdjustment), nil
	}
}

func (f fbBalanceAdjustmentDo) Find() ([]*model.FbBalanceAdjustment, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbBalanceAdjustment), err
}

func (f fbBalanceAdjustmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBalanceAdjustment, err error) {
	buf := make([]*model.FbBalanceAdjustment, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbBalanceAdjustmentDo) FindInBatches(result *[]*model.FbBalanceAdjustment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbBalanceAdjustmentDo) Attrs(attrs ...field.AssignExpr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbBalanceAdjustmentDo) Assign(attrs ...field.AssignExpr) IFbBalanceAdjustmentDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbBalanceAdjustmentDo) Joins(fields ...field.RelationField) IFbBalanceAdjustmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbBalanceAdjustmentDo) Preload(fields ...field.RelationField) IFbBalanceAdjustmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbBalanceAdjustmentDo) FirstOrInit() (*model.FbBalanceAdjustment, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceAdjustment), nil
	}
}

func (f fbBalanceAdjustmentDo) FirstOrCreate() (*model.FbBalanceAdjustment, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceAdjustment), nil
	}
}

func (f fbBalanceAdjustmentDo) FindByPage(offset int, limit int) (result []*model.FbBalanceAdjustment, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbBalanceAdjustmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbBalanceAdjustmentDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbBalanceAdjustmentDo) Delete(models ...*model.FbBalanceAdjustment) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbBalanceAdjustmentDo) withDO(do gen.Dao) *fbBalanceAdjustmentDo {
	f.DO = *do.(*gen.DO)
	return f
}
