// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbOtpSmsRecord(db *gorm.DB, opts ...gen.DOOption) fbOtpSmsRecord {
	_fbOtpSmsRecord := fbOtpSmsRecord{}

	_fbOtpSmsRecord.fbOtpSmsRecordDo.UseDB(db, opts...)
	_fbOtpSmsRecord.fbOtpSmsRecordDo.UseModel(&model.FbOtpSmsRecord{})

	tableName := _fbOtpSmsRecord.fbOtpSmsRecordDo.TableName()
	_fbOtpSmsRecord.ALL = field.NewAsterisk(tableName)
	_fbOtpSmsRecord.ID = field.NewInt64(tableName, "id")
	_fbOtpSmsRecord.CountryCode = field.NewString(tableName, "country_code")
	_fbOtpSmsRecord.Phone = field.NewString(tableName, "phone")
	_fbOtpSmsRecord.Code = field.NewString(tableName, "code")
	_fbOtpSmsRecord.Reason = field.NewString(tableName, "reason")
	_fbOtpSmsRecord.State = field.NewInt32(tableName, "state")
	_fbOtpSmsRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbOtpSmsRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbOtpSmsRecord.ExpireAt = field.NewInt64(tableName, "expire_at")
	_fbOtpSmsRecord.ChannelName = field.NewString(tableName, "channel_name")
	_fbOtpSmsRecord.ConsumedAt = field.NewInt64(tableName, "consumed_at")

	_fbOtpSmsRecord.fillFieldMap()

	return _fbOtpSmsRecord
}

// fbOtpSmsRecord otp_sms表
type fbOtpSmsRecord struct {
	fbOtpSmsRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	CountryCode field.String // 国家区号
	Phone       field.String // 手机号
	Code        field.String // code
	Reason      field.String // reason
	State       field.Int32  // 0=正常
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64
	ExpireAt    field.Int64
	ChannelName field.String
	ConsumedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (f fbOtpSmsRecord) Table(newTableName string) *fbOtpSmsRecord {
	f.fbOtpSmsRecordDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbOtpSmsRecord) As(alias string) *fbOtpSmsRecord {
	f.fbOtpSmsRecordDo.DO = *(f.fbOtpSmsRecordDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbOtpSmsRecord) updateTableName(table string) *fbOtpSmsRecord {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CountryCode = field.NewString(table, "country_code")
	f.Phone = field.NewString(table, "phone")
	f.Code = field.NewString(table, "code")
	f.Reason = field.NewString(table, "reason")
	f.State = field.NewInt32(table, "state")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.ExpireAt = field.NewInt64(table, "expire_at")
	f.ChannelName = field.NewString(table, "channel_name")
	f.ConsumedAt = field.NewInt64(table, "consumed_at")

	f.fillFieldMap()

	return f
}

func (f *fbOtpSmsRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbOtpSmsRecord) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["country_code"] = f.CountryCode
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["code"] = f.Code
	f.fieldMap["reason"] = f.Reason
	f.fieldMap["state"] = f.State
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["expire_at"] = f.ExpireAt
	f.fieldMap["channel_name"] = f.ChannelName
	f.fieldMap["consumed_at"] = f.ConsumedAt
}

func (f fbOtpSmsRecord) clone(db *gorm.DB) fbOtpSmsRecord {
	f.fbOtpSmsRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbOtpSmsRecord) replaceDB(db *gorm.DB) fbOtpSmsRecord {
	f.fbOtpSmsRecordDo.ReplaceDB(db)
	return f
}

type fbOtpSmsRecordDo struct{ gen.DO }

type IFbOtpSmsRecordDo interface {
	gen.SubQuery
	Debug() IFbOtpSmsRecordDo
	WithContext(ctx context.Context) IFbOtpSmsRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbOtpSmsRecordDo
	WriteDB() IFbOtpSmsRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbOtpSmsRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbOtpSmsRecordDo
	Not(conds ...gen.Condition) IFbOtpSmsRecordDo
	Or(conds ...gen.Condition) IFbOtpSmsRecordDo
	Select(conds ...field.Expr) IFbOtpSmsRecordDo
	Where(conds ...gen.Condition) IFbOtpSmsRecordDo
	Order(conds ...field.Expr) IFbOtpSmsRecordDo
	Distinct(cols ...field.Expr) IFbOtpSmsRecordDo
	Omit(cols ...field.Expr) IFbOtpSmsRecordDo
	Join(table schema.Tabler, on ...field.Expr) IFbOtpSmsRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbOtpSmsRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbOtpSmsRecordDo
	Group(cols ...field.Expr) IFbOtpSmsRecordDo
	Having(conds ...gen.Condition) IFbOtpSmsRecordDo
	Limit(limit int) IFbOtpSmsRecordDo
	Offset(offset int) IFbOtpSmsRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbOtpSmsRecordDo
	Unscoped() IFbOtpSmsRecordDo
	Create(values ...*model.FbOtpSmsRecord) error
	CreateInBatches(values []*model.FbOtpSmsRecord, batchSize int) error
	Save(values ...*model.FbOtpSmsRecord) error
	First() (*model.FbOtpSmsRecord, error)
	Take() (*model.FbOtpSmsRecord, error)
	Last() (*model.FbOtpSmsRecord, error)
	Find() ([]*model.FbOtpSmsRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbOtpSmsRecord, err error)
	FindInBatches(result *[]*model.FbOtpSmsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbOtpSmsRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbOtpSmsRecordDo
	Assign(attrs ...field.AssignExpr) IFbOtpSmsRecordDo
	Joins(fields ...field.RelationField) IFbOtpSmsRecordDo
	Preload(fields ...field.RelationField) IFbOtpSmsRecordDo
	FirstOrInit() (*model.FbOtpSmsRecord, error)
	FirstOrCreate() (*model.FbOtpSmsRecord, error)
	FindByPage(offset int, limit int) (result []*model.FbOtpSmsRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbOtpSmsRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbOtpSmsRecordDo) Debug() IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Debug())
}

func (f fbOtpSmsRecordDo) WithContext(ctx context.Context) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbOtpSmsRecordDo) ReadDB() IFbOtpSmsRecordDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbOtpSmsRecordDo) WriteDB() IFbOtpSmsRecordDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbOtpSmsRecordDo) Session(config *gorm.Session) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbOtpSmsRecordDo) Clauses(conds ...clause.Expression) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbOtpSmsRecordDo) Returning(value interface{}, columns ...string) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbOtpSmsRecordDo) Not(conds ...gen.Condition) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbOtpSmsRecordDo) Or(conds ...gen.Condition) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbOtpSmsRecordDo) Select(conds ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbOtpSmsRecordDo) Where(conds ...gen.Condition) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbOtpSmsRecordDo) Order(conds ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbOtpSmsRecordDo) Distinct(cols ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbOtpSmsRecordDo) Omit(cols ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbOtpSmsRecordDo) Join(table schema.Tabler, on ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbOtpSmsRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbOtpSmsRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbOtpSmsRecordDo) Group(cols ...field.Expr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbOtpSmsRecordDo) Having(conds ...gen.Condition) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbOtpSmsRecordDo) Limit(limit int) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbOtpSmsRecordDo) Offset(offset int) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbOtpSmsRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbOtpSmsRecordDo) Unscoped() IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbOtpSmsRecordDo) Create(values ...*model.FbOtpSmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbOtpSmsRecordDo) CreateInBatches(values []*model.FbOtpSmsRecord, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbOtpSmsRecordDo) Save(values ...*model.FbOtpSmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbOtpSmsRecordDo) First() (*model.FbOtpSmsRecord, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbOtpSmsRecord), nil
	}
}

func (f fbOtpSmsRecordDo) Take() (*model.FbOtpSmsRecord, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbOtpSmsRecord), nil
	}
}

func (f fbOtpSmsRecordDo) Last() (*model.FbOtpSmsRecord, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbOtpSmsRecord), nil
	}
}

func (f fbOtpSmsRecordDo) Find() ([]*model.FbOtpSmsRecord, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbOtpSmsRecord), err
}

func (f fbOtpSmsRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbOtpSmsRecord, err error) {
	buf := make([]*model.FbOtpSmsRecord, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbOtpSmsRecordDo) FindInBatches(result *[]*model.FbOtpSmsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbOtpSmsRecordDo) Attrs(attrs ...field.AssignExpr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbOtpSmsRecordDo) Assign(attrs ...field.AssignExpr) IFbOtpSmsRecordDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbOtpSmsRecordDo) Joins(fields ...field.RelationField) IFbOtpSmsRecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbOtpSmsRecordDo) Preload(fields ...field.RelationField) IFbOtpSmsRecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbOtpSmsRecordDo) FirstOrInit() (*model.FbOtpSmsRecord, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbOtpSmsRecord), nil
	}
}

func (f fbOtpSmsRecordDo) FirstOrCreate() (*model.FbOtpSmsRecord, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbOtpSmsRecord), nil
	}
}

func (f fbOtpSmsRecordDo) FindByPage(offset int, limit int) (result []*model.FbOtpSmsRecord, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbOtpSmsRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbOtpSmsRecordDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbOtpSmsRecordDo) Delete(models ...*model.FbOtpSmsRecord) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbOtpSmsRecordDo) withDO(do gen.Dao) *fbOtpSmsRecordDo {
	f.DO = *do.(*gen.DO)
	return f
}
