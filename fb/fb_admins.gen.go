// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbAdmin(db *gorm.DB, opts ...gen.DOOption) fbAdmin {
	_fbAdmin := fbAdmin{}

	_fbAdmin.fbAdminDo.UseDB(db, opts...)
	_fbAdmin.fbAdminDo.UseModel(&model.FbAdmin{})

	tableName := _fbAdmin.fbAdminDo.TableName()
	_fbAdmin.ALL = field.NewAsterisk(tableName)
	_fbAdmin.ID = field.NewInt64(tableName, "id")
	_fbAdmin.GroupID = field.NewInt64(tableName, "group_id")
	_fbAdmin.Nickname = field.NewString(tableName, "nickname")
	_fbAdmin.Avatar = field.NewString(tableName, "avatar")
	_fbAdmin.Email = field.NewString(tableName, "email")
	_fbAdmin.LoginPassword = field.NewString(tableName, "login_password")
	_fbAdmin.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_fbAdmin.LastLoginTime = field.NewInt64(tableName, "last_login_time")
	_fbAdmin.Roles = field.NewString(tableName, "roles")
	_fbAdmin.Status = field.NewInt32(tableName, "status")
	_fbAdmin.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbAdmin.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbAdmin.GoogleSecret = field.NewString(tableName, "google_secret")
	_fbAdmin.Username = field.NewString(tableName, "username")
	_fbAdmin.BindTime = field.NewInt64(tableName, "bind_time")
	_fbAdmin.OperatorName = field.NewString(tableName, "operator_name")
	_fbAdmin.CreateName = field.NewString(tableName, "create_name")
	_fbAdmin.PwdEditTime = field.NewInt64(tableName, "pwd_edit_time")

	_fbAdmin.fillFieldMap()

	return _fbAdmin
}

// fbAdmin 后台账户表
type fbAdmin struct {
	fbAdminDo

	ALL           field.Asterisk
	ID            field.Int64
	GroupID       field.Int64  // 用户组id
	Nickname      field.String // nickname
	Avatar        field.String // 头像
	Email         field.String // 邮箱
	LoginPassword field.String // 密码
	LastLoginIP   field.String
	LastLoginTime field.Int64  // 登陆时间
	Roles         field.String // 角色
	Status        field.Int32  // 1正常，2禁用
	UpdatedAt     field.Int64  // 修改时间
	CreatedAt     field.Int64  // 创建时间
	GoogleSecret  field.String // google验证密钥
	Username      field.String
	BindTime      field.Int64
	OperatorName  field.String
	CreateName    field.String
	PwdEditTime   field.Int64

	fieldMap map[string]field.Expr
}

func (f fbAdmin) Table(newTableName string) *fbAdmin {
	f.fbAdminDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbAdmin) As(alias string) *fbAdmin {
	f.fbAdminDo.DO = *(f.fbAdminDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbAdmin) updateTableName(table string) *fbAdmin {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.GroupID = field.NewInt64(table, "group_id")
	f.Nickname = field.NewString(table, "nickname")
	f.Avatar = field.NewString(table, "avatar")
	f.Email = field.NewString(table, "email")
	f.LoginPassword = field.NewString(table, "login_password")
	f.LastLoginIP = field.NewString(table, "last_login_ip")
	f.LastLoginTime = field.NewInt64(table, "last_login_time")
	f.Roles = field.NewString(table, "roles")
	f.Status = field.NewInt32(table, "status")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.GoogleSecret = field.NewString(table, "google_secret")
	f.Username = field.NewString(table, "username")
	f.BindTime = field.NewInt64(table, "bind_time")
	f.OperatorName = field.NewString(table, "operator_name")
	f.CreateName = field.NewString(table, "create_name")
	f.PwdEditTime = field.NewInt64(table, "pwd_edit_time")

	f.fillFieldMap()

	return f
}

func (f *fbAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbAdmin) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 18)
	f.fieldMap["id"] = f.ID
	f.fieldMap["group_id"] = f.GroupID
	f.fieldMap["nickname"] = f.Nickname
	f.fieldMap["avatar"] = f.Avatar
	f.fieldMap["email"] = f.Email
	f.fieldMap["login_password"] = f.LoginPassword
	f.fieldMap["last_login_ip"] = f.LastLoginIP
	f.fieldMap["last_login_time"] = f.LastLoginTime
	f.fieldMap["roles"] = f.Roles
	f.fieldMap["status"] = f.Status
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["google_secret"] = f.GoogleSecret
	f.fieldMap["username"] = f.Username
	f.fieldMap["bind_time"] = f.BindTime
	f.fieldMap["operator_name"] = f.OperatorName
	f.fieldMap["create_name"] = f.CreateName
	f.fieldMap["pwd_edit_time"] = f.PwdEditTime
}

func (f fbAdmin) clone(db *gorm.DB) fbAdmin {
	f.fbAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbAdmin) replaceDB(db *gorm.DB) fbAdmin {
	f.fbAdminDo.ReplaceDB(db)
	return f
}

type fbAdminDo struct{ gen.DO }

type IFbAdminDo interface {
	gen.SubQuery
	Debug() IFbAdminDo
	WithContext(ctx context.Context) IFbAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbAdminDo
	WriteDB() IFbAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbAdminDo
	Not(conds ...gen.Condition) IFbAdminDo
	Or(conds ...gen.Condition) IFbAdminDo
	Select(conds ...field.Expr) IFbAdminDo
	Where(conds ...gen.Condition) IFbAdminDo
	Order(conds ...field.Expr) IFbAdminDo
	Distinct(cols ...field.Expr) IFbAdminDo
	Omit(cols ...field.Expr) IFbAdminDo
	Join(table schema.Tabler, on ...field.Expr) IFbAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbAdminDo
	Group(cols ...field.Expr) IFbAdminDo
	Having(conds ...gen.Condition) IFbAdminDo
	Limit(limit int) IFbAdminDo
	Offset(offset int) IFbAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbAdminDo
	Unscoped() IFbAdminDo
	Create(values ...*model.FbAdmin) error
	CreateInBatches(values []*model.FbAdmin, batchSize int) error
	Save(values ...*model.FbAdmin) error
	First() (*model.FbAdmin, error)
	Take() (*model.FbAdmin, error)
	Last() (*model.FbAdmin, error)
	Find() ([]*model.FbAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbAdmin, err error)
	FindInBatches(result *[]*model.FbAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbAdminDo
	Assign(attrs ...field.AssignExpr) IFbAdminDo
	Joins(fields ...field.RelationField) IFbAdminDo
	Preload(fields ...field.RelationField) IFbAdminDo
	FirstOrInit() (*model.FbAdmin, error)
	FirstOrCreate() (*model.FbAdmin, error)
	FindByPage(offset int, limit int) (result []*model.FbAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbAdminDo) Debug() IFbAdminDo {
	return f.withDO(f.DO.Debug())
}

func (f fbAdminDo) WithContext(ctx context.Context) IFbAdminDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbAdminDo) ReadDB() IFbAdminDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbAdminDo) WriteDB() IFbAdminDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbAdminDo) Session(config *gorm.Session) IFbAdminDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbAdminDo) Clauses(conds ...clause.Expression) IFbAdminDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbAdminDo) Returning(value interface{}, columns ...string) IFbAdminDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbAdminDo) Not(conds ...gen.Condition) IFbAdminDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbAdminDo) Or(conds ...gen.Condition) IFbAdminDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbAdminDo) Select(conds ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbAdminDo) Where(conds ...gen.Condition) IFbAdminDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbAdminDo) Order(conds ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbAdminDo) Distinct(cols ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbAdminDo) Omit(cols ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbAdminDo) Join(table schema.Tabler, on ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbAdminDo) Group(cols ...field.Expr) IFbAdminDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbAdminDo) Having(conds ...gen.Condition) IFbAdminDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbAdminDo) Limit(limit int) IFbAdminDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbAdminDo) Offset(offset int) IFbAdminDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbAdminDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbAdminDo) Unscoped() IFbAdminDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbAdminDo) Create(values ...*model.FbAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbAdminDo) CreateInBatches(values []*model.FbAdmin, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbAdminDo) Save(values ...*model.FbAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbAdminDo) First() (*model.FbAdmin, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdmin), nil
	}
}

func (f fbAdminDo) Take() (*model.FbAdmin, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdmin), nil
	}
}

func (f fbAdminDo) Last() (*model.FbAdmin, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdmin), nil
	}
}

func (f fbAdminDo) Find() ([]*model.FbAdmin, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbAdmin), err
}

func (f fbAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbAdmin, err error) {
	buf := make([]*model.FbAdmin, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbAdminDo) FindInBatches(result *[]*model.FbAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbAdminDo) Attrs(attrs ...field.AssignExpr) IFbAdminDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbAdminDo) Assign(attrs ...field.AssignExpr) IFbAdminDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbAdminDo) Joins(fields ...field.RelationField) IFbAdminDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbAdminDo) Preload(fields ...field.RelationField) IFbAdminDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbAdminDo) FirstOrInit() (*model.FbAdmin, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdmin), nil
	}
}

func (f fbAdminDo) FirstOrCreate() (*model.FbAdmin, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdmin), nil
	}
}

func (f fbAdminDo) FindByPage(offset int, limit int) (result []*model.FbAdmin, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbAdminDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbAdminDo) Delete(models ...*model.FbAdmin) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbAdminDo) withDO(do gen.Dao) *fbAdminDo {
	f.DO = *do.(*gen.DO)
	return f
}
