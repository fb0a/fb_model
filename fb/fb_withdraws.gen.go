// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbWithdraw(db *gorm.DB, opts ...gen.DOOption) fbWithdraw {
	_fbWithdraw := fbWithdraw{}

	_fbWithdraw.fbWithdrawDo.UseDB(db, opts...)
	_fbWithdraw.fbWithdrawDo.UseModel(&model.FbWithdraw{})

	tableName := _fbWithdraw.fbWithdrawDo.TableName()
	_fbWithdraw.ALL = field.NewAsterisk(tableName)
	_fbWithdraw.ID = field.NewInt64(tableName, "id")
	_fbWithdraw.UID = field.NewInt64(tableName, "uid")
	_fbWithdraw.Username = field.NewString(tableName, "username")
	_fbWithdraw.Amount = field.NewFloat64(tableName, "amount")
	_fbWithdraw.Account = field.NewString(tableName, "account")
	_fbWithdraw.AccountID = field.NewString(tableName, "account_id")
	_fbWithdraw.ChannelCategory = field.NewString(tableName, "channel_category")
	_fbWithdraw.ChannelName = field.NewString(tableName, "channel_name")
	_fbWithdraw.Currency = field.NewString(tableName, "currency")
	_fbWithdraw.ExternalOrderID = field.NewString(tableName, "external_order_id")
	_fbWithdraw.FirstName = field.NewString(tableName, "first_name")
	_fbWithdraw.MiddleName = field.NewString(tableName, "middle_name")
	_fbWithdraw.LastName = field.NewString(tableName, "last_name")
	_fbWithdraw.Status = field.NewString(tableName, "status")
	_fbWithdraw.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbWithdraw.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbWithdraw.Reviewer = field.NewString(tableName, "reviewer")
	_fbWithdraw.ReviewedAt = field.NewInt64(tableName, "reviewed_at")
	_fbWithdraw.Comment = field.NewString(tableName, "comment")
	_fbWithdraw.CancelReason = field.NewString(tableName, "cancel_reason")
	_fbWithdraw.PaymentChannelID = field.NewInt64(tableName, "payment_channel_id")
	_fbWithdraw.Approval = field.NewInt32(tableName, "approval")
	_fbWithdraw.Payout = field.NewInt32(tableName, "payout")
	_fbWithdraw.ExternalTransID = field.NewString(tableName, "external_trans_id")
	_fbWithdraw.Phone = field.NewString(tableName, "phone")
	_fbWithdraw.Sid = field.NewInt32(tableName, "sid")
	_fbWithdraw.Domain = field.NewString(tableName, "domain")
	_fbWithdraw.Sq = field.NewInt64(tableName, "sq")
	_fbWithdraw.PaidAmount = field.NewFloat64(tableName, "paid_amount")
	_fbWithdraw.Fee = field.NewFloat64(tableName, "fee")

	_fbWithdraw.fillFieldMap()

	return _fbWithdraw
}

// fbWithdraw 提款表
type fbWithdraw struct {
	fbWithdrawDo

	ALL              field.Asterisk
	ID               field.Int64
	UID              field.Int64
	Username         field.String  // 用户名
	Amount           field.Float64 // 金额
	Account          field.String  // 帐号
	AccountID        field.String  // 帐号id
	ChannelCategory  field.String  // 通道分类
	ChannelName      field.String  // 通道名
	Currency         field.String  // 币种
	ExternalOrderID  field.String  // 三方订单号
	FirstName        field.String  // first_name
	MiddleName       field.String  // middle_name
	LastName         field.String  // last_name
	Status           field.String  // 状态
	CreatedAt        field.Int64   // 创建时间
	UpdatedAt        field.Int64   // 创建时间
	Reviewer         field.String
	ReviewedAt       field.Int64
	Comment          field.String
	CancelReason     field.String
	PaymentChannelID field.Int64  // 支付通道id
	Approval         field.Int32  // 0 待审核 1审核失败 2审核成功 3 自动审核
	Payout           field.Int32  // 0 待出款 1出款中 2出款成功 3 出款失败
	ExternalTransID  field.String // 三方订单号
	Phone            field.String
	Sid              field.Int32  // 店铺id
	Domain           field.String // 域名
	Sq               field.Int64
	PaidAmount       field.Float64 // 到账金额
	Fee              field.Float64 // 手续费

	fieldMap map[string]field.Expr
}

func (f fbWithdraw) Table(newTableName string) *fbWithdraw {
	f.fbWithdrawDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbWithdraw) As(alias string) *fbWithdraw {
	f.fbWithdrawDo.DO = *(f.fbWithdrawDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbWithdraw) updateTableName(table string) *fbWithdraw {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.Amount = field.NewFloat64(table, "amount")
	f.Account = field.NewString(table, "account")
	f.AccountID = field.NewString(table, "account_id")
	f.ChannelCategory = field.NewString(table, "channel_category")
	f.ChannelName = field.NewString(table, "channel_name")
	f.Currency = field.NewString(table, "currency")
	f.ExternalOrderID = field.NewString(table, "external_order_id")
	f.FirstName = field.NewString(table, "first_name")
	f.MiddleName = field.NewString(table, "middle_name")
	f.LastName = field.NewString(table, "last_name")
	f.Status = field.NewString(table, "status")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.Reviewer = field.NewString(table, "reviewer")
	f.ReviewedAt = field.NewInt64(table, "reviewed_at")
	f.Comment = field.NewString(table, "comment")
	f.CancelReason = field.NewString(table, "cancel_reason")
	f.PaymentChannelID = field.NewInt64(table, "payment_channel_id")
	f.Approval = field.NewInt32(table, "approval")
	f.Payout = field.NewInt32(table, "payout")
	f.ExternalTransID = field.NewString(table, "external_trans_id")
	f.Phone = field.NewString(table, "phone")
	f.Sid = field.NewInt32(table, "sid")
	f.Domain = field.NewString(table, "domain")
	f.Sq = field.NewInt64(table, "sq")
	f.PaidAmount = field.NewFloat64(table, "paid_amount")
	f.Fee = field.NewFloat64(table, "fee")

	f.fillFieldMap()

	return f
}

func (f *fbWithdraw) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbWithdraw) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 30)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["amount"] = f.Amount
	f.fieldMap["account"] = f.Account
	f.fieldMap["account_id"] = f.AccountID
	f.fieldMap["channel_category"] = f.ChannelCategory
	f.fieldMap["channel_name"] = f.ChannelName
	f.fieldMap["currency"] = f.Currency
	f.fieldMap["external_order_id"] = f.ExternalOrderID
	f.fieldMap["first_name"] = f.FirstName
	f.fieldMap["middle_name"] = f.MiddleName
	f.fieldMap["last_name"] = f.LastName
	f.fieldMap["status"] = f.Status
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["reviewer"] = f.Reviewer
	f.fieldMap["reviewed_at"] = f.ReviewedAt
	f.fieldMap["comment"] = f.Comment
	f.fieldMap["cancel_reason"] = f.CancelReason
	f.fieldMap["payment_channel_id"] = f.PaymentChannelID
	f.fieldMap["approval"] = f.Approval
	f.fieldMap["payout"] = f.Payout
	f.fieldMap["external_trans_id"] = f.ExternalTransID
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["sid"] = f.Sid
	f.fieldMap["domain"] = f.Domain
	f.fieldMap["sq"] = f.Sq
	f.fieldMap["paid_amount"] = f.PaidAmount
	f.fieldMap["fee"] = f.Fee
}

func (f fbWithdraw) clone(db *gorm.DB) fbWithdraw {
	f.fbWithdrawDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbWithdraw) replaceDB(db *gorm.DB) fbWithdraw {
	f.fbWithdrawDo.ReplaceDB(db)
	return f
}

type fbWithdrawDo struct{ gen.DO }

type IFbWithdrawDo interface {
	gen.SubQuery
	Debug() IFbWithdrawDo
	WithContext(ctx context.Context) IFbWithdrawDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbWithdrawDo
	WriteDB() IFbWithdrawDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbWithdrawDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbWithdrawDo
	Not(conds ...gen.Condition) IFbWithdrawDo
	Or(conds ...gen.Condition) IFbWithdrawDo
	Select(conds ...field.Expr) IFbWithdrawDo
	Where(conds ...gen.Condition) IFbWithdrawDo
	Order(conds ...field.Expr) IFbWithdrawDo
	Distinct(cols ...field.Expr) IFbWithdrawDo
	Omit(cols ...field.Expr) IFbWithdrawDo
	Join(table schema.Tabler, on ...field.Expr) IFbWithdrawDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbWithdrawDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbWithdrawDo
	Group(cols ...field.Expr) IFbWithdrawDo
	Having(conds ...gen.Condition) IFbWithdrawDo
	Limit(limit int) IFbWithdrawDo
	Offset(offset int) IFbWithdrawDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbWithdrawDo
	Unscoped() IFbWithdrawDo
	Create(values ...*model.FbWithdraw) error
	CreateInBatches(values []*model.FbWithdraw, batchSize int) error
	Save(values ...*model.FbWithdraw) error
	First() (*model.FbWithdraw, error)
	Take() (*model.FbWithdraw, error)
	Last() (*model.FbWithdraw, error)
	Find() ([]*model.FbWithdraw, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbWithdraw, err error)
	FindInBatches(result *[]*model.FbWithdraw, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbWithdraw) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbWithdrawDo
	Assign(attrs ...field.AssignExpr) IFbWithdrawDo
	Joins(fields ...field.RelationField) IFbWithdrawDo
	Preload(fields ...field.RelationField) IFbWithdrawDo
	FirstOrInit() (*model.FbWithdraw, error)
	FirstOrCreate() (*model.FbWithdraw, error)
	FindByPage(offset int, limit int) (result []*model.FbWithdraw, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbWithdrawDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbWithdrawDo) Debug() IFbWithdrawDo {
	return f.withDO(f.DO.Debug())
}

func (f fbWithdrawDo) WithContext(ctx context.Context) IFbWithdrawDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbWithdrawDo) ReadDB() IFbWithdrawDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbWithdrawDo) WriteDB() IFbWithdrawDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbWithdrawDo) Session(config *gorm.Session) IFbWithdrawDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbWithdrawDo) Clauses(conds ...clause.Expression) IFbWithdrawDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbWithdrawDo) Returning(value interface{}, columns ...string) IFbWithdrawDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbWithdrawDo) Not(conds ...gen.Condition) IFbWithdrawDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbWithdrawDo) Or(conds ...gen.Condition) IFbWithdrawDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbWithdrawDo) Select(conds ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbWithdrawDo) Where(conds ...gen.Condition) IFbWithdrawDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbWithdrawDo) Order(conds ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbWithdrawDo) Distinct(cols ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbWithdrawDo) Omit(cols ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbWithdrawDo) Join(table schema.Tabler, on ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbWithdrawDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbWithdrawDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbWithdrawDo) Group(cols ...field.Expr) IFbWithdrawDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbWithdrawDo) Having(conds ...gen.Condition) IFbWithdrawDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbWithdrawDo) Limit(limit int) IFbWithdrawDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbWithdrawDo) Offset(offset int) IFbWithdrawDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbWithdrawDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbWithdrawDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbWithdrawDo) Unscoped() IFbWithdrawDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbWithdrawDo) Create(values ...*model.FbWithdraw) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbWithdrawDo) CreateInBatches(values []*model.FbWithdraw, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbWithdrawDo) Save(values ...*model.FbWithdraw) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbWithdrawDo) First() (*model.FbWithdraw, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWithdraw), nil
	}
}

func (f fbWithdrawDo) Take() (*model.FbWithdraw, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWithdraw), nil
	}
}

func (f fbWithdrawDo) Last() (*model.FbWithdraw, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWithdraw), nil
	}
}

func (f fbWithdrawDo) Find() ([]*model.FbWithdraw, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbWithdraw), err
}

func (f fbWithdrawDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbWithdraw, err error) {
	buf := make([]*model.FbWithdraw, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbWithdrawDo) FindInBatches(result *[]*model.FbWithdraw, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbWithdrawDo) Attrs(attrs ...field.AssignExpr) IFbWithdrawDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbWithdrawDo) Assign(attrs ...field.AssignExpr) IFbWithdrawDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbWithdrawDo) Joins(fields ...field.RelationField) IFbWithdrawDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbWithdrawDo) Preload(fields ...field.RelationField) IFbWithdrawDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbWithdrawDo) FirstOrInit() (*model.FbWithdraw, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWithdraw), nil
	}
}

func (f fbWithdrawDo) FirstOrCreate() (*model.FbWithdraw, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWithdraw), nil
	}
}

func (f fbWithdrawDo) FindByPage(offset int, limit int) (result []*model.FbWithdraw, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbWithdrawDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbWithdrawDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbWithdrawDo) Delete(models ...*model.FbWithdraw) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbWithdrawDo) withDO(do gen.Dao) *fbWithdrawDo {
	f.DO = *do.(*gen.DO)
	return f
}
