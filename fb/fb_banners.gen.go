// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbBanner(db *gorm.DB, opts ...gen.DOOption) fbBanner {
	_fbBanner := fbBanner{}

	_fbBanner.fbBannerDo.UseDB(db, opts...)
	_fbBanner.fbBannerDo.UseModel(&model.FbBanner{})

	tableName := _fbBanner.fbBannerDo.TableName()
	_fbBanner.ALL = field.NewAsterisk(tableName)
	_fbBanner.ID = field.NewInt64(tableName, "id")
	_fbBanner.URL = field.NewString(tableName, "url")
	_fbBanner.LinkType = field.NewInt32(tableName, "link_type")
	_fbBanner.LinkH5 = field.NewString(tableName, "link_h5")
	_fbBanner.LinkApp = field.NewString(tableName, "link_app")
	_fbBanner.BackColor = field.NewString(tableName, "back_color")
	_fbBanner.StartTime = field.NewInt64(tableName, "start_time")
	_fbBanner.EndTime = field.NewInt64(tableName, "end_time")
	_fbBanner.State = field.NewInt32(tableName, "state")
	_fbBanner.Seq = field.NewInt32(tableName, "seq")
	_fbBanner.Ty = field.NewString(tableName, "ty")
	_fbBanner.Category = field.NewString(tableName, "category")
	_fbBanner.Remark = field.NewString(tableName, "remark")
	_fbBanner.IsDelete = field.NewInt32(tableName, "is_delete")
	_fbBanner.CreatedAt = field.NewInt32(tableName, "created_at")
	_fbBanner.CreatedUID = field.NewInt64(tableName, "created_uid")
	_fbBanner.CreatedName = field.NewString(tableName, "created_name")
	_fbBanner.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbBanner.UpdatedUID = field.NewInt64(tableName, "updated_uid")
	_fbBanner.UpdatedName = field.NewString(tableName, "updated_name")
	_fbBanner.Content = field.NewString(tableName, "content")

	_fbBanner.fillFieldMap()

	return _fbBanner
}

// fbBanner 轮播图
type fbBanner struct {
	fbBannerDo

	ALL         field.Asterisk
	ID          field.Int64
	URL         field.String // 轮播图图片路径
	LinkType    field.Int32  // 链接类型 1网页链接 2公网链接
	LinkH5      field.String // 轮播图跳转链接(H5)
	LinkApp     field.String // 轮播图跳转链接(APP)
	BackColor   field.String // 轮播图背景色
	StartTime   field.Int64  // 展示开始时间
	EndTime     field.Int64  // 展示结束时间
	State       field.Int32  // 状态 1上线 2下线
	Seq         field.Int32  // 排序
	Ty          field.String
	Category    field.String
	Remark      field.String // 用途说明
	IsDelete    field.Int32  // 删除状态 1已删除 2正常
	CreatedAt   field.Int32  // 添加时间
	CreatedUID  field.Int64  // 创建人uid
	CreatedName field.String // 创建人名
	UpdatedAt   field.Int64  // 维护时间
	UpdatedUID  field.Int64  // 维护人uid
	UpdatedName field.String // 维护人名
	Content     field.String

	fieldMap map[string]field.Expr
}

func (f fbBanner) Table(newTableName string) *fbBanner {
	f.fbBannerDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbBanner) As(alias string) *fbBanner {
	f.fbBannerDo.DO = *(f.fbBannerDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbBanner) updateTableName(table string) *fbBanner {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.URL = field.NewString(table, "url")
	f.LinkType = field.NewInt32(table, "link_type")
	f.LinkH5 = field.NewString(table, "link_h5")
	f.LinkApp = field.NewString(table, "link_app")
	f.BackColor = field.NewString(table, "back_color")
	f.StartTime = field.NewInt64(table, "start_time")
	f.EndTime = field.NewInt64(table, "end_time")
	f.State = field.NewInt32(table, "state")
	f.Seq = field.NewInt32(table, "seq")
	f.Ty = field.NewString(table, "ty")
	f.Category = field.NewString(table, "category")
	f.Remark = field.NewString(table, "remark")
	f.IsDelete = field.NewInt32(table, "is_delete")
	f.CreatedAt = field.NewInt32(table, "created_at")
	f.CreatedUID = field.NewInt64(table, "created_uid")
	f.CreatedName = field.NewString(table, "created_name")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.Content = field.NewString(table, "content")

	f.fillFieldMap()

	return f
}

func (f *fbBanner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbBanner) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 21)
	f.fieldMap["id"] = f.ID
	f.fieldMap["url"] = f.URL
	f.fieldMap["link_type"] = f.LinkType
	f.fieldMap["link_h5"] = f.LinkH5
	f.fieldMap["link_app"] = f.LinkApp
	f.fieldMap["back_color"] = f.BackColor
	f.fieldMap["start_time"] = f.StartTime
	f.fieldMap["end_time"] = f.EndTime
	f.fieldMap["state"] = f.State
	f.fieldMap["seq"] = f.Seq
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["category"] = f.Category
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["is_delete"] = f.IsDelete
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["created_uid"] = f.CreatedUID
	f.fieldMap["created_name"] = f.CreatedName
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["content"] = f.Content
}

func (f fbBanner) clone(db *gorm.DB) fbBanner {
	f.fbBannerDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbBanner) replaceDB(db *gorm.DB) fbBanner {
	f.fbBannerDo.ReplaceDB(db)
	return f
}

type fbBannerDo struct{ gen.DO }

type IFbBannerDo interface {
	gen.SubQuery
	Debug() IFbBannerDo
	WithContext(ctx context.Context) IFbBannerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbBannerDo
	WriteDB() IFbBannerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbBannerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbBannerDo
	Not(conds ...gen.Condition) IFbBannerDo
	Or(conds ...gen.Condition) IFbBannerDo
	Select(conds ...field.Expr) IFbBannerDo
	Where(conds ...gen.Condition) IFbBannerDo
	Order(conds ...field.Expr) IFbBannerDo
	Distinct(cols ...field.Expr) IFbBannerDo
	Omit(cols ...field.Expr) IFbBannerDo
	Join(table schema.Tabler, on ...field.Expr) IFbBannerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbBannerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbBannerDo
	Group(cols ...field.Expr) IFbBannerDo
	Having(conds ...gen.Condition) IFbBannerDo
	Limit(limit int) IFbBannerDo
	Offset(offset int) IFbBannerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBannerDo
	Unscoped() IFbBannerDo
	Create(values ...*model.FbBanner) error
	CreateInBatches(values []*model.FbBanner, batchSize int) error
	Save(values ...*model.FbBanner) error
	First() (*model.FbBanner, error)
	Take() (*model.FbBanner, error)
	Last() (*model.FbBanner, error)
	Find() ([]*model.FbBanner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBanner, err error)
	FindInBatches(result *[]*model.FbBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbBanner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbBannerDo
	Assign(attrs ...field.AssignExpr) IFbBannerDo
	Joins(fields ...field.RelationField) IFbBannerDo
	Preload(fields ...field.RelationField) IFbBannerDo
	FirstOrInit() (*model.FbBanner, error)
	FirstOrCreate() (*model.FbBanner, error)
	FindByPage(offset int, limit int) (result []*model.FbBanner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbBannerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbBannerDo) Debug() IFbBannerDo {
	return f.withDO(f.DO.Debug())
}

func (f fbBannerDo) WithContext(ctx context.Context) IFbBannerDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbBannerDo) ReadDB() IFbBannerDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbBannerDo) WriteDB() IFbBannerDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbBannerDo) Session(config *gorm.Session) IFbBannerDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbBannerDo) Clauses(conds ...clause.Expression) IFbBannerDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbBannerDo) Returning(value interface{}, columns ...string) IFbBannerDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbBannerDo) Not(conds ...gen.Condition) IFbBannerDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbBannerDo) Or(conds ...gen.Condition) IFbBannerDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbBannerDo) Select(conds ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbBannerDo) Where(conds ...gen.Condition) IFbBannerDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbBannerDo) Order(conds ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbBannerDo) Distinct(cols ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbBannerDo) Omit(cols ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbBannerDo) Join(table schema.Tabler, on ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbBannerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbBannerDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbBannerDo) Group(cols ...field.Expr) IFbBannerDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbBannerDo) Having(conds ...gen.Condition) IFbBannerDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbBannerDo) Limit(limit int) IFbBannerDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbBannerDo) Offset(offset int) IFbBannerDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbBannerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBannerDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbBannerDo) Unscoped() IFbBannerDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbBannerDo) Create(values ...*model.FbBanner) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbBannerDo) CreateInBatches(values []*model.FbBanner, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbBannerDo) Save(values ...*model.FbBanner) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbBannerDo) First() (*model.FbBanner, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBanner), nil
	}
}

func (f fbBannerDo) Take() (*model.FbBanner, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBanner), nil
	}
}

func (f fbBannerDo) Last() (*model.FbBanner, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBanner), nil
	}
}

func (f fbBannerDo) Find() ([]*model.FbBanner, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbBanner), err
}

func (f fbBannerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBanner, err error) {
	buf := make([]*model.FbBanner, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbBannerDo) FindInBatches(result *[]*model.FbBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbBannerDo) Attrs(attrs ...field.AssignExpr) IFbBannerDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbBannerDo) Assign(attrs ...field.AssignExpr) IFbBannerDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbBannerDo) Joins(fields ...field.RelationField) IFbBannerDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbBannerDo) Preload(fields ...field.RelationField) IFbBannerDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbBannerDo) FirstOrInit() (*model.FbBanner, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBanner), nil
	}
}

func (f fbBannerDo) FirstOrCreate() (*model.FbBanner, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBanner), nil
	}
}

func (f fbBannerDo) FindByPage(offset int, limit int) (result []*model.FbBanner, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbBannerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbBannerDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbBannerDo) Delete(models ...*model.FbBanner) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbBannerDo) withDO(do gen.Dao) *fbBannerDo {
	f.DO = *do.(*gen.DO)
	return f
}
