// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMembersKyc(db *gorm.DB, opts ...gen.DOOption) fbMembersKyc {
	_fbMembersKyc := fbMembersKyc{}

	_fbMembersKyc.fbMembersKycDo.UseDB(db, opts...)
	_fbMembersKyc.fbMembersKycDo.UseModel(&model.FbMembersKyc{})

	tableName := _fbMembersKyc.fbMembersKycDo.TableName()
	_fbMembersKyc.ALL = field.NewAsterisk(tableName)
	_fbMembersKyc.UID = field.NewInt64(tableName, "uid")
	_fbMembersKyc.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbMembersKyc.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbMembersKyc.Phone = field.NewString(tableName, "phone")
	_fbMembersKyc.FirstName = field.NewString(tableName, "first_name")
	_fbMembersKyc.MiddleName = field.NewString(tableName, "middle_name")
	_fbMembersKyc.LastName = field.NewString(tableName, "last_name")
	_fbMembersKyc.Birthday = field.NewString(tableName, "birthday")
	_fbMembersKyc.CountryCode = field.NewString(tableName, "country_code")
	_fbMembersKyc.NearestBranch = field.NewString(tableName, "nearest_branch")
	_fbMembersKyc.IDType = field.NewString(tableName, "id_type")
	_fbMembersKyc.IDNumber = field.NewString(tableName, "id_number")
	_fbMembersKyc.Gender = field.NewString(tableName, "gender")
	_fbMembersKyc.Attachments = field.NewString(tableName, "attachments")
	_fbMembersKyc.ExtraDetails = field.NewString(tableName, "extra_details")
	_fbMembersKyc.PlaceOfBirth = field.NewString(tableName, "place_of_birth")
	_fbMembersKyc.Nationality = field.NewString(tableName, "nationality")
	_fbMembersKyc.CurrentAddress = field.NewString(tableName, "current_address")
	_fbMembersKyc.PermanentAddress = field.NewString(tableName, "permanent_address")
	_fbMembersKyc.NatureOfWork = field.NewString(tableName, "nature_of_work")
	_fbMembersKyc.SourceOfIncome = field.NewString(tableName, "source_of_income")
	_fbMembersKyc.Occupation = field.NewString(tableName, "occupation")
	_fbMembersKyc.Tokens = field.NewString(tableName, "tokens")
	_fbMembersKyc.BlacklistStatus = field.NewInt32(tableName, "blacklist_status")
	_fbMembersKyc.Issue = field.NewString(tableName, "issue")
	_fbMembersKyc.IssueMsg = field.NewString(tableName, "issue_msg")
	_fbMembersKyc.IssueFields = field.NewString(tableName, "issue_fields")
	_fbMembersKyc.Status = field.NewString(tableName, "status")
	_fbMembersKyc.Comment = field.NewString(tableName, "comment")
	_fbMembersKyc.Reviewer = field.NewString(tableName, "reviewer")
	_fbMembersKyc.ReviewTimes = field.NewInt64(tableName, "review_times")
	_fbMembersKyc.OcrStatus = field.NewInt32(tableName, "ocr_status")
	_fbMembersKyc.Ocr = field.NewString(tableName, "ocr")
	_fbMembersKyc.ExternalInformation = field.NewString(tableName, "external_information")
	_fbMembersKyc.Version = field.NewString(tableName, "version")

	_fbMembersKyc.fillFieldMap()

	return _fbMembersKyc
}

// fbMembersKyc 会员kyc表
type fbMembersKyc struct {
	fbMembersKycDo

	ALL                 field.Asterisk
	UID                 field.Int64
	CreatedAt           field.Int64  // 创建时间
	UpdatedAt           field.Int64  // 创建时间
	Phone               field.String // 手机号
	FirstName           field.String // first_name
	MiddleName          field.String // middle_name
	LastName            field.String // last_name
	Birthday            field.String // 生日
	CountryCode         field.String // 国家区号
	NearestBranch       field.String // 分行
	IDType              field.String // 证件类型
	IDNumber            field.String // 证件编号
	Gender              field.String // 性别
	Attachments         field.String
	ExtraDetails        field.String
	PlaceOfBirth        field.String
	Nationality         field.String
	CurrentAddress      field.String
	PermanentAddress    field.String
	NatureOfWork        field.String
	SourceOfIncome      field.String
	Occupation          field.String
	Tokens              field.String
	BlacklistStatus     field.Int32
	Issue               field.String
	IssueMsg            field.String
	IssueFields         field.String
	Status              field.String // 状态
	Comment             field.String
	Reviewer            field.String
	ReviewTimes         field.Int64
	OcrStatus           field.Int32
	Ocr                 field.String
	ExternalInformation field.String
	Version             field.String

	fieldMap map[string]field.Expr
}

func (f fbMembersKyc) Table(newTableName string) *fbMembersKyc {
	f.fbMembersKycDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMembersKyc) As(alias string) *fbMembersKyc {
	f.fbMembersKycDo.DO = *(f.fbMembersKycDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMembersKyc) updateTableName(table string) *fbMembersKyc {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewInt64(table, "uid")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.Phone = field.NewString(table, "phone")
	f.FirstName = field.NewString(table, "first_name")
	f.MiddleName = field.NewString(table, "middle_name")
	f.LastName = field.NewString(table, "last_name")
	f.Birthday = field.NewString(table, "birthday")
	f.CountryCode = field.NewString(table, "country_code")
	f.NearestBranch = field.NewString(table, "nearest_branch")
	f.IDType = field.NewString(table, "id_type")
	f.IDNumber = field.NewString(table, "id_number")
	f.Gender = field.NewString(table, "gender")
	f.Attachments = field.NewString(table, "attachments")
	f.ExtraDetails = field.NewString(table, "extra_details")
	f.PlaceOfBirth = field.NewString(table, "place_of_birth")
	f.Nationality = field.NewString(table, "nationality")
	f.CurrentAddress = field.NewString(table, "current_address")
	f.PermanentAddress = field.NewString(table, "permanent_address")
	f.NatureOfWork = field.NewString(table, "nature_of_work")
	f.SourceOfIncome = field.NewString(table, "source_of_income")
	f.Occupation = field.NewString(table, "occupation")
	f.Tokens = field.NewString(table, "tokens")
	f.BlacklistStatus = field.NewInt32(table, "blacklist_status")
	f.Issue = field.NewString(table, "issue")
	f.IssueMsg = field.NewString(table, "issue_msg")
	f.IssueFields = field.NewString(table, "issue_fields")
	f.Status = field.NewString(table, "status")
	f.Comment = field.NewString(table, "comment")
	f.Reviewer = field.NewString(table, "reviewer")
	f.ReviewTimes = field.NewInt64(table, "review_times")
	f.OcrStatus = field.NewInt32(table, "ocr_status")
	f.Ocr = field.NewString(table, "ocr")
	f.ExternalInformation = field.NewString(table, "external_information")
	f.Version = field.NewString(table, "version")

	f.fillFieldMap()

	return f
}

func (f *fbMembersKyc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMembersKyc) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 35)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["first_name"] = f.FirstName
	f.fieldMap["middle_name"] = f.MiddleName
	f.fieldMap["last_name"] = f.LastName
	f.fieldMap["birthday"] = f.Birthday
	f.fieldMap["country_code"] = f.CountryCode
	f.fieldMap["nearest_branch"] = f.NearestBranch
	f.fieldMap["id_type"] = f.IDType
	f.fieldMap["id_number"] = f.IDNumber
	f.fieldMap["gender"] = f.Gender
	f.fieldMap["attachments"] = f.Attachments
	f.fieldMap["extra_details"] = f.ExtraDetails
	f.fieldMap["place_of_birth"] = f.PlaceOfBirth
	f.fieldMap["nationality"] = f.Nationality
	f.fieldMap["current_address"] = f.CurrentAddress
	f.fieldMap["permanent_address"] = f.PermanentAddress
	f.fieldMap["nature_of_work"] = f.NatureOfWork
	f.fieldMap["source_of_income"] = f.SourceOfIncome
	f.fieldMap["occupation"] = f.Occupation
	f.fieldMap["tokens"] = f.Tokens
	f.fieldMap["blacklist_status"] = f.BlacklistStatus
	f.fieldMap["issue"] = f.Issue
	f.fieldMap["issue_msg"] = f.IssueMsg
	f.fieldMap["issue_fields"] = f.IssueFields
	f.fieldMap["status"] = f.Status
	f.fieldMap["comment"] = f.Comment
	f.fieldMap["reviewer"] = f.Reviewer
	f.fieldMap["review_times"] = f.ReviewTimes
	f.fieldMap["ocr_status"] = f.OcrStatus
	f.fieldMap["ocr"] = f.Ocr
	f.fieldMap["external_information"] = f.ExternalInformation
	f.fieldMap["version"] = f.Version
}

func (f fbMembersKyc) clone(db *gorm.DB) fbMembersKyc {
	f.fbMembersKycDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMembersKyc) replaceDB(db *gorm.DB) fbMembersKyc {
	f.fbMembersKycDo.ReplaceDB(db)
	return f
}

type fbMembersKycDo struct{ gen.DO }

type IFbMembersKycDo interface {
	gen.SubQuery
	Debug() IFbMembersKycDo
	WithContext(ctx context.Context) IFbMembersKycDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMembersKycDo
	WriteDB() IFbMembersKycDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMembersKycDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMembersKycDo
	Not(conds ...gen.Condition) IFbMembersKycDo
	Or(conds ...gen.Condition) IFbMembersKycDo
	Select(conds ...field.Expr) IFbMembersKycDo
	Where(conds ...gen.Condition) IFbMembersKycDo
	Order(conds ...field.Expr) IFbMembersKycDo
	Distinct(cols ...field.Expr) IFbMembersKycDo
	Omit(cols ...field.Expr) IFbMembersKycDo
	Join(table schema.Tabler, on ...field.Expr) IFbMembersKycDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersKycDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersKycDo
	Group(cols ...field.Expr) IFbMembersKycDo
	Having(conds ...gen.Condition) IFbMembersKycDo
	Limit(limit int) IFbMembersKycDo
	Offset(offset int) IFbMembersKycDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersKycDo
	Unscoped() IFbMembersKycDo
	Create(values ...*model.FbMembersKyc) error
	CreateInBatches(values []*model.FbMembersKyc, batchSize int) error
	Save(values ...*model.FbMembersKyc) error
	First() (*model.FbMembersKyc, error)
	Take() (*model.FbMembersKyc, error)
	Last() (*model.FbMembersKyc, error)
	Find() ([]*model.FbMembersKyc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersKyc, err error)
	FindInBatches(result *[]*model.FbMembersKyc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMembersKyc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMembersKycDo
	Assign(attrs ...field.AssignExpr) IFbMembersKycDo
	Joins(fields ...field.RelationField) IFbMembersKycDo
	Preload(fields ...field.RelationField) IFbMembersKycDo
	FirstOrInit() (*model.FbMembersKyc, error)
	FirstOrCreate() (*model.FbMembersKyc, error)
	FindByPage(offset int, limit int) (result []*model.FbMembersKyc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMembersKycDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMembersKycDo) Debug() IFbMembersKycDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMembersKycDo) WithContext(ctx context.Context) IFbMembersKycDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMembersKycDo) ReadDB() IFbMembersKycDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMembersKycDo) WriteDB() IFbMembersKycDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMembersKycDo) Session(config *gorm.Session) IFbMembersKycDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMembersKycDo) Clauses(conds ...clause.Expression) IFbMembersKycDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMembersKycDo) Returning(value interface{}, columns ...string) IFbMembersKycDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMembersKycDo) Not(conds ...gen.Condition) IFbMembersKycDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMembersKycDo) Or(conds ...gen.Condition) IFbMembersKycDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMembersKycDo) Select(conds ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMembersKycDo) Where(conds ...gen.Condition) IFbMembersKycDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMembersKycDo) Order(conds ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMembersKycDo) Distinct(cols ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMembersKycDo) Omit(cols ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMembersKycDo) Join(table schema.Tabler, on ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMembersKycDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMembersKycDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMembersKycDo) Group(cols ...field.Expr) IFbMembersKycDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMembersKycDo) Having(conds ...gen.Condition) IFbMembersKycDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMembersKycDo) Limit(limit int) IFbMembersKycDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMembersKycDo) Offset(offset int) IFbMembersKycDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMembersKycDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersKycDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMembersKycDo) Unscoped() IFbMembersKycDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMembersKycDo) Create(values ...*model.FbMembersKyc) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMembersKycDo) CreateInBatches(values []*model.FbMembersKyc, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMembersKycDo) Save(values ...*model.FbMembersKyc) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMembersKycDo) First() (*model.FbMembersKyc, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersKyc), nil
	}
}

func (f fbMembersKycDo) Take() (*model.FbMembersKyc, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersKyc), nil
	}
}

func (f fbMembersKycDo) Last() (*model.FbMembersKyc, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersKyc), nil
	}
}

func (f fbMembersKycDo) Find() ([]*model.FbMembersKyc, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMembersKyc), err
}

func (f fbMembersKycDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersKyc, err error) {
	buf := make([]*model.FbMembersKyc, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMembersKycDo) FindInBatches(result *[]*model.FbMembersKyc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMembersKycDo) Attrs(attrs ...field.AssignExpr) IFbMembersKycDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMembersKycDo) Assign(attrs ...field.AssignExpr) IFbMembersKycDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMembersKycDo) Joins(fields ...field.RelationField) IFbMembersKycDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMembersKycDo) Preload(fields ...field.RelationField) IFbMembersKycDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMembersKycDo) FirstOrInit() (*model.FbMembersKyc, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersKyc), nil
	}
}

func (f fbMembersKycDo) FirstOrCreate() (*model.FbMembersKyc, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersKyc), nil
	}
}

func (f fbMembersKycDo) FindByPage(offset int, limit int) (result []*model.FbMembersKyc, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMembersKycDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMembersKycDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMembersKycDo) Delete(models ...*model.FbMembersKyc) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMembersKycDo) withDO(do gen.Dao) *fbMembersKycDo {
	f.DO = *do.(*gen.DO)
	return f
}
