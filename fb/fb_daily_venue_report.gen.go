// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbDailyVenueReport(db *gorm.DB, opts ...gen.DOOption) fbDailyVenueReport {
	_fbDailyVenueReport := fbDailyVenueReport{}

	_fbDailyVenueReport.fbDailyVenueReportDo.UseDB(db, opts...)
	_fbDailyVenueReport.fbDailyVenueReportDo.UseModel(&model.FbDailyVenueReport{})

	tableName := _fbDailyVenueReport.fbDailyVenueReportDo.TableName()
	_fbDailyVenueReport.ALL = field.NewAsterisk(tableName)
	_fbDailyVenueReport.ID = field.NewInt64(tableName, "id")
	_fbDailyVenueReport.Day = field.NewInt32(tableName, "day")
	_fbDailyVenueReport.GameName = field.NewString(tableName, "game_name")
	_fbDailyVenueReport.GameCode = field.NewString(tableName, "game_code")
	_fbDailyVenueReport.PlatformName = field.NewString(tableName, "platform_name")
	_fbDailyVenueReport.PlatformID = field.NewString(tableName, "platform_id")
	_fbDailyVenueReport.ActvNum = field.NewInt32(tableName, "actv_num")
	_fbDailyVenueReport.VenueName = field.NewString(tableName, "venue_name")
	_fbDailyVenueReport.VenueType = field.NewInt32(tableName, "venue_type")
	_fbDailyVenueReport.TotalBillNum = field.NewInt32(tableName, "total_bill_num")
	_fbDailyVenueReport.TotalBetAmount = field.NewString(tableName, "total_bet_amount")
	_fbDailyVenueReport.AvgVetAount = field.NewString(tableName, "avg_vet_aount")
	_fbDailyVenueReport.Ggr = field.NewString(tableName, "ggr")
	_fbDailyVenueReport.KillRate = field.NewString(tableName, "kill_rate")
	_fbDailyVenueReport.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbDailyVenueReport.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbDailyVenueReport.VaildTotalBillNum = field.NewInt64(tableName, "vaild_total_bill_num")

	_fbDailyVenueReport.fillFieldMap()

	return _fbDailyVenueReport
}

// fbDailyVenueReport 场馆业绩表
type fbDailyVenueReport struct {
	fbDailyVenueReportDo

	ALL               field.Asterisk
	ID                field.Int64
	Day               field.Int32  // 数据日期
	GameName          field.String // 第三方游戏名称
	GameCode          field.String // 第三方游戏名称编码
	PlatformName      field.String // 厂商名称
	PlatformID        field.String // 厂商id
	ActvNum           field.Int32  // 活跃人数(有效)
	VenueName         field.String // 场馆名称
	VenueType         field.Int32  // 场馆类型
	TotalBillNum      field.Int32  // 总注单数
	TotalBetAmount    field.String // 总有效投注额(有效)
	AvgVetAount       field.String // 笔均注单额(有效)
	Ggr               field.String // GGR指标
	KillRate          field.String // 杀率
	UpdatedAt         field.Int64  // 更新时间
	CreatedAt         field.Int64  // 创建时间
	VaildTotalBillNum field.Int64

	fieldMap map[string]field.Expr
}

func (f fbDailyVenueReport) Table(newTableName string) *fbDailyVenueReport {
	f.fbDailyVenueReportDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbDailyVenueReport) As(alias string) *fbDailyVenueReport {
	f.fbDailyVenueReportDo.DO = *(f.fbDailyVenueReportDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbDailyVenueReport) updateTableName(table string) *fbDailyVenueReport {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.GameName = field.NewString(table, "game_name")
	f.GameCode = field.NewString(table, "game_code")
	f.PlatformName = field.NewString(table, "platform_name")
	f.PlatformID = field.NewString(table, "platform_id")
	f.ActvNum = field.NewInt32(table, "actv_num")
	f.VenueName = field.NewString(table, "venue_name")
	f.VenueType = field.NewInt32(table, "venue_type")
	f.TotalBillNum = field.NewInt32(table, "total_bill_num")
	f.TotalBetAmount = field.NewString(table, "total_bet_amount")
	f.AvgVetAount = field.NewString(table, "avg_vet_aount")
	f.Ggr = field.NewString(table, "ggr")
	f.KillRate = field.NewString(table, "kill_rate")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.VaildTotalBillNum = field.NewInt64(table, "vaild_total_bill_num")

	f.fillFieldMap()

	return f
}

func (f *fbDailyVenueReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbDailyVenueReport) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 17)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["game_name"] = f.GameName
	f.fieldMap["game_code"] = f.GameCode
	f.fieldMap["platform_name"] = f.PlatformName
	f.fieldMap["platform_id"] = f.PlatformID
	f.fieldMap["actv_num"] = f.ActvNum
	f.fieldMap["venue_name"] = f.VenueName
	f.fieldMap["venue_type"] = f.VenueType
	f.fieldMap["total_bill_num"] = f.TotalBillNum
	f.fieldMap["total_bet_amount"] = f.TotalBetAmount
	f.fieldMap["avg_vet_aount"] = f.AvgVetAount
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["kill_rate"] = f.KillRate
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["vaild_total_bill_num"] = f.VaildTotalBillNum
}

func (f fbDailyVenueReport) clone(db *gorm.DB) fbDailyVenueReport {
	f.fbDailyVenueReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbDailyVenueReport) replaceDB(db *gorm.DB) fbDailyVenueReport {
	f.fbDailyVenueReportDo.ReplaceDB(db)
	return f
}

type fbDailyVenueReportDo struct{ gen.DO }

type IFbDailyVenueReportDo interface {
	gen.SubQuery
	Debug() IFbDailyVenueReportDo
	WithContext(ctx context.Context) IFbDailyVenueReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbDailyVenueReportDo
	WriteDB() IFbDailyVenueReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbDailyVenueReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbDailyVenueReportDo
	Not(conds ...gen.Condition) IFbDailyVenueReportDo
	Or(conds ...gen.Condition) IFbDailyVenueReportDo
	Select(conds ...field.Expr) IFbDailyVenueReportDo
	Where(conds ...gen.Condition) IFbDailyVenueReportDo
	Order(conds ...field.Expr) IFbDailyVenueReportDo
	Distinct(cols ...field.Expr) IFbDailyVenueReportDo
	Omit(cols ...field.Expr) IFbDailyVenueReportDo
	Join(table schema.Tabler, on ...field.Expr) IFbDailyVenueReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyVenueReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyVenueReportDo
	Group(cols ...field.Expr) IFbDailyVenueReportDo
	Having(conds ...gen.Condition) IFbDailyVenueReportDo
	Limit(limit int) IFbDailyVenueReportDo
	Offset(offset int) IFbDailyVenueReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyVenueReportDo
	Unscoped() IFbDailyVenueReportDo
	Create(values ...*model.FbDailyVenueReport) error
	CreateInBatches(values []*model.FbDailyVenueReport, batchSize int) error
	Save(values ...*model.FbDailyVenueReport) error
	First() (*model.FbDailyVenueReport, error)
	Take() (*model.FbDailyVenueReport, error)
	Last() (*model.FbDailyVenueReport, error)
	Find() ([]*model.FbDailyVenueReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyVenueReport, err error)
	FindInBatches(result *[]*model.FbDailyVenueReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbDailyVenueReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbDailyVenueReportDo
	Assign(attrs ...field.AssignExpr) IFbDailyVenueReportDo
	Joins(fields ...field.RelationField) IFbDailyVenueReportDo
	Preload(fields ...field.RelationField) IFbDailyVenueReportDo
	FirstOrInit() (*model.FbDailyVenueReport, error)
	FirstOrCreate() (*model.FbDailyVenueReport, error)
	FindByPage(offset int, limit int) (result []*model.FbDailyVenueReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbDailyVenueReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbDailyVenueReportDo) Debug() IFbDailyVenueReportDo {
	return f.withDO(f.DO.Debug())
}

func (f fbDailyVenueReportDo) WithContext(ctx context.Context) IFbDailyVenueReportDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbDailyVenueReportDo) ReadDB() IFbDailyVenueReportDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbDailyVenueReportDo) WriteDB() IFbDailyVenueReportDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbDailyVenueReportDo) Session(config *gorm.Session) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbDailyVenueReportDo) Clauses(conds ...clause.Expression) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbDailyVenueReportDo) Returning(value interface{}, columns ...string) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbDailyVenueReportDo) Not(conds ...gen.Condition) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbDailyVenueReportDo) Or(conds ...gen.Condition) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbDailyVenueReportDo) Select(conds ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbDailyVenueReportDo) Where(conds ...gen.Condition) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbDailyVenueReportDo) Order(conds ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbDailyVenueReportDo) Distinct(cols ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbDailyVenueReportDo) Omit(cols ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbDailyVenueReportDo) Join(table schema.Tabler, on ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbDailyVenueReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbDailyVenueReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbDailyVenueReportDo) Group(cols ...field.Expr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbDailyVenueReportDo) Having(conds ...gen.Condition) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbDailyVenueReportDo) Limit(limit int) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbDailyVenueReportDo) Offset(offset int) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbDailyVenueReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbDailyVenueReportDo) Unscoped() IFbDailyVenueReportDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbDailyVenueReportDo) Create(values ...*model.FbDailyVenueReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbDailyVenueReportDo) CreateInBatches(values []*model.FbDailyVenueReport, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbDailyVenueReportDo) Save(values ...*model.FbDailyVenueReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbDailyVenueReportDo) First() (*model.FbDailyVenueReport, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyVenueReport), nil
	}
}

func (f fbDailyVenueReportDo) Take() (*model.FbDailyVenueReport, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyVenueReport), nil
	}
}

func (f fbDailyVenueReportDo) Last() (*model.FbDailyVenueReport, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyVenueReport), nil
	}
}

func (f fbDailyVenueReportDo) Find() ([]*model.FbDailyVenueReport, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbDailyVenueReport), err
}

func (f fbDailyVenueReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyVenueReport, err error) {
	buf := make([]*model.FbDailyVenueReport, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbDailyVenueReportDo) FindInBatches(result *[]*model.FbDailyVenueReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbDailyVenueReportDo) Attrs(attrs ...field.AssignExpr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbDailyVenueReportDo) Assign(attrs ...field.AssignExpr) IFbDailyVenueReportDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbDailyVenueReportDo) Joins(fields ...field.RelationField) IFbDailyVenueReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbDailyVenueReportDo) Preload(fields ...field.RelationField) IFbDailyVenueReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbDailyVenueReportDo) FirstOrInit() (*model.FbDailyVenueReport, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyVenueReport), nil
	}
}

func (f fbDailyVenueReportDo) FirstOrCreate() (*model.FbDailyVenueReport, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyVenueReport), nil
	}
}

func (f fbDailyVenueReportDo) FindByPage(offset int, limit int) (result []*model.FbDailyVenueReport, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbDailyVenueReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbDailyVenueReportDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbDailyVenueReportDo) Delete(models ...*model.FbDailyVenueReport) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbDailyVenueReportDo) withDO(do gen.Dao) *fbDailyVenueReportDo {
	f.DO = *do.(*gen.DO)
	return f
}
