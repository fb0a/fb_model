// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbGood(db *gorm.DB, opts ...gen.DOOption) fbGood {
	_fbGood := fbGood{}

	_fbGood.fbGoodDo.UseDB(db, opts...)
	_fbGood.fbGoodDo.UseModel(&model.FbGood{})

	tableName := _fbGood.fbGoodDo.TableName()
	_fbGood.ALL = field.NewAsterisk(tableName)
	_fbGood.ID = field.NewInt64(tableName, "id")
	_fbGood.Name = field.NewString(tableName, "name")
	_fbGood.NameTa = field.NewString(tableName, "name_ta")
	_fbGood.Summary = field.NewString(tableName, "summary")
	_fbGood.SummaryTa = field.NewString(tableName, "summary_ta")
	_fbGood.ProductType = field.NewInt32(tableName, "product_type")
	_fbGood.ShowImg = field.NewString(tableName, "show_img")
	_fbGood.Sort = field.NewInt32(tableName, "sort")
	_fbGood.SellStatus = field.NewInt32(tableName, "sell_status")
	_fbGood.Stock = field.NewInt32(tableName, "stock")
	_fbGood.PriceFilcoin = field.NewFloat64(tableName, "price_filcoin")
	_fbGood.DeliverMethod = field.NewInt32(tableName, "deliver_method")
	_fbGood.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbGood.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbGood.UpdatedName = field.NewString(tableName, "updated_name")
	_fbGood.UpdatedUID = field.NewInt64(tableName, "updated_uid")
	_fbGood.RechargeCardID = field.NewInt64(tableName, "recharge_card_id")

	_fbGood.fillFieldMap()

	return _fbGood
}

// fbGood 积分商城商品表
type fbGood struct {
	fbGoodDo

	ALL            field.Asterisk
	ID             field.Int64   // 商品id
	Name           field.String  // 商品名称
	NameTa         field.String  // 商品名称ta
	Summary        field.String  // 商品描述
	SummaryTa      field.String  // 商品描述ta
	ProductType    field.Int32   // 商品类型[1: 虚拟商品 2:实物商品]
	ShowImg        field.String  // 首页展示图片
	Sort           field.Int32   // 排序
	SellStatus     field.Int32   // 上下架[1:上架 2:下架]
	Stock          field.Int32   // 库存
	PriceFilcoin   field.Float64 // 商城代币价值
	DeliverMethod  field.Int32   // 帐变类型，1自动发货 2人工发货 3到店领取 4人工发货或到店领取
	CreatedAt      field.Int64   // 创建时间
	UpdatedAt      field.Int64   // 更新时间
	UpdatedName    field.String  // 更新人
	UpdatedUID     field.Int64   // 更新人uid
	RechargeCardID field.Int64   // 充值卡id

	fieldMap map[string]field.Expr
}

func (f fbGood) Table(newTableName string) *fbGood {
	f.fbGoodDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbGood) As(alias string) *fbGood {
	f.fbGoodDo.DO = *(f.fbGoodDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbGood) updateTableName(table string) *fbGood {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.NameTa = field.NewString(table, "name_ta")
	f.Summary = field.NewString(table, "summary")
	f.SummaryTa = field.NewString(table, "summary_ta")
	f.ProductType = field.NewInt32(table, "product_type")
	f.ShowImg = field.NewString(table, "show_img")
	f.Sort = field.NewInt32(table, "sort")
	f.SellStatus = field.NewInt32(table, "sell_status")
	f.Stock = field.NewInt32(table, "stock")
	f.PriceFilcoin = field.NewFloat64(table, "price_filcoin")
	f.DeliverMethod = field.NewInt32(table, "deliver_method")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")
	f.RechargeCardID = field.NewInt64(table, "recharge_card_id")

	f.fillFieldMap()

	return f
}

func (f *fbGood) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbGood) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 17)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["name_ta"] = f.NameTa
	f.fieldMap["summary"] = f.Summary
	f.fieldMap["summary_ta"] = f.SummaryTa
	f.fieldMap["product_type"] = f.ProductType
	f.fieldMap["show_img"] = f.ShowImg
	f.fieldMap["sort"] = f.Sort
	f.fieldMap["sell_status"] = f.SellStatus
	f.fieldMap["stock"] = f.Stock
	f.fieldMap["price_filcoin"] = f.PriceFilcoin
	f.fieldMap["deliver_method"] = f.DeliverMethod
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["recharge_card_id"] = f.RechargeCardID
}

func (f fbGood) clone(db *gorm.DB) fbGood {
	f.fbGoodDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbGood) replaceDB(db *gorm.DB) fbGood {
	f.fbGoodDo.ReplaceDB(db)
	return f
}

type fbGoodDo struct{ gen.DO }

type IFbGoodDo interface {
	gen.SubQuery
	Debug() IFbGoodDo
	WithContext(ctx context.Context) IFbGoodDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbGoodDo
	WriteDB() IFbGoodDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbGoodDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbGoodDo
	Not(conds ...gen.Condition) IFbGoodDo
	Or(conds ...gen.Condition) IFbGoodDo
	Select(conds ...field.Expr) IFbGoodDo
	Where(conds ...gen.Condition) IFbGoodDo
	Order(conds ...field.Expr) IFbGoodDo
	Distinct(cols ...field.Expr) IFbGoodDo
	Omit(cols ...field.Expr) IFbGoodDo
	Join(table schema.Tabler, on ...field.Expr) IFbGoodDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbGoodDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbGoodDo
	Group(cols ...field.Expr) IFbGoodDo
	Having(conds ...gen.Condition) IFbGoodDo
	Limit(limit int) IFbGoodDo
	Offset(offset int) IFbGoodDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbGoodDo
	Unscoped() IFbGoodDo
	Create(values ...*model.FbGood) error
	CreateInBatches(values []*model.FbGood, batchSize int) error
	Save(values ...*model.FbGood) error
	First() (*model.FbGood, error)
	Take() (*model.FbGood, error)
	Last() (*model.FbGood, error)
	Find() ([]*model.FbGood, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbGood, err error)
	FindInBatches(result *[]*model.FbGood, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbGood) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbGoodDo
	Assign(attrs ...field.AssignExpr) IFbGoodDo
	Joins(fields ...field.RelationField) IFbGoodDo
	Preload(fields ...field.RelationField) IFbGoodDo
	FirstOrInit() (*model.FbGood, error)
	FirstOrCreate() (*model.FbGood, error)
	FindByPage(offset int, limit int) (result []*model.FbGood, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbGoodDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbGoodDo) Debug() IFbGoodDo {
	return f.withDO(f.DO.Debug())
}

func (f fbGoodDo) WithContext(ctx context.Context) IFbGoodDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbGoodDo) ReadDB() IFbGoodDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbGoodDo) WriteDB() IFbGoodDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbGoodDo) Session(config *gorm.Session) IFbGoodDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbGoodDo) Clauses(conds ...clause.Expression) IFbGoodDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbGoodDo) Returning(value interface{}, columns ...string) IFbGoodDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbGoodDo) Not(conds ...gen.Condition) IFbGoodDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbGoodDo) Or(conds ...gen.Condition) IFbGoodDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbGoodDo) Select(conds ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbGoodDo) Where(conds ...gen.Condition) IFbGoodDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbGoodDo) Order(conds ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbGoodDo) Distinct(cols ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbGoodDo) Omit(cols ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbGoodDo) Join(table schema.Tabler, on ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbGoodDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbGoodDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbGoodDo) Group(cols ...field.Expr) IFbGoodDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbGoodDo) Having(conds ...gen.Condition) IFbGoodDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbGoodDo) Limit(limit int) IFbGoodDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbGoodDo) Offset(offset int) IFbGoodDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbGoodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbGoodDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbGoodDo) Unscoped() IFbGoodDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbGoodDo) Create(values ...*model.FbGood) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbGoodDo) CreateInBatches(values []*model.FbGood, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbGoodDo) Save(values ...*model.FbGood) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbGoodDo) First() (*model.FbGood, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGood), nil
	}
}

func (f fbGoodDo) Take() (*model.FbGood, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGood), nil
	}
}

func (f fbGoodDo) Last() (*model.FbGood, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGood), nil
	}
}

func (f fbGoodDo) Find() ([]*model.FbGood, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbGood), err
}

func (f fbGoodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbGood, err error) {
	buf := make([]*model.FbGood, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbGoodDo) FindInBatches(result *[]*model.FbGood, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbGoodDo) Attrs(attrs ...field.AssignExpr) IFbGoodDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbGoodDo) Assign(attrs ...field.AssignExpr) IFbGoodDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbGoodDo) Joins(fields ...field.RelationField) IFbGoodDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbGoodDo) Preload(fields ...field.RelationField) IFbGoodDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbGoodDo) FirstOrInit() (*model.FbGood, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGood), nil
	}
}

func (f fbGoodDo) FirstOrCreate() (*model.FbGood, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGood), nil
	}
}

func (f fbGoodDo) FindByPage(offset int, limit int) (result []*model.FbGood, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbGoodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbGoodDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbGoodDo) Delete(models ...*model.FbGood) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbGoodDo) withDO(do gen.Dao) *fbGoodDo {
	f.DO = *do.(*gen.DO)
	return f
}
