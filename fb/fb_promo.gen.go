// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPromo(db *gorm.DB, opts ...gen.DOOption) fbPromo {
	_fbPromo := fbPromo{}

	_fbPromo.fbPromoDo.UseDB(db, opts...)
	_fbPromo.fbPromoDo.UseModel(&model.FbPromo{})

	tableName := _fbPromo.fbPromoDo.TableName()
	_fbPromo.ALL = field.NewAsterisk(tableName)
	_fbPromo.ID = field.NewUint64(tableName, "id")
	_fbPromo.Title = field.NewString(tableName, "title")
	_fbPromo.Alias_ = field.NewString(tableName, "alias")

	_fbPromo.fillFieldMap()

	return _fbPromo
}

// fbPromo 活动配置表
type fbPromo struct {
	fbPromoDo

	ALL    field.Asterisk
	ID     field.Uint64
	Title  field.String // 活动多语言标题
	Alias_ field.String // 英文别名

	fieldMap map[string]field.Expr
}

func (f fbPromo) Table(newTableName string) *fbPromo {
	f.fbPromoDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPromo) As(alias string) *fbPromo {
	f.fbPromoDo.DO = *(f.fbPromoDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPromo) updateTableName(table string) *fbPromo {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint64(table, "id")
	f.Title = field.NewString(table, "title")
	f.Alias_ = field.NewString(table, "alias")

	f.fillFieldMap()

	return f
}

func (f *fbPromo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPromo) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["id"] = f.ID
	f.fieldMap["title"] = f.Title
	f.fieldMap["alias"] = f.Alias_
}

func (f fbPromo) clone(db *gorm.DB) fbPromo {
	f.fbPromoDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPromo) replaceDB(db *gorm.DB) fbPromo {
	f.fbPromoDo.ReplaceDB(db)
	return f
}

type fbPromoDo struct{ gen.DO }

type IFbPromoDo interface {
	gen.SubQuery
	Debug() IFbPromoDo
	WithContext(ctx context.Context) IFbPromoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPromoDo
	WriteDB() IFbPromoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPromoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPromoDo
	Not(conds ...gen.Condition) IFbPromoDo
	Or(conds ...gen.Condition) IFbPromoDo
	Select(conds ...field.Expr) IFbPromoDo
	Where(conds ...gen.Condition) IFbPromoDo
	Order(conds ...field.Expr) IFbPromoDo
	Distinct(cols ...field.Expr) IFbPromoDo
	Omit(cols ...field.Expr) IFbPromoDo
	Join(table schema.Tabler, on ...field.Expr) IFbPromoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoDo
	Group(cols ...field.Expr) IFbPromoDo
	Having(conds ...gen.Condition) IFbPromoDo
	Limit(limit int) IFbPromoDo
	Offset(offset int) IFbPromoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoDo
	Unscoped() IFbPromoDo
	Create(values ...*model.FbPromo) error
	CreateInBatches(values []*model.FbPromo, batchSize int) error
	Save(values ...*model.FbPromo) error
	First() (*model.FbPromo, error)
	Take() (*model.FbPromo, error)
	Last() (*model.FbPromo, error)
	Find() ([]*model.FbPromo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromo, err error)
	FindInBatches(result *[]*model.FbPromo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPromo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPromoDo
	Assign(attrs ...field.AssignExpr) IFbPromoDo
	Joins(fields ...field.RelationField) IFbPromoDo
	Preload(fields ...field.RelationField) IFbPromoDo
	FirstOrInit() (*model.FbPromo, error)
	FirstOrCreate() (*model.FbPromo, error)
	FindByPage(offset int, limit int) (result []*model.FbPromo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPromoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPromoDo) Debug() IFbPromoDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPromoDo) WithContext(ctx context.Context) IFbPromoDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPromoDo) ReadDB() IFbPromoDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPromoDo) WriteDB() IFbPromoDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPromoDo) Session(config *gorm.Session) IFbPromoDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPromoDo) Clauses(conds ...clause.Expression) IFbPromoDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPromoDo) Returning(value interface{}, columns ...string) IFbPromoDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPromoDo) Not(conds ...gen.Condition) IFbPromoDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPromoDo) Or(conds ...gen.Condition) IFbPromoDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPromoDo) Select(conds ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPromoDo) Where(conds ...gen.Condition) IFbPromoDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPromoDo) Order(conds ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPromoDo) Distinct(cols ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPromoDo) Omit(cols ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPromoDo) Join(table schema.Tabler, on ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPromoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPromoDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPromoDo) Group(cols ...field.Expr) IFbPromoDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPromoDo) Having(conds ...gen.Condition) IFbPromoDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPromoDo) Limit(limit int) IFbPromoDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPromoDo) Offset(offset int) IFbPromoDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPromoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPromoDo) Unscoped() IFbPromoDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPromoDo) Create(values ...*model.FbPromo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPromoDo) CreateInBatches(values []*model.FbPromo, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPromoDo) Save(values ...*model.FbPromo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPromoDo) First() (*model.FbPromo, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromo), nil
	}
}

func (f fbPromoDo) Take() (*model.FbPromo, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromo), nil
	}
}

func (f fbPromoDo) Last() (*model.FbPromo, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromo), nil
	}
}

func (f fbPromoDo) Find() ([]*model.FbPromo, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPromo), err
}

func (f fbPromoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromo, err error) {
	buf := make([]*model.FbPromo, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPromoDo) FindInBatches(result *[]*model.FbPromo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPromoDo) Attrs(attrs ...field.AssignExpr) IFbPromoDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPromoDo) Assign(attrs ...field.AssignExpr) IFbPromoDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPromoDo) Joins(fields ...field.RelationField) IFbPromoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPromoDo) Preload(fields ...field.RelationField) IFbPromoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPromoDo) FirstOrInit() (*model.FbPromo, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromo), nil
	}
}

func (f fbPromoDo) FirstOrCreate() (*model.FbPromo, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromo), nil
	}
}

func (f fbPromoDo) FindByPage(offset int, limit int) (result []*model.FbPromo, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPromoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPromoDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPromoDo) Delete(models ...*model.FbPromo) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPromoDo) withDO(do gen.Dao) *fbPromoDo {
	f.DO = *do.(*gen.DO)
	return f
}
