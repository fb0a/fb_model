// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPromoBlindboxBet(db *gorm.DB, opts ...gen.DOOption) fbPromoBlindboxBet {
	_fbPromoBlindboxBet := fbPromoBlindboxBet{}

	_fbPromoBlindboxBet.fbPromoBlindboxBetDo.UseDB(db, opts...)
	_fbPromoBlindboxBet.fbPromoBlindboxBetDo.UseModel(&model.FbPromoBlindboxBet{})

	tableName := _fbPromoBlindboxBet.fbPromoBlindboxBetDo.TableName()
	_fbPromoBlindboxBet.ALL = field.NewAsterisk(tableName)
	_fbPromoBlindboxBet.BillNoHash = field.NewInt64(tableName, "bill_no_hash")
	_fbPromoBlindboxBet.BillNo = field.NewString(tableName, "bill_no")
	_fbPromoBlindboxBet.PlatformID = field.NewString(tableName, "platform_id")
	_fbPromoBlindboxBet.PlatformName = field.NewString(tableName, "platform_name")
	_fbPromoBlindboxBet.UID = field.NewString(tableName, "uid")
	_fbPromoBlindboxBet.Username = field.NewString(tableName, "username")
	_fbPromoBlindboxBet.Phone = field.NewString(tableName, "phone")
	_fbPromoBlindboxBet.ParentUID = field.NewString(tableName, "parent_uid")
	_fbPromoBlindboxBet.ParentName = field.NewString(tableName, "parent_name")
	_fbPromoBlindboxBet.GameClass = field.NewString(tableName, "game_class")
	_fbPromoBlindboxBet.GameName = field.NewString(tableName, "game_name")
	_fbPromoBlindboxBet.GameCode = field.NewString(tableName, "game_code")
	_fbPromoBlindboxBet.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_fbPromoBlindboxBet.BetTime = field.NewInt64(tableName, "bet_time")
	_fbPromoBlindboxBet.State = field.NewInt32(tableName, "state")

	_fbPromoBlindboxBet.fillFieldMap()

	return _fbPromoBlindboxBet
}

// fbPromoBlindboxBet 盲盒注单记录
type fbPromoBlindboxBet struct {
	fbPromoBlindboxBetDo

	ALL            field.Asterisk
	BillNoHash     field.Int64   // 注单号hash
	BillNo         field.String  // 平台唯一注单流水号
	PlatformID     field.String  // 接口平台 如 AG MG
	PlatformName   field.String  // 平台名称
	UID            field.String  // 用户ID
	Username       field.String  // 玩家账号
	Phone          field.String  // 手机号
	ParentUID      field.String  // 上级uid
	ParentName     field.String  // 上级代理
	GameClass      field.String  // 游戏类型
	GameName       field.String  // 第三方游戏名称
	GameCode       field.String  // 第三方游戏名称编码
	ValidBetAmount field.Float64 // 有效投注金额(钱包币种)
	BetTime        field.Int64   // 投注时间
	State          field.Int32   // 结算状态 0:下注确认(未结算) 1:已结算 2:会员取消 3:无效

	fieldMap map[string]field.Expr
}

func (f fbPromoBlindboxBet) Table(newTableName string) *fbPromoBlindboxBet {
	f.fbPromoBlindboxBetDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPromoBlindboxBet) As(alias string) *fbPromoBlindboxBet {
	f.fbPromoBlindboxBetDo.DO = *(f.fbPromoBlindboxBetDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPromoBlindboxBet) updateTableName(table string) *fbPromoBlindboxBet {
	f.ALL = field.NewAsterisk(table)
	f.BillNoHash = field.NewInt64(table, "bill_no_hash")
	f.BillNo = field.NewString(table, "bill_no")
	f.PlatformID = field.NewString(table, "platform_id")
	f.PlatformName = field.NewString(table, "platform_name")
	f.UID = field.NewString(table, "uid")
	f.Username = field.NewString(table, "username")
	f.Phone = field.NewString(table, "phone")
	f.ParentUID = field.NewString(table, "parent_uid")
	f.ParentName = field.NewString(table, "parent_name")
	f.GameClass = field.NewString(table, "game_class")
	f.GameName = field.NewString(table, "game_name")
	f.GameCode = field.NewString(table, "game_code")
	f.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	f.BetTime = field.NewInt64(table, "bet_time")
	f.State = field.NewInt32(table, "state")

	f.fillFieldMap()

	return f
}

func (f *fbPromoBlindboxBet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPromoBlindboxBet) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["bill_no_hash"] = f.BillNoHash
	f.fieldMap["bill_no"] = f.BillNo
	f.fieldMap["platform_id"] = f.PlatformID
	f.fieldMap["platform_name"] = f.PlatformName
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["parent_uid"] = f.ParentUID
	f.fieldMap["parent_name"] = f.ParentName
	f.fieldMap["game_class"] = f.GameClass
	f.fieldMap["game_name"] = f.GameName
	f.fieldMap["game_code"] = f.GameCode
	f.fieldMap["valid_bet_amount"] = f.ValidBetAmount
	f.fieldMap["bet_time"] = f.BetTime
	f.fieldMap["state"] = f.State
}

func (f fbPromoBlindboxBet) clone(db *gorm.DB) fbPromoBlindboxBet {
	f.fbPromoBlindboxBetDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPromoBlindboxBet) replaceDB(db *gorm.DB) fbPromoBlindboxBet {
	f.fbPromoBlindboxBetDo.ReplaceDB(db)
	return f
}

type fbPromoBlindboxBetDo struct{ gen.DO }

type IFbPromoBlindboxBetDo interface {
	gen.SubQuery
	Debug() IFbPromoBlindboxBetDo
	WithContext(ctx context.Context) IFbPromoBlindboxBetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPromoBlindboxBetDo
	WriteDB() IFbPromoBlindboxBetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPromoBlindboxBetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPromoBlindboxBetDo
	Not(conds ...gen.Condition) IFbPromoBlindboxBetDo
	Or(conds ...gen.Condition) IFbPromoBlindboxBetDo
	Select(conds ...field.Expr) IFbPromoBlindboxBetDo
	Where(conds ...gen.Condition) IFbPromoBlindboxBetDo
	Order(conds ...field.Expr) IFbPromoBlindboxBetDo
	Distinct(cols ...field.Expr) IFbPromoBlindboxBetDo
	Omit(cols ...field.Expr) IFbPromoBlindboxBetDo
	Join(table schema.Tabler, on ...field.Expr) IFbPromoBlindboxBetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoBlindboxBetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoBlindboxBetDo
	Group(cols ...field.Expr) IFbPromoBlindboxBetDo
	Having(conds ...gen.Condition) IFbPromoBlindboxBetDo
	Limit(limit int) IFbPromoBlindboxBetDo
	Offset(offset int) IFbPromoBlindboxBetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoBlindboxBetDo
	Unscoped() IFbPromoBlindboxBetDo
	Create(values ...*model.FbPromoBlindboxBet) error
	CreateInBatches(values []*model.FbPromoBlindboxBet, batchSize int) error
	Save(values ...*model.FbPromoBlindboxBet) error
	First() (*model.FbPromoBlindboxBet, error)
	Take() (*model.FbPromoBlindboxBet, error)
	Last() (*model.FbPromoBlindboxBet, error)
	Find() ([]*model.FbPromoBlindboxBet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoBlindboxBet, err error)
	FindInBatches(result *[]*model.FbPromoBlindboxBet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPromoBlindboxBet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPromoBlindboxBetDo
	Assign(attrs ...field.AssignExpr) IFbPromoBlindboxBetDo
	Joins(fields ...field.RelationField) IFbPromoBlindboxBetDo
	Preload(fields ...field.RelationField) IFbPromoBlindboxBetDo
	FirstOrInit() (*model.FbPromoBlindboxBet, error)
	FirstOrCreate() (*model.FbPromoBlindboxBet, error)
	FindByPage(offset int, limit int) (result []*model.FbPromoBlindboxBet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPromoBlindboxBetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPromoBlindboxBetDo) Debug() IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPromoBlindboxBetDo) WithContext(ctx context.Context) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPromoBlindboxBetDo) ReadDB() IFbPromoBlindboxBetDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPromoBlindboxBetDo) WriteDB() IFbPromoBlindboxBetDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPromoBlindboxBetDo) Session(config *gorm.Session) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPromoBlindboxBetDo) Clauses(conds ...clause.Expression) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPromoBlindboxBetDo) Returning(value interface{}, columns ...string) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPromoBlindboxBetDo) Not(conds ...gen.Condition) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPromoBlindboxBetDo) Or(conds ...gen.Condition) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPromoBlindboxBetDo) Select(conds ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPromoBlindboxBetDo) Where(conds ...gen.Condition) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPromoBlindboxBetDo) Order(conds ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPromoBlindboxBetDo) Distinct(cols ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPromoBlindboxBetDo) Omit(cols ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPromoBlindboxBetDo) Join(table schema.Tabler, on ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPromoBlindboxBetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPromoBlindboxBetDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPromoBlindboxBetDo) Group(cols ...field.Expr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPromoBlindboxBetDo) Having(conds ...gen.Condition) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPromoBlindboxBetDo) Limit(limit int) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPromoBlindboxBetDo) Offset(offset int) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPromoBlindboxBetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPromoBlindboxBetDo) Unscoped() IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPromoBlindboxBetDo) Create(values ...*model.FbPromoBlindboxBet) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPromoBlindboxBetDo) CreateInBatches(values []*model.FbPromoBlindboxBet, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPromoBlindboxBetDo) Save(values ...*model.FbPromoBlindboxBet) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPromoBlindboxBetDo) First() (*model.FbPromoBlindboxBet, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBlindboxBet), nil
	}
}

func (f fbPromoBlindboxBetDo) Take() (*model.FbPromoBlindboxBet, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBlindboxBet), nil
	}
}

func (f fbPromoBlindboxBetDo) Last() (*model.FbPromoBlindboxBet, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBlindboxBet), nil
	}
}

func (f fbPromoBlindboxBetDo) Find() ([]*model.FbPromoBlindboxBet, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPromoBlindboxBet), err
}

func (f fbPromoBlindboxBetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoBlindboxBet, err error) {
	buf := make([]*model.FbPromoBlindboxBet, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPromoBlindboxBetDo) FindInBatches(result *[]*model.FbPromoBlindboxBet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPromoBlindboxBetDo) Attrs(attrs ...field.AssignExpr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPromoBlindboxBetDo) Assign(attrs ...field.AssignExpr) IFbPromoBlindboxBetDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPromoBlindboxBetDo) Joins(fields ...field.RelationField) IFbPromoBlindboxBetDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPromoBlindboxBetDo) Preload(fields ...field.RelationField) IFbPromoBlindboxBetDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPromoBlindboxBetDo) FirstOrInit() (*model.FbPromoBlindboxBet, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBlindboxBet), nil
	}
}

func (f fbPromoBlindboxBetDo) FirstOrCreate() (*model.FbPromoBlindboxBet, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBlindboxBet), nil
	}
}

func (f fbPromoBlindboxBetDo) FindByPage(offset int, limit int) (result []*model.FbPromoBlindboxBet, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPromoBlindboxBetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPromoBlindboxBetDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPromoBlindboxBetDo) Delete(models ...*model.FbPromoBlindboxBet) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPromoBlindboxBetDo) withDO(do gen.Dao) *fbPromoBlindboxBetDo {
	f.DO = *do.(*gen.DO)
	return f
}
