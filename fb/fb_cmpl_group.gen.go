// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbCmplGroup(db *gorm.DB, opts ...gen.DOOption) fbCmplGroup {
	_fbCmplGroup := fbCmplGroup{}

	_fbCmplGroup.fbCmplGroupDo.UseDB(db, opts...)
	_fbCmplGroup.fbCmplGroupDo.UseModel(&model.FbCmplGroup{})

	tableName := _fbCmplGroup.fbCmplGroupDo.TableName()
	_fbCmplGroup.ALL = field.NewAsterisk(tableName)
	_fbCmplGroup.Gid = field.NewInt64(tableName, "gid")
	_fbCmplGroup.Name = field.NewString(tableName, "name")
	_fbCmplGroup.Permission = field.NewString(tableName, "permission")
	_fbCmplGroup.Noted = field.NewString(tableName, "noted")
	_fbCmplGroup.CreateAt = field.NewInt32(tableName, "create_at")
	_fbCmplGroup.Pid = field.NewInt64(tableName, "pid")
	_fbCmplGroup.Pname = field.NewString(tableName, "pname")
	_fbCmplGroup.State = field.NewInt32(tableName, "state")
	_fbCmplGroup.Cmpl = field.NewInt32(tableName, "cmpl")
	_fbCmplGroup.Sortlevel = field.NewString(tableName, "sortlevel")
	_fbCmplGroup.Total = field.NewInt32(tableName, "total")
	_fbCmplGroup.UpdateAt = field.NewInt32(tableName, "update_at")
	_fbCmplGroup.UpdateName = field.NewString(tableName, "update_name")

	_fbCmplGroup.fillFieldMap()

	return _fbCmplGroup
}

// fbCmplGroup 合规后台用户分组表
type fbCmplGroup struct {
	fbCmplGroupDo

	ALL        field.Asterisk
	Gid        field.Int64
	Name       field.String // 组名
	Permission field.String // 权限模块ID
	Noted      field.String // 备注信息
	CreateAt   field.Int32  // 创建时间
	Pid        field.Int64  // 父节点
	Pname      field.String // 上级分组名
	State      field.Int32  // 1:开启2:关闭3:删除
	Cmpl       field.Int32  // 1 合规后台 2管理后台
	Sortlevel  field.String
	Total      field.Int32
	UpdateAt   field.Int32  // 修改时间
	UpdateName field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f fbCmplGroup) Table(newTableName string) *fbCmplGroup {
	f.fbCmplGroupDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbCmplGroup) As(alias string) *fbCmplGroup {
	f.fbCmplGroupDo.DO = *(f.fbCmplGroupDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbCmplGroup) updateTableName(table string) *fbCmplGroup {
	f.ALL = field.NewAsterisk(table)
	f.Gid = field.NewInt64(table, "gid")
	f.Name = field.NewString(table, "name")
	f.Permission = field.NewString(table, "permission")
	f.Noted = field.NewString(table, "noted")
	f.CreateAt = field.NewInt32(table, "create_at")
	f.Pid = field.NewInt64(table, "pid")
	f.Pname = field.NewString(table, "pname")
	f.State = field.NewInt32(table, "state")
	f.Cmpl = field.NewInt32(table, "cmpl")
	f.Sortlevel = field.NewString(table, "sortlevel")
	f.Total = field.NewInt32(table, "total")
	f.UpdateAt = field.NewInt32(table, "update_at")
	f.UpdateName = field.NewString(table, "update_name")

	f.fillFieldMap()

	return f
}

func (f *fbCmplGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbCmplGroup) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 13)
	f.fieldMap["gid"] = f.Gid
	f.fieldMap["name"] = f.Name
	f.fieldMap["permission"] = f.Permission
	f.fieldMap["noted"] = f.Noted
	f.fieldMap["create_at"] = f.CreateAt
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["pname"] = f.Pname
	f.fieldMap["state"] = f.State
	f.fieldMap["cmpl"] = f.Cmpl
	f.fieldMap["sortlevel"] = f.Sortlevel
	f.fieldMap["total"] = f.Total
	f.fieldMap["update_at"] = f.UpdateAt
	f.fieldMap["update_name"] = f.UpdateName
}

func (f fbCmplGroup) clone(db *gorm.DB) fbCmplGroup {
	f.fbCmplGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbCmplGroup) replaceDB(db *gorm.DB) fbCmplGroup {
	f.fbCmplGroupDo.ReplaceDB(db)
	return f
}

type fbCmplGroupDo struct{ gen.DO }

type IFbCmplGroupDo interface {
	gen.SubQuery
	Debug() IFbCmplGroupDo
	WithContext(ctx context.Context) IFbCmplGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbCmplGroupDo
	WriteDB() IFbCmplGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbCmplGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbCmplGroupDo
	Not(conds ...gen.Condition) IFbCmplGroupDo
	Or(conds ...gen.Condition) IFbCmplGroupDo
	Select(conds ...field.Expr) IFbCmplGroupDo
	Where(conds ...gen.Condition) IFbCmplGroupDo
	Order(conds ...field.Expr) IFbCmplGroupDo
	Distinct(cols ...field.Expr) IFbCmplGroupDo
	Omit(cols ...field.Expr) IFbCmplGroupDo
	Join(table schema.Tabler, on ...field.Expr) IFbCmplGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbCmplGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbCmplGroupDo
	Group(cols ...field.Expr) IFbCmplGroupDo
	Having(conds ...gen.Condition) IFbCmplGroupDo
	Limit(limit int) IFbCmplGroupDo
	Offset(offset int) IFbCmplGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbCmplGroupDo
	Unscoped() IFbCmplGroupDo
	Create(values ...*model.FbCmplGroup) error
	CreateInBatches(values []*model.FbCmplGroup, batchSize int) error
	Save(values ...*model.FbCmplGroup) error
	First() (*model.FbCmplGroup, error)
	Take() (*model.FbCmplGroup, error)
	Last() (*model.FbCmplGroup, error)
	Find() ([]*model.FbCmplGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbCmplGroup, err error)
	FindInBatches(result *[]*model.FbCmplGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbCmplGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbCmplGroupDo
	Assign(attrs ...field.AssignExpr) IFbCmplGroupDo
	Joins(fields ...field.RelationField) IFbCmplGroupDo
	Preload(fields ...field.RelationField) IFbCmplGroupDo
	FirstOrInit() (*model.FbCmplGroup, error)
	FirstOrCreate() (*model.FbCmplGroup, error)
	FindByPage(offset int, limit int) (result []*model.FbCmplGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbCmplGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbCmplGroupDo) Debug() IFbCmplGroupDo {
	return f.withDO(f.DO.Debug())
}

func (f fbCmplGroupDo) WithContext(ctx context.Context) IFbCmplGroupDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbCmplGroupDo) ReadDB() IFbCmplGroupDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbCmplGroupDo) WriteDB() IFbCmplGroupDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbCmplGroupDo) Session(config *gorm.Session) IFbCmplGroupDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbCmplGroupDo) Clauses(conds ...clause.Expression) IFbCmplGroupDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbCmplGroupDo) Returning(value interface{}, columns ...string) IFbCmplGroupDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbCmplGroupDo) Not(conds ...gen.Condition) IFbCmplGroupDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbCmplGroupDo) Or(conds ...gen.Condition) IFbCmplGroupDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbCmplGroupDo) Select(conds ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbCmplGroupDo) Where(conds ...gen.Condition) IFbCmplGroupDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbCmplGroupDo) Order(conds ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbCmplGroupDo) Distinct(cols ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbCmplGroupDo) Omit(cols ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbCmplGroupDo) Join(table schema.Tabler, on ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbCmplGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbCmplGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbCmplGroupDo) Group(cols ...field.Expr) IFbCmplGroupDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbCmplGroupDo) Having(conds ...gen.Condition) IFbCmplGroupDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbCmplGroupDo) Limit(limit int) IFbCmplGroupDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbCmplGroupDo) Offset(offset int) IFbCmplGroupDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbCmplGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbCmplGroupDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbCmplGroupDo) Unscoped() IFbCmplGroupDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbCmplGroupDo) Create(values ...*model.FbCmplGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbCmplGroupDo) CreateInBatches(values []*model.FbCmplGroup, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbCmplGroupDo) Save(values ...*model.FbCmplGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbCmplGroupDo) First() (*model.FbCmplGroup, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplGroup), nil
	}
}

func (f fbCmplGroupDo) Take() (*model.FbCmplGroup, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplGroup), nil
	}
}

func (f fbCmplGroupDo) Last() (*model.FbCmplGroup, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplGroup), nil
	}
}

func (f fbCmplGroupDo) Find() ([]*model.FbCmplGroup, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbCmplGroup), err
}

func (f fbCmplGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbCmplGroup, err error) {
	buf := make([]*model.FbCmplGroup, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbCmplGroupDo) FindInBatches(result *[]*model.FbCmplGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbCmplGroupDo) Attrs(attrs ...field.AssignExpr) IFbCmplGroupDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbCmplGroupDo) Assign(attrs ...field.AssignExpr) IFbCmplGroupDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbCmplGroupDo) Joins(fields ...field.RelationField) IFbCmplGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbCmplGroupDo) Preload(fields ...field.RelationField) IFbCmplGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbCmplGroupDo) FirstOrInit() (*model.FbCmplGroup, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplGroup), nil
	}
}

func (f fbCmplGroupDo) FirstOrCreate() (*model.FbCmplGroup, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplGroup), nil
	}
}

func (f fbCmplGroupDo) FindByPage(offset int, limit int) (result []*model.FbCmplGroup, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbCmplGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbCmplGroupDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbCmplGroupDo) Delete(models ...*model.FbCmplGroup) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbCmplGroupDo) withDO(do gen.Dao) *fbCmplGroupDo {
	f.DO = *do.(*gen.DO)
	return f
}
