// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbDomain(db *gorm.DB, opts ...gen.DOOption) fbDomain {
	_fbDomain := fbDomain{}

	_fbDomain.fbDomainDo.UseDB(db, opts...)
	_fbDomain.fbDomainDo.UseModel(&model.FbDomain{})

	tableName := _fbDomain.fbDomainDo.TableName()
	_fbDomain.ALL = field.NewAsterisk(tableName)
	_fbDomain.DomainID = field.NewInt64(tableName, "domain_id")
	_fbDomain.Domain = field.NewString(tableName, "domain")
	_fbDomain.Desc = field.NewString(tableName, "desc")
	_fbDomain.State = field.NewBool(tableName, "state")
	_fbDomain.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbDomain.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbDomain.UpdatedUID = field.NewString(tableName, "updated_uid")
	_fbDomain.UpdatedName = field.NewString(tableName, "updated_name")

	_fbDomain.fillFieldMap()

	return _fbDomain
}

// fbDomain 域名配置表
type fbDomain struct {
	fbDomainDo

	ALL         field.Asterisk
	DomainID    field.Int64  // 域名ID
	Domain      field.String // 域名URL
	Desc        field.String // 域名描述
	State       field.Bool   // 状态 1启用 2禁用
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64  // 修改时间
	UpdatedUID  field.String // 修改人ID
	UpdatedName field.String // 修改人

	fieldMap map[string]field.Expr
}

func (f fbDomain) Table(newTableName string) *fbDomain {
	f.fbDomainDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbDomain) As(alias string) *fbDomain {
	f.fbDomainDo.DO = *(f.fbDomainDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbDomain) updateTableName(table string) *fbDomain {
	f.ALL = field.NewAsterisk(table)
	f.DomainID = field.NewInt64(table, "domain_id")
	f.Domain = field.NewString(table, "domain")
	f.Desc = field.NewString(table, "desc")
	f.State = field.NewBool(table, "state")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedUID = field.NewString(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")

	f.fillFieldMap()

	return f
}

func (f *fbDomain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbDomain) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["domain_id"] = f.DomainID
	f.fieldMap["domain"] = f.Domain
	f.fieldMap["desc"] = f.Desc
	f.fieldMap["state"] = f.State
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
}

func (f fbDomain) clone(db *gorm.DB) fbDomain {
	f.fbDomainDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbDomain) replaceDB(db *gorm.DB) fbDomain {
	f.fbDomainDo.ReplaceDB(db)
	return f
}

type fbDomainDo struct{ gen.DO }

type IFbDomainDo interface {
	gen.SubQuery
	Debug() IFbDomainDo
	WithContext(ctx context.Context) IFbDomainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbDomainDo
	WriteDB() IFbDomainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbDomainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbDomainDo
	Not(conds ...gen.Condition) IFbDomainDo
	Or(conds ...gen.Condition) IFbDomainDo
	Select(conds ...field.Expr) IFbDomainDo
	Where(conds ...gen.Condition) IFbDomainDo
	Order(conds ...field.Expr) IFbDomainDo
	Distinct(cols ...field.Expr) IFbDomainDo
	Omit(cols ...field.Expr) IFbDomainDo
	Join(table schema.Tabler, on ...field.Expr) IFbDomainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbDomainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbDomainDo
	Group(cols ...field.Expr) IFbDomainDo
	Having(conds ...gen.Condition) IFbDomainDo
	Limit(limit int) IFbDomainDo
	Offset(offset int) IFbDomainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDomainDo
	Unscoped() IFbDomainDo
	Create(values ...*model.FbDomain) error
	CreateInBatches(values []*model.FbDomain, batchSize int) error
	Save(values ...*model.FbDomain) error
	First() (*model.FbDomain, error)
	Take() (*model.FbDomain, error)
	Last() (*model.FbDomain, error)
	Find() ([]*model.FbDomain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDomain, err error)
	FindInBatches(result *[]*model.FbDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbDomain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbDomainDo
	Assign(attrs ...field.AssignExpr) IFbDomainDo
	Joins(fields ...field.RelationField) IFbDomainDo
	Preload(fields ...field.RelationField) IFbDomainDo
	FirstOrInit() (*model.FbDomain, error)
	FirstOrCreate() (*model.FbDomain, error)
	FindByPage(offset int, limit int) (result []*model.FbDomain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbDomainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbDomainDo) Debug() IFbDomainDo {
	return f.withDO(f.DO.Debug())
}

func (f fbDomainDo) WithContext(ctx context.Context) IFbDomainDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbDomainDo) ReadDB() IFbDomainDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbDomainDo) WriteDB() IFbDomainDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbDomainDo) Session(config *gorm.Session) IFbDomainDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbDomainDo) Clauses(conds ...clause.Expression) IFbDomainDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbDomainDo) Returning(value interface{}, columns ...string) IFbDomainDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbDomainDo) Not(conds ...gen.Condition) IFbDomainDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbDomainDo) Or(conds ...gen.Condition) IFbDomainDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbDomainDo) Select(conds ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbDomainDo) Where(conds ...gen.Condition) IFbDomainDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbDomainDo) Order(conds ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbDomainDo) Distinct(cols ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbDomainDo) Omit(cols ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbDomainDo) Join(table schema.Tabler, on ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbDomainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbDomainDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbDomainDo) Group(cols ...field.Expr) IFbDomainDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbDomainDo) Having(conds ...gen.Condition) IFbDomainDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbDomainDo) Limit(limit int) IFbDomainDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbDomainDo) Offset(offset int) IFbDomainDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbDomainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDomainDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbDomainDo) Unscoped() IFbDomainDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbDomainDo) Create(values ...*model.FbDomain) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbDomainDo) CreateInBatches(values []*model.FbDomain, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbDomainDo) Save(values ...*model.FbDomain) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbDomainDo) First() (*model.FbDomain, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDomain), nil
	}
}

func (f fbDomainDo) Take() (*model.FbDomain, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDomain), nil
	}
}

func (f fbDomainDo) Last() (*model.FbDomain, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDomain), nil
	}
}

func (f fbDomainDo) Find() ([]*model.FbDomain, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbDomain), err
}

func (f fbDomainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDomain, err error) {
	buf := make([]*model.FbDomain, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbDomainDo) FindInBatches(result *[]*model.FbDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbDomainDo) Attrs(attrs ...field.AssignExpr) IFbDomainDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbDomainDo) Assign(attrs ...field.AssignExpr) IFbDomainDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbDomainDo) Joins(fields ...field.RelationField) IFbDomainDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbDomainDo) Preload(fields ...field.RelationField) IFbDomainDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbDomainDo) FirstOrInit() (*model.FbDomain, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDomain), nil
	}
}

func (f fbDomainDo) FirstOrCreate() (*model.FbDomain, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDomain), nil
	}
}

func (f fbDomainDo) FindByPage(offset int, limit int) (result []*model.FbDomain, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbDomainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbDomainDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbDomainDo) Delete(models ...*model.FbDomain) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbDomainDo) withDO(do gen.Dao) *fbDomainDo {
	f.DO = *do.(*gen.DO)
	return f
}
