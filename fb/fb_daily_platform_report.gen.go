// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbDailyPlatformReport(db *gorm.DB, opts ...gen.DOOption) fbDailyPlatformReport {
	_fbDailyPlatformReport := fbDailyPlatformReport{}

	_fbDailyPlatformReport.fbDailyPlatformReportDo.UseDB(db, opts...)
	_fbDailyPlatformReport.fbDailyPlatformReportDo.UseModel(&model.FbDailyPlatformReport{})

	tableName := _fbDailyPlatformReport.fbDailyPlatformReportDo.TableName()
	_fbDailyPlatformReport.ALL = field.NewAsterisk(tableName)
	_fbDailyPlatformReport.ID = field.NewInt64(tableName, "id")
	_fbDailyPlatformReport.Day = field.NewInt32(tableName, "day")
	_fbDailyPlatformReport.ActvNum = field.NewInt32(tableName, "actv_num")
	_fbDailyPlatformReport.TotalBillNum = field.NewInt32(tableName, "total_bill_num")
	_fbDailyPlatformReport.PlatformName = field.NewString(tableName, "platform_name")
	_fbDailyPlatformReport.PlatformID = field.NewString(tableName, "platform_id")
	_fbDailyPlatformReport.TotalBetAmount = field.NewString(tableName, "total_bet_amount")
	_fbDailyPlatformReport.AvgVetAount = field.NewString(tableName, "avg_vet_aount")
	_fbDailyPlatformReport.Ggr = field.NewString(tableName, "ggr")
	_fbDailyPlatformReport.KillRate = field.NewString(tableName, "kill_rate")
	_fbDailyPlatformReport.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbDailyPlatformReport.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbDailyPlatformReport.PayableAmount = field.NewString(tableName, "payable_amount")

	_fbDailyPlatformReport.fillFieldMap()

	return _fbDailyPlatformReport
}

// fbDailyPlatformReport 厂商业绩表
type fbDailyPlatformReport struct {
	fbDailyPlatformReportDo

	ALL            field.Asterisk
	ID             field.Int64
	Day            field.Int32  // 数据日期
	ActvNum        field.Int32  // 活跃人数(有效)
	TotalBillNum   field.Int32  // 总注单数
	PlatformName   field.String // 厂商名称
	PlatformID     field.String // 厂商id
	TotalBetAmount field.String // 总有效投注额(有效)
	AvgVetAount    field.String // 笔均注单额(有效)
	Ggr            field.String // GGR指标
	KillRate       field.String // 杀率
	UpdatedAt      field.Int64  // 更新时间
	CreatedAt      field.Int64  // 创建时间
	PayableAmount  field.String

	fieldMap map[string]field.Expr
}

func (f fbDailyPlatformReport) Table(newTableName string) *fbDailyPlatformReport {
	f.fbDailyPlatformReportDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbDailyPlatformReport) As(alias string) *fbDailyPlatformReport {
	f.fbDailyPlatformReportDo.DO = *(f.fbDailyPlatformReportDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbDailyPlatformReport) updateTableName(table string) *fbDailyPlatformReport {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.ActvNum = field.NewInt32(table, "actv_num")
	f.TotalBillNum = field.NewInt32(table, "total_bill_num")
	f.PlatformName = field.NewString(table, "platform_name")
	f.PlatformID = field.NewString(table, "platform_id")
	f.TotalBetAmount = field.NewString(table, "total_bet_amount")
	f.AvgVetAount = field.NewString(table, "avg_vet_aount")
	f.Ggr = field.NewString(table, "ggr")
	f.KillRate = field.NewString(table, "kill_rate")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.PayableAmount = field.NewString(table, "payable_amount")

	f.fillFieldMap()

	return f
}

func (f *fbDailyPlatformReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbDailyPlatformReport) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 13)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["actv_num"] = f.ActvNum
	f.fieldMap["total_bill_num"] = f.TotalBillNum
	f.fieldMap["platform_name"] = f.PlatformName
	f.fieldMap["platform_id"] = f.PlatformID
	f.fieldMap["total_bet_amount"] = f.TotalBetAmount
	f.fieldMap["avg_vet_aount"] = f.AvgVetAount
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["kill_rate"] = f.KillRate
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["payable_amount"] = f.PayableAmount
}

func (f fbDailyPlatformReport) clone(db *gorm.DB) fbDailyPlatformReport {
	f.fbDailyPlatformReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbDailyPlatformReport) replaceDB(db *gorm.DB) fbDailyPlatformReport {
	f.fbDailyPlatformReportDo.ReplaceDB(db)
	return f
}

type fbDailyPlatformReportDo struct{ gen.DO }

type IFbDailyPlatformReportDo interface {
	gen.SubQuery
	Debug() IFbDailyPlatformReportDo
	WithContext(ctx context.Context) IFbDailyPlatformReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbDailyPlatformReportDo
	WriteDB() IFbDailyPlatformReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbDailyPlatformReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbDailyPlatformReportDo
	Not(conds ...gen.Condition) IFbDailyPlatformReportDo
	Or(conds ...gen.Condition) IFbDailyPlatformReportDo
	Select(conds ...field.Expr) IFbDailyPlatformReportDo
	Where(conds ...gen.Condition) IFbDailyPlatformReportDo
	Order(conds ...field.Expr) IFbDailyPlatformReportDo
	Distinct(cols ...field.Expr) IFbDailyPlatformReportDo
	Omit(cols ...field.Expr) IFbDailyPlatformReportDo
	Join(table schema.Tabler, on ...field.Expr) IFbDailyPlatformReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformReportDo
	Group(cols ...field.Expr) IFbDailyPlatformReportDo
	Having(conds ...gen.Condition) IFbDailyPlatformReportDo
	Limit(limit int) IFbDailyPlatformReportDo
	Offset(offset int) IFbDailyPlatformReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyPlatformReportDo
	Unscoped() IFbDailyPlatformReportDo
	Create(values ...*model.FbDailyPlatformReport) error
	CreateInBatches(values []*model.FbDailyPlatformReport, batchSize int) error
	Save(values ...*model.FbDailyPlatformReport) error
	First() (*model.FbDailyPlatformReport, error)
	Take() (*model.FbDailyPlatformReport, error)
	Last() (*model.FbDailyPlatformReport, error)
	Find() ([]*model.FbDailyPlatformReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyPlatformReport, err error)
	FindInBatches(result *[]*model.FbDailyPlatformReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbDailyPlatformReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbDailyPlatformReportDo
	Assign(attrs ...field.AssignExpr) IFbDailyPlatformReportDo
	Joins(fields ...field.RelationField) IFbDailyPlatformReportDo
	Preload(fields ...field.RelationField) IFbDailyPlatformReportDo
	FirstOrInit() (*model.FbDailyPlatformReport, error)
	FirstOrCreate() (*model.FbDailyPlatformReport, error)
	FindByPage(offset int, limit int) (result []*model.FbDailyPlatformReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbDailyPlatformReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbDailyPlatformReportDo) Debug() IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Debug())
}

func (f fbDailyPlatformReportDo) WithContext(ctx context.Context) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbDailyPlatformReportDo) ReadDB() IFbDailyPlatformReportDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbDailyPlatformReportDo) WriteDB() IFbDailyPlatformReportDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbDailyPlatformReportDo) Session(config *gorm.Session) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbDailyPlatformReportDo) Clauses(conds ...clause.Expression) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbDailyPlatformReportDo) Returning(value interface{}, columns ...string) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbDailyPlatformReportDo) Not(conds ...gen.Condition) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbDailyPlatformReportDo) Or(conds ...gen.Condition) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbDailyPlatformReportDo) Select(conds ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbDailyPlatformReportDo) Where(conds ...gen.Condition) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbDailyPlatformReportDo) Order(conds ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbDailyPlatformReportDo) Distinct(cols ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbDailyPlatformReportDo) Omit(cols ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbDailyPlatformReportDo) Join(table schema.Tabler, on ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbDailyPlatformReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbDailyPlatformReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbDailyPlatformReportDo) Group(cols ...field.Expr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbDailyPlatformReportDo) Having(conds ...gen.Condition) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbDailyPlatformReportDo) Limit(limit int) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbDailyPlatformReportDo) Offset(offset int) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbDailyPlatformReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbDailyPlatformReportDo) Unscoped() IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbDailyPlatformReportDo) Create(values ...*model.FbDailyPlatformReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbDailyPlatformReportDo) CreateInBatches(values []*model.FbDailyPlatformReport, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbDailyPlatformReportDo) Save(values ...*model.FbDailyPlatformReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbDailyPlatformReportDo) First() (*model.FbDailyPlatformReport, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformReport), nil
	}
}

func (f fbDailyPlatformReportDo) Take() (*model.FbDailyPlatformReport, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformReport), nil
	}
}

func (f fbDailyPlatformReportDo) Last() (*model.FbDailyPlatformReport, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformReport), nil
	}
}

func (f fbDailyPlatformReportDo) Find() ([]*model.FbDailyPlatformReport, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbDailyPlatformReport), err
}

func (f fbDailyPlatformReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyPlatformReport, err error) {
	buf := make([]*model.FbDailyPlatformReport, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbDailyPlatformReportDo) FindInBatches(result *[]*model.FbDailyPlatformReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbDailyPlatformReportDo) Attrs(attrs ...field.AssignExpr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbDailyPlatformReportDo) Assign(attrs ...field.AssignExpr) IFbDailyPlatformReportDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbDailyPlatformReportDo) Joins(fields ...field.RelationField) IFbDailyPlatformReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbDailyPlatformReportDo) Preload(fields ...field.RelationField) IFbDailyPlatformReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbDailyPlatformReportDo) FirstOrInit() (*model.FbDailyPlatformReport, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformReport), nil
	}
}

func (f fbDailyPlatformReportDo) FirstOrCreate() (*model.FbDailyPlatformReport, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformReport), nil
	}
}

func (f fbDailyPlatformReportDo) FindByPage(offset int, limit int) (result []*model.FbDailyPlatformReport, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbDailyPlatformReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbDailyPlatformReportDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbDailyPlatformReportDo) Delete(models ...*model.FbDailyPlatformReport) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbDailyPlatformReportDo) withDO(do gen.Dao) *fbDailyPlatformReportDo {
	f.DO = *do.(*gen.DO)
	return f
}
