// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPagcorReportProd(db *gorm.DB, opts ...gen.DOOption) fbPagcorReportProd {
	_fbPagcorReportProd := fbPagcorReportProd{}

	_fbPagcorReportProd.fbPagcorReportProdDo.UseDB(db, opts...)
	_fbPagcorReportProd.fbPagcorReportProdDo.UseModel(&model.FbPagcorReportProd{})

	tableName := _fbPagcorReportProd.fbPagcorReportProdDo.TableName()
	_fbPagcorReportProd.ALL = field.NewAsterisk(tableName)
	_fbPagcorReportProd.ID = field.NewInt64(tableName, "id")
	_fbPagcorReportProd.Day = field.NewString(tableName, "day")
	_fbPagcorReportProd.TotalBetAmount = field.NewFloat64(tableName, "total_bet_amount")
	_fbPagcorReportProd.TotalValidBetAmount = field.NewFloat64(tableName, "total_valid_bet_amount")
	_fbPagcorReportProd.TotalSettlementAmount = field.NewFloat64(tableName, "total_settlement_amount")
	_fbPagcorReportProd.TotalNetAmount = field.NewFloat64(tableName, "total_net_amount")
	_fbPagcorReportProd.TestValidBetAmount = field.NewFloat64(tableName, "test_valid_bet_amount")
	_fbPagcorReportProd.TestSettlementAmount = field.NewFloat64(tableName, "test_settlement_amount")
	_fbPagcorReportProd.TestNetAmount = field.NewFloat64(tableName, "test_net_amount")
	_fbPagcorReportProd.Count_ = field.NewInt64(tableName, "count")
	_fbPagcorReportProd.BrandName = field.NewString(tableName, "brand_name")
	_fbPagcorReportProd.Category = field.NewString(tableName, "category")
	_fbPagcorReportProd.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbPagcorReportProd.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbPagcorReportProd.fillFieldMap()

	return _fbPagcorReportProd
}

// fbPagcorReportProd pagcor游戏报表
type fbPagcorReportProd struct {
	fbPagcorReportProdDo

	ALL                   field.Asterisk
	ID                    field.Int64
	Day                   field.String  // 数据日期
	TotalBetAmount        field.Float64 // total_bet_amount
	TotalValidBetAmount   field.Float64 // 有效投注金额
	TotalSettlementAmount field.Float64 // total_settlement_amount
	TotalNetAmount        field.Float64 // 投注盈亏
	TestValidBetAmount    field.Float64
	TestSettlementAmount  field.Float64
	TestNetAmount         field.Float64
	Count_                field.Int64  // 统计
	BrandName             field.String // 品牌
	Category              field.String // category
	CreatedAt             field.Int64  // 创建时间
	UpdatedAt             field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbPagcorReportProd) Table(newTableName string) *fbPagcorReportProd {
	f.fbPagcorReportProdDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPagcorReportProd) As(alias string) *fbPagcorReportProd {
	f.fbPagcorReportProdDo.DO = *(f.fbPagcorReportProdDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPagcorReportProd) updateTableName(table string) *fbPagcorReportProd {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewString(table, "day")
	f.TotalBetAmount = field.NewFloat64(table, "total_bet_amount")
	f.TotalValidBetAmount = field.NewFloat64(table, "total_valid_bet_amount")
	f.TotalSettlementAmount = field.NewFloat64(table, "total_settlement_amount")
	f.TotalNetAmount = field.NewFloat64(table, "total_net_amount")
	f.TestValidBetAmount = field.NewFloat64(table, "test_valid_bet_amount")
	f.TestSettlementAmount = field.NewFloat64(table, "test_settlement_amount")
	f.TestNetAmount = field.NewFloat64(table, "test_net_amount")
	f.Count_ = field.NewInt64(table, "count")
	f.BrandName = field.NewString(table, "brand_name")
	f.Category = field.NewString(table, "category")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbPagcorReportProd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPagcorReportProd) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 14)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["total_bet_amount"] = f.TotalBetAmount
	f.fieldMap["total_valid_bet_amount"] = f.TotalValidBetAmount
	f.fieldMap["total_settlement_amount"] = f.TotalSettlementAmount
	f.fieldMap["total_net_amount"] = f.TotalNetAmount
	f.fieldMap["test_valid_bet_amount"] = f.TestValidBetAmount
	f.fieldMap["test_settlement_amount"] = f.TestSettlementAmount
	f.fieldMap["test_net_amount"] = f.TestNetAmount
	f.fieldMap["count"] = f.Count_
	f.fieldMap["brand_name"] = f.BrandName
	f.fieldMap["category"] = f.Category
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbPagcorReportProd) clone(db *gorm.DB) fbPagcorReportProd {
	f.fbPagcorReportProdDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPagcorReportProd) replaceDB(db *gorm.DB) fbPagcorReportProd {
	f.fbPagcorReportProdDo.ReplaceDB(db)
	return f
}

type fbPagcorReportProdDo struct{ gen.DO }

type IFbPagcorReportProdDo interface {
	gen.SubQuery
	Debug() IFbPagcorReportProdDo
	WithContext(ctx context.Context) IFbPagcorReportProdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPagcorReportProdDo
	WriteDB() IFbPagcorReportProdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPagcorReportProdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPagcorReportProdDo
	Not(conds ...gen.Condition) IFbPagcorReportProdDo
	Or(conds ...gen.Condition) IFbPagcorReportProdDo
	Select(conds ...field.Expr) IFbPagcorReportProdDo
	Where(conds ...gen.Condition) IFbPagcorReportProdDo
	Order(conds ...field.Expr) IFbPagcorReportProdDo
	Distinct(cols ...field.Expr) IFbPagcorReportProdDo
	Omit(cols ...field.Expr) IFbPagcorReportProdDo
	Join(table schema.Tabler, on ...field.Expr) IFbPagcorReportProdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportProdDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportProdDo
	Group(cols ...field.Expr) IFbPagcorReportProdDo
	Having(conds ...gen.Condition) IFbPagcorReportProdDo
	Limit(limit int) IFbPagcorReportProdDo
	Offset(offset int) IFbPagcorReportProdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPagcorReportProdDo
	Unscoped() IFbPagcorReportProdDo
	Create(values ...*model.FbPagcorReportProd) error
	CreateInBatches(values []*model.FbPagcorReportProd, batchSize int) error
	Save(values ...*model.FbPagcorReportProd) error
	First() (*model.FbPagcorReportProd, error)
	Take() (*model.FbPagcorReportProd, error)
	Last() (*model.FbPagcorReportProd, error)
	Find() ([]*model.FbPagcorReportProd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPagcorReportProd, err error)
	FindInBatches(result *[]*model.FbPagcorReportProd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPagcorReportProd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPagcorReportProdDo
	Assign(attrs ...field.AssignExpr) IFbPagcorReportProdDo
	Joins(fields ...field.RelationField) IFbPagcorReportProdDo
	Preload(fields ...field.RelationField) IFbPagcorReportProdDo
	FirstOrInit() (*model.FbPagcorReportProd, error)
	FirstOrCreate() (*model.FbPagcorReportProd, error)
	FindByPage(offset int, limit int) (result []*model.FbPagcorReportProd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPagcorReportProdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPagcorReportProdDo) Debug() IFbPagcorReportProdDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPagcorReportProdDo) WithContext(ctx context.Context) IFbPagcorReportProdDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPagcorReportProdDo) ReadDB() IFbPagcorReportProdDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPagcorReportProdDo) WriteDB() IFbPagcorReportProdDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPagcorReportProdDo) Session(config *gorm.Session) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPagcorReportProdDo) Clauses(conds ...clause.Expression) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPagcorReportProdDo) Returning(value interface{}, columns ...string) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPagcorReportProdDo) Not(conds ...gen.Condition) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPagcorReportProdDo) Or(conds ...gen.Condition) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPagcorReportProdDo) Select(conds ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPagcorReportProdDo) Where(conds ...gen.Condition) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPagcorReportProdDo) Order(conds ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPagcorReportProdDo) Distinct(cols ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPagcorReportProdDo) Omit(cols ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPagcorReportProdDo) Join(table schema.Tabler, on ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPagcorReportProdDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPagcorReportProdDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPagcorReportProdDo) Group(cols ...field.Expr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPagcorReportProdDo) Having(conds ...gen.Condition) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPagcorReportProdDo) Limit(limit int) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPagcorReportProdDo) Offset(offset int) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPagcorReportProdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPagcorReportProdDo) Unscoped() IFbPagcorReportProdDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPagcorReportProdDo) Create(values ...*model.FbPagcorReportProd) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPagcorReportProdDo) CreateInBatches(values []*model.FbPagcorReportProd, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPagcorReportProdDo) Save(values ...*model.FbPagcorReportProd) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPagcorReportProdDo) First() (*model.FbPagcorReportProd, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReportProd), nil
	}
}

func (f fbPagcorReportProdDo) Take() (*model.FbPagcorReportProd, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReportProd), nil
	}
}

func (f fbPagcorReportProdDo) Last() (*model.FbPagcorReportProd, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReportProd), nil
	}
}

func (f fbPagcorReportProdDo) Find() ([]*model.FbPagcorReportProd, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPagcorReportProd), err
}

func (f fbPagcorReportProdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPagcorReportProd, err error) {
	buf := make([]*model.FbPagcorReportProd, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPagcorReportProdDo) FindInBatches(result *[]*model.FbPagcorReportProd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPagcorReportProdDo) Attrs(attrs ...field.AssignExpr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPagcorReportProdDo) Assign(attrs ...field.AssignExpr) IFbPagcorReportProdDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPagcorReportProdDo) Joins(fields ...field.RelationField) IFbPagcorReportProdDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPagcorReportProdDo) Preload(fields ...field.RelationField) IFbPagcorReportProdDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPagcorReportProdDo) FirstOrInit() (*model.FbPagcorReportProd, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReportProd), nil
	}
}

func (f fbPagcorReportProdDo) FirstOrCreate() (*model.FbPagcorReportProd, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReportProd), nil
	}
}

func (f fbPagcorReportProdDo) FindByPage(offset int, limit int) (result []*model.FbPagcorReportProd, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPagcorReportProdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPagcorReportProdDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPagcorReportProdDo) Delete(models ...*model.FbPagcorReportProd) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPagcorReportProdDo) withDO(do gen.Dao) *fbPagcorReportProdDo {
	f.DO = *do.(*gen.DO)
	return f
}
