// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbAdminGroup(db *gorm.DB, opts ...gen.DOOption) fbAdminGroup {
	_fbAdminGroup := fbAdminGroup{}

	_fbAdminGroup.fbAdminGroupDo.UseDB(db, opts...)
	_fbAdminGroup.fbAdminGroupDo.UseModel(&model.FbAdminGroup{})

	tableName := _fbAdminGroup.fbAdminGroupDo.TableName()
	_fbAdminGroup.ALL = field.NewAsterisk(tableName)
	_fbAdminGroup.Gid = field.NewInt64(tableName, "gid")
	_fbAdminGroup.Name = field.NewString(tableName, "name")
	_fbAdminGroup.Permission = field.NewString(tableName, "permission")
	_fbAdminGroup.Noted = field.NewString(tableName, "noted")
	_fbAdminGroup.CreateAt = field.NewInt32(tableName, "create_at")
	_fbAdminGroup.Pid = field.NewInt64(tableName, "pid")
	_fbAdminGroup.Pname = field.NewString(tableName, "pname")
	_fbAdminGroup.State = field.NewInt32(tableName, "state")
	_fbAdminGroup.Sortlevel = field.NewString(tableName, "sortlevel")
	_fbAdminGroup.Total = field.NewInt32(tableName, "total")
	_fbAdminGroup.UpdateAt = field.NewInt32(tableName, "update_at")
	_fbAdminGroup.UpdateName = field.NewString(tableName, "update_name")

	_fbAdminGroup.fillFieldMap()

	return _fbAdminGroup
}

// fbAdminGroup 后台用户分组表
type fbAdminGroup struct {
	fbAdminGroupDo

	ALL        field.Asterisk
	Gid        field.Int64
	Name       field.String // 组名
	Permission field.String // 权限模块ID
	Noted      field.String // 备注信息
	CreateAt   field.Int32  // 创建时间
	Pid        field.Int64  // 父节点
	Pname      field.String // 上级分组名
	State      field.Int32  // 1:开启2:关闭3:删除
	Sortlevel  field.String
	Total      field.Int32
	UpdateAt   field.Int32  // 修改时间
	UpdateName field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f fbAdminGroup) Table(newTableName string) *fbAdminGroup {
	f.fbAdminGroupDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbAdminGroup) As(alias string) *fbAdminGroup {
	f.fbAdminGroupDo.DO = *(f.fbAdminGroupDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbAdminGroup) updateTableName(table string) *fbAdminGroup {
	f.ALL = field.NewAsterisk(table)
	f.Gid = field.NewInt64(table, "gid")
	f.Name = field.NewString(table, "name")
	f.Permission = field.NewString(table, "permission")
	f.Noted = field.NewString(table, "noted")
	f.CreateAt = field.NewInt32(table, "create_at")
	f.Pid = field.NewInt64(table, "pid")
	f.Pname = field.NewString(table, "pname")
	f.State = field.NewInt32(table, "state")
	f.Sortlevel = field.NewString(table, "sortlevel")
	f.Total = field.NewInt32(table, "total")
	f.UpdateAt = field.NewInt32(table, "update_at")
	f.UpdateName = field.NewString(table, "update_name")

	f.fillFieldMap()

	return f
}

func (f *fbAdminGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbAdminGroup) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["gid"] = f.Gid
	f.fieldMap["name"] = f.Name
	f.fieldMap["permission"] = f.Permission
	f.fieldMap["noted"] = f.Noted
	f.fieldMap["create_at"] = f.CreateAt
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["pname"] = f.Pname
	f.fieldMap["state"] = f.State
	f.fieldMap["sortlevel"] = f.Sortlevel
	f.fieldMap["total"] = f.Total
	f.fieldMap["update_at"] = f.UpdateAt
	f.fieldMap["update_name"] = f.UpdateName
}

func (f fbAdminGroup) clone(db *gorm.DB) fbAdminGroup {
	f.fbAdminGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbAdminGroup) replaceDB(db *gorm.DB) fbAdminGroup {
	f.fbAdminGroupDo.ReplaceDB(db)
	return f
}

type fbAdminGroupDo struct{ gen.DO }

type IFbAdminGroupDo interface {
	gen.SubQuery
	Debug() IFbAdminGroupDo
	WithContext(ctx context.Context) IFbAdminGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbAdminGroupDo
	WriteDB() IFbAdminGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbAdminGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbAdminGroupDo
	Not(conds ...gen.Condition) IFbAdminGroupDo
	Or(conds ...gen.Condition) IFbAdminGroupDo
	Select(conds ...field.Expr) IFbAdminGroupDo
	Where(conds ...gen.Condition) IFbAdminGroupDo
	Order(conds ...field.Expr) IFbAdminGroupDo
	Distinct(cols ...field.Expr) IFbAdminGroupDo
	Omit(cols ...field.Expr) IFbAdminGroupDo
	Join(table schema.Tabler, on ...field.Expr) IFbAdminGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbAdminGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbAdminGroupDo
	Group(cols ...field.Expr) IFbAdminGroupDo
	Having(conds ...gen.Condition) IFbAdminGroupDo
	Limit(limit int) IFbAdminGroupDo
	Offset(offset int) IFbAdminGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbAdminGroupDo
	Unscoped() IFbAdminGroupDo
	Create(values ...*model.FbAdminGroup) error
	CreateInBatches(values []*model.FbAdminGroup, batchSize int) error
	Save(values ...*model.FbAdminGroup) error
	First() (*model.FbAdminGroup, error)
	Take() (*model.FbAdminGroup, error)
	Last() (*model.FbAdminGroup, error)
	Find() ([]*model.FbAdminGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbAdminGroup, err error)
	FindInBatches(result *[]*model.FbAdminGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbAdminGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbAdminGroupDo
	Assign(attrs ...field.AssignExpr) IFbAdminGroupDo
	Joins(fields ...field.RelationField) IFbAdminGroupDo
	Preload(fields ...field.RelationField) IFbAdminGroupDo
	FirstOrInit() (*model.FbAdminGroup, error)
	FirstOrCreate() (*model.FbAdminGroup, error)
	FindByPage(offset int, limit int) (result []*model.FbAdminGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbAdminGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbAdminGroupDo) Debug() IFbAdminGroupDo {
	return f.withDO(f.DO.Debug())
}

func (f fbAdminGroupDo) WithContext(ctx context.Context) IFbAdminGroupDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbAdminGroupDo) ReadDB() IFbAdminGroupDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbAdminGroupDo) WriteDB() IFbAdminGroupDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbAdminGroupDo) Session(config *gorm.Session) IFbAdminGroupDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbAdminGroupDo) Clauses(conds ...clause.Expression) IFbAdminGroupDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbAdminGroupDo) Returning(value interface{}, columns ...string) IFbAdminGroupDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbAdminGroupDo) Not(conds ...gen.Condition) IFbAdminGroupDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbAdminGroupDo) Or(conds ...gen.Condition) IFbAdminGroupDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbAdminGroupDo) Select(conds ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbAdminGroupDo) Where(conds ...gen.Condition) IFbAdminGroupDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbAdminGroupDo) Order(conds ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbAdminGroupDo) Distinct(cols ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbAdminGroupDo) Omit(cols ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbAdminGroupDo) Join(table schema.Tabler, on ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbAdminGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbAdminGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbAdminGroupDo) Group(cols ...field.Expr) IFbAdminGroupDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbAdminGroupDo) Having(conds ...gen.Condition) IFbAdminGroupDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbAdminGroupDo) Limit(limit int) IFbAdminGroupDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbAdminGroupDo) Offset(offset int) IFbAdminGroupDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbAdminGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbAdminGroupDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbAdminGroupDo) Unscoped() IFbAdminGroupDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbAdminGroupDo) Create(values ...*model.FbAdminGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbAdminGroupDo) CreateInBatches(values []*model.FbAdminGroup, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbAdminGroupDo) Save(values ...*model.FbAdminGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbAdminGroupDo) First() (*model.FbAdminGroup, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminGroup), nil
	}
}

func (f fbAdminGroupDo) Take() (*model.FbAdminGroup, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminGroup), nil
	}
}

func (f fbAdminGroupDo) Last() (*model.FbAdminGroup, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminGroup), nil
	}
}

func (f fbAdminGroupDo) Find() ([]*model.FbAdminGroup, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbAdminGroup), err
}

func (f fbAdminGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbAdminGroup, err error) {
	buf := make([]*model.FbAdminGroup, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbAdminGroupDo) FindInBatches(result *[]*model.FbAdminGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbAdminGroupDo) Attrs(attrs ...field.AssignExpr) IFbAdminGroupDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbAdminGroupDo) Assign(attrs ...field.AssignExpr) IFbAdminGroupDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbAdminGroupDo) Joins(fields ...field.RelationField) IFbAdminGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbAdminGroupDo) Preload(fields ...field.RelationField) IFbAdminGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbAdminGroupDo) FirstOrInit() (*model.FbAdminGroup, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminGroup), nil
	}
}

func (f fbAdminGroupDo) FirstOrCreate() (*model.FbAdminGroup, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminGroup), nil
	}
}

func (f fbAdminGroupDo) FindByPage(offset int, limit int) (result []*model.FbAdminGroup, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbAdminGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbAdminGroupDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbAdminGroupDo) Delete(models ...*model.FbAdminGroup) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbAdminGroupDo) withDO(do gen.Dao) *fbAdminGroupDo {
	f.DO = *do.(*gen.DO)
	return f
}
