// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMembersVip(db *gorm.DB, opts ...gen.DOOption) fbMembersVip {
	_fbMembersVip := fbMembersVip{}

	_fbMembersVip.fbMembersVipDo.UseDB(db, opts...)
	_fbMembersVip.fbMembersVipDo.UseModel(&model.FbMembersVip{})

	tableName := _fbMembersVip.fbMembersVipDo.TableName()
	_fbMembersVip.ALL = field.NewAsterisk(tableName)
	_fbMembersVip.UID = field.NewUint64(tableName, "uid")
	_fbMembersVip.ManualLevel = field.NewInt32(tableName, "manual_level")
	_fbMembersVip.Score = field.NewFloat64(tableName, "score")
	_fbMembersVip.Level = field.NewInt32(tableName, "level")
	_fbMembersVip.Category = field.NewInt32(tableName, "category")
	_fbMembersVip.CreatedAt = field.NewUint64(tableName, "created_at")
	_fbMembersVip.UpdatedAt = field.NewUint64(tableName, "updated_at")

	_fbMembersVip.fillFieldMap()

	return _fbMembersVip
}

// fbMembersVip 会员vip表
type fbMembersVip struct {
	fbMembersVipDo

	ALL         field.Asterisk
	UID         field.Uint64
	ManualLevel field.Int32   // manual_level
	Score       field.Float64 // 评分
	Level       field.Int32   // 等级
	Category    field.Int32   // 等级
	CreatedAt   field.Uint64  // 创建时间
	UpdatedAt   field.Uint64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbMembersVip) Table(newTableName string) *fbMembersVip {
	f.fbMembersVipDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMembersVip) As(alias string) *fbMembersVip {
	f.fbMembersVipDo.DO = *(f.fbMembersVipDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMembersVip) updateTableName(table string) *fbMembersVip {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewUint64(table, "uid")
	f.ManualLevel = field.NewInt32(table, "manual_level")
	f.Score = field.NewFloat64(table, "score")
	f.Level = field.NewInt32(table, "level")
	f.Category = field.NewInt32(table, "category")
	f.CreatedAt = field.NewUint64(table, "created_at")
	f.UpdatedAt = field.NewUint64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbMembersVip) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMembersVip) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["manual_level"] = f.ManualLevel
	f.fieldMap["score"] = f.Score
	f.fieldMap["level"] = f.Level
	f.fieldMap["category"] = f.Category
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbMembersVip) clone(db *gorm.DB) fbMembersVip {
	f.fbMembersVipDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMembersVip) replaceDB(db *gorm.DB) fbMembersVip {
	f.fbMembersVipDo.ReplaceDB(db)
	return f
}

type fbMembersVipDo struct{ gen.DO }

type IFbMembersVipDo interface {
	gen.SubQuery
	Debug() IFbMembersVipDo
	WithContext(ctx context.Context) IFbMembersVipDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMembersVipDo
	WriteDB() IFbMembersVipDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMembersVipDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMembersVipDo
	Not(conds ...gen.Condition) IFbMembersVipDo
	Or(conds ...gen.Condition) IFbMembersVipDo
	Select(conds ...field.Expr) IFbMembersVipDo
	Where(conds ...gen.Condition) IFbMembersVipDo
	Order(conds ...field.Expr) IFbMembersVipDo
	Distinct(cols ...field.Expr) IFbMembersVipDo
	Omit(cols ...field.Expr) IFbMembersVipDo
	Join(table schema.Tabler, on ...field.Expr) IFbMembersVipDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipDo
	Group(cols ...field.Expr) IFbMembersVipDo
	Having(conds ...gen.Condition) IFbMembersVipDo
	Limit(limit int) IFbMembersVipDo
	Offset(offset int) IFbMembersVipDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersVipDo
	Unscoped() IFbMembersVipDo
	Create(values ...*model.FbMembersVip) error
	CreateInBatches(values []*model.FbMembersVip, batchSize int) error
	Save(values ...*model.FbMembersVip) error
	First() (*model.FbMembersVip, error)
	Take() (*model.FbMembersVip, error)
	Last() (*model.FbMembersVip, error)
	Find() ([]*model.FbMembersVip, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersVip, err error)
	FindInBatches(result *[]*model.FbMembersVip, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMembersVip) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMembersVipDo
	Assign(attrs ...field.AssignExpr) IFbMembersVipDo
	Joins(fields ...field.RelationField) IFbMembersVipDo
	Preload(fields ...field.RelationField) IFbMembersVipDo
	FirstOrInit() (*model.FbMembersVip, error)
	FirstOrCreate() (*model.FbMembersVip, error)
	FindByPage(offset int, limit int) (result []*model.FbMembersVip, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMembersVipDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMembersVipDo) Debug() IFbMembersVipDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMembersVipDo) WithContext(ctx context.Context) IFbMembersVipDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMembersVipDo) ReadDB() IFbMembersVipDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMembersVipDo) WriteDB() IFbMembersVipDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMembersVipDo) Session(config *gorm.Session) IFbMembersVipDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMembersVipDo) Clauses(conds ...clause.Expression) IFbMembersVipDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMembersVipDo) Returning(value interface{}, columns ...string) IFbMembersVipDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMembersVipDo) Not(conds ...gen.Condition) IFbMembersVipDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMembersVipDo) Or(conds ...gen.Condition) IFbMembersVipDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMembersVipDo) Select(conds ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMembersVipDo) Where(conds ...gen.Condition) IFbMembersVipDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMembersVipDo) Order(conds ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMembersVipDo) Distinct(cols ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMembersVipDo) Omit(cols ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMembersVipDo) Join(table schema.Tabler, on ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMembersVipDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMembersVipDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMembersVipDo) Group(cols ...field.Expr) IFbMembersVipDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMembersVipDo) Having(conds ...gen.Condition) IFbMembersVipDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMembersVipDo) Limit(limit int) IFbMembersVipDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMembersVipDo) Offset(offset int) IFbMembersVipDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMembersVipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersVipDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMembersVipDo) Unscoped() IFbMembersVipDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMembersVipDo) Create(values ...*model.FbMembersVip) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMembersVipDo) CreateInBatches(values []*model.FbMembersVip, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMembersVipDo) Save(values ...*model.FbMembersVip) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMembersVipDo) First() (*model.FbMembersVip, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVip), nil
	}
}

func (f fbMembersVipDo) Take() (*model.FbMembersVip, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVip), nil
	}
}

func (f fbMembersVipDo) Last() (*model.FbMembersVip, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVip), nil
	}
}

func (f fbMembersVipDo) Find() ([]*model.FbMembersVip, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMembersVip), err
}

func (f fbMembersVipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersVip, err error) {
	buf := make([]*model.FbMembersVip, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMembersVipDo) FindInBatches(result *[]*model.FbMembersVip, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMembersVipDo) Attrs(attrs ...field.AssignExpr) IFbMembersVipDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMembersVipDo) Assign(attrs ...field.AssignExpr) IFbMembersVipDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMembersVipDo) Joins(fields ...field.RelationField) IFbMembersVipDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMembersVipDo) Preload(fields ...field.RelationField) IFbMembersVipDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMembersVipDo) FirstOrInit() (*model.FbMembersVip, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVip), nil
	}
}

func (f fbMembersVipDo) FirstOrCreate() (*model.FbMembersVip, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVip), nil
	}
}

func (f fbMembersVipDo) FindByPage(offset int, limit int) (result []*model.FbMembersVip, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMembersVipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMembersVipDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMembersVipDo) Delete(models ...*model.FbMembersVip) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMembersVipDo) withDO(do gen.Dao) *fbMembersVipDo {
	f.DO = *do.(*gen.DO)
	return f
}
