// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPromoGameList(db *gorm.DB, opts ...gen.DOOption) fbPromoGameList {
	_fbPromoGameList := fbPromoGameList{}

	_fbPromoGameList.fbPromoGameListDo.UseDB(db, opts...)
	_fbPromoGameList.fbPromoGameListDo.UseModel(&model.FbPromoGameList{})

	tableName := _fbPromoGameList.fbPromoGameListDo.TableName()
	_fbPromoGameList.ALL = field.NewAsterisk(tableName)
	_fbPromoGameList.Pid = field.NewInt64(tableName, "pid")
	_fbPromoGameList.GameID = field.NewString(tableName, "game_id")
	_fbPromoGameList.EnName = field.NewString(tableName, "en_name")
	_fbPromoGameList.State = field.NewInt32(tableName, "state")
	_fbPromoGameList.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbPromoGameList.CreatedAt = field.NewInt64(tableName, "created_at")

	_fbPromoGameList.fillFieldMap()

	return _fbPromoGameList
}

// fbPromoGameList 活动统计的游戏
type fbPromoGameList struct {
	fbPromoGameListDo

	ALL       field.Asterisk
	Pid       field.Int64  // 活动ID
	GameID    field.String // 游戏ID
	EnName    field.String // 英文名称
	State     field.Int32  // 状态 1:未启用 2:启用
	UpdatedAt field.Int64  // 更新时间
	CreatedAt field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (f fbPromoGameList) Table(newTableName string) *fbPromoGameList {
	f.fbPromoGameListDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPromoGameList) As(alias string) *fbPromoGameList {
	f.fbPromoGameListDo.DO = *(f.fbPromoGameListDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPromoGameList) updateTableName(table string) *fbPromoGameList {
	f.ALL = field.NewAsterisk(table)
	f.Pid = field.NewInt64(table, "pid")
	f.GameID = field.NewString(table, "game_id")
	f.EnName = field.NewString(table, "en_name")
	f.State = field.NewInt32(table, "state")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.CreatedAt = field.NewInt64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbPromoGameList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPromoGameList) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["game_id"] = f.GameID
	f.fieldMap["en_name"] = f.EnName
	f.fieldMap["state"] = f.State
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbPromoGameList) clone(db *gorm.DB) fbPromoGameList {
	f.fbPromoGameListDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPromoGameList) replaceDB(db *gorm.DB) fbPromoGameList {
	f.fbPromoGameListDo.ReplaceDB(db)
	return f
}

type fbPromoGameListDo struct{ gen.DO }

type IFbPromoGameListDo interface {
	gen.SubQuery
	Debug() IFbPromoGameListDo
	WithContext(ctx context.Context) IFbPromoGameListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPromoGameListDo
	WriteDB() IFbPromoGameListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPromoGameListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPromoGameListDo
	Not(conds ...gen.Condition) IFbPromoGameListDo
	Or(conds ...gen.Condition) IFbPromoGameListDo
	Select(conds ...field.Expr) IFbPromoGameListDo
	Where(conds ...gen.Condition) IFbPromoGameListDo
	Order(conds ...field.Expr) IFbPromoGameListDo
	Distinct(cols ...field.Expr) IFbPromoGameListDo
	Omit(cols ...field.Expr) IFbPromoGameListDo
	Join(table schema.Tabler, on ...field.Expr) IFbPromoGameListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoGameListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoGameListDo
	Group(cols ...field.Expr) IFbPromoGameListDo
	Having(conds ...gen.Condition) IFbPromoGameListDo
	Limit(limit int) IFbPromoGameListDo
	Offset(offset int) IFbPromoGameListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoGameListDo
	Unscoped() IFbPromoGameListDo
	Create(values ...*model.FbPromoGameList) error
	CreateInBatches(values []*model.FbPromoGameList, batchSize int) error
	Save(values ...*model.FbPromoGameList) error
	First() (*model.FbPromoGameList, error)
	Take() (*model.FbPromoGameList, error)
	Last() (*model.FbPromoGameList, error)
	Find() ([]*model.FbPromoGameList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoGameList, err error)
	FindInBatches(result *[]*model.FbPromoGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPromoGameList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPromoGameListDo
	Assign(attrs ...field.AssignExpr) IFbPromoGameListDo
	Joins(fields ...field.RelationField) IFbPromoGameListDo
	Preload(fields ...field.RelationField) IFbPromoGameListDo
	FirstOrInit() (*model.FbPromoGameList, error)
	FirstOrCreate() (*model.FbPromoGameList, error)
	FindByPage(offset int, limit int) (result []*model.FbPromoGameList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPromoGameListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPromoGameListDo) Debug() IFbPromoGameListDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPromoGameListDo) WithContext(ctx context.Context) IFbPromoGameListDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPromoGameListDo) ReadDB() IFbPromoGameListDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPromoGameListDo) WriteDB() IFbPromoGameListDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPromoGameListDo) Session(config *gorm.Session) IFbPromoGameListDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPromoGameListDo) Clauses(conds ...clause.Expression) IFbPromoGameListDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPromoGameListDo) Returning(value interface{}, columns ...string) IFbPromoGameListDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPromoGameListDo) Not(conds ...gen.Condition) IFbPromoGameListDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPromoGameListDo) Or(conds ...gen.Condition) IFbPromoGameListDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPromoGameListDo) Select(conds ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPromoGameListDo) Where(conds ...gen.Condition) IFbPromoGameListDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPromoGameListDo) Order(conds ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPromoGameListDo) Distinct(cols ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPromoGameListDo) Omit(cols ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPromoGameListDo) Join(table schema.Tabler, on ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPromoGameListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPromoGameListDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPromoGameListDo) Group(cols ...field.Expr) IFbPromoGameListDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPromoGameListDo) Having(conds ...gen.Condition) IFbPromoGameListDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPromoGameListDo) Limit(limit int) IFbPromoGameListDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPromoGameListDo) Offset(offset int) IFbPromoGameListDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPromoGameListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoGameListDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPromoGameListDo) Unscoped() IFbPromoGameListDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPromoGameListDo) Create(values ...*model.FbPromoGameList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPromoGameListDo) CreateInBatches(values []*model.FbPromoGameList, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPromoGameListDo) Save(values ...*model.FbPromoGameList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPromoGameListDo) First() (*model.FbPromoGameList, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoGameList), nil
	}
}

func (f fbPromoGameListDo) Take() (*model.FbPromoGameList, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoGameList), nil
	}
}

func (f fbPromoGameListDo) Last() (*model.FbPromoGameList, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoGameList), nil
	}
}

func (f fbPromoGameListDo) Find() ([]*model.FbPromoGameList, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPromoGameList), err
}

func (f fbPromoGameListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoGameList, err error) {
	buf := make([]*model.FbPromoGameList, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPromoGameListDo) FindInBatches(result *[]*model.FbPromoGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPromoGameListDo) Attrs(attrs ...field.AssignExpr) IFbPromoGameListDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPromoGameListDo) Assign(attrs ...field.AssignExpr) IFbPromoGameListDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPromoGameListDo) Joins(fields ...field.RelationField) IFbPromoGameListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPromoGameListDo) Preload(fields ...field.RelationField) IFbPromoGameListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPromoGameListDo) FirstOrInit() (*model.FbPromoGameList, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoGameList), nil
	}
}

func (f fbPromoGameListDo) FirstOrCreate() (*model.FbPromoGameList, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoGameList), nil
	}
}

func (f fbPromoGameListDo) FindByPage(offset int, limit int) (result []*model.FbPromoGameList, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPromoGameListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPromoGameListDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPromoGameListDo) Delete(models ...*model.FbPromoGameList) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPromoGameListDo) withDO(do gen.Dao) *fbPromoGameListDo {
	f.DO = *do.(*gen.DO)
	return f
}
