// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbBuriedPoint(db *gorm.DB, opts ...gen.DOOption) fbBuriedPoint {
	_fbBuriedPoint := fbBuriedPoint{}

	_fbBuriedPoint.fbBuriedPointDo.UseDB(db, opts...)
	_fbBuriedPoint.fbBuriedPointDo.UseModel(&model.FbBuriedPoint{})

	tableName := _fbBuriedPoint.fbBuriedPointDo.TableName()
	_fbBuriedPoint.ALL = field.NewAsterisk(tableName)
	_fbBuriedPoint.AdID = field.NewInt64(tableName, "ad_id")
	_fbBuriedPoint.AdName = field.NewString(tableName, "ad_name")
	_fbBuriedPoint.Channel = field.NewString(tableName, "channel")
	_fbBuriedPoint.Config = field.NewString(tableName, "config")
	_fbBuriedPoint.DomainID = field.NewInt64(tableName, "domain_id")
	_fbBuriedPoint.State = field.NewBool(tableName, "state")
	_fbBuriedPoint.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbBuriedPoint.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbBuriedPoint.UpdatedUID = field.NewString(tableName, "updated_uid")
	_fbBuriedPoint.UpdatedName = field.NewString(tableName, "updated_name")

	_fbBuriedPoint.fillFieldMap()

	return _fbBuriedPoint
}

// fbBuriedPoint 埋点配置表
type fbBuriedPoint struct {
	fbBuriedPointDo

	ALL         field.Asterisk
	AdID        field.Int64  // 广告ID
	AdName      field.String // 广告名称
	Channel     field.String // 投放渠道
	Config      field.String // 通用配置
	DomainID    field.Int64  // 域名ID
	State       field.Bool   // 状态 1启用 2禁用
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64  // 修改时间
	UpdatedUID  field.String // 修改人ID
	UpdatedName field.String // 修改人

	fieldMap map[string]field.Expr
}

func (f fbBuriedPoint) Table(newTableName string) *fbBuriedPoint {
	f.fbBuriedPointDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbBuriedPoint) As(alias string) *fbBuriedPoint {
	f.fbBuriedPointDo.DO = *(f.fbBuriedPointDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbBuriedPoint) updateTableName(table string) *fbBuriedPoint {
	f.ALL = field.NewAsterisk(table)
	f.AdID = field.NewInt64(table, "ad_id")
	f.AdName = field.NewString(table, "ad_name")
	f.Channel = field.NewString(table, "channel")
	f.Config = field.NewString(table, "config")
	f.DomainID = field.NewInt64(table, "domain_id")
	f.State = field.NewBool(table, "state")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedUID = field.NewString(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")

	f.fillFieldMap()

	return f
}

func (f *fbBuriedPoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbBuriedPoint) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["ad_id"] = f.AdID
	f.fieldMap["ad_name"] = f.AdName
	f.fieldMap["channel"] = f.Channel
	f.fieldMap["config"] = f.Config
	f.fieldMap["domain_id"] = f.DomainID
	f.fieldMap["state"] = f.State
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
}

func (f fbBuriedPoint) clone(db *gorm.DB) fbBuriedPoint {
	f.fbBuriedPointDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbBuriedPoint) replaceDB(db *gorm.DB) fbBuriedPoint {
	f.fbBuriedPointDo.ReplaceDB(db)
	return f
}

type fbBuriedPointDo struct{ gen.DO }

type IFbBuriedPointDo interface {
	gen.SubQuery
	Debug() IFbBuriedPointDo
	WithContext(ctx context.Context) IFbBuriedPointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbBuriedPointDo
	WriteDB() IFbBuriedPointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbBuriedPointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbBuriedPointDo
	Not(conds ...gen.Condition) IFbBuriedPointDo
	Or(conds ...gen.Condition) IFbBuriedPointDo
	Select(conds ...field.Expr) IFbBuriedPointDo
	Where(conds ...gen.Condition) IFbBuriedPointDo
	Order(conds ...field.Expr) IFbBuriedPointDo
	Distinct(cols ...field.Expr) IFbBuriedPointDo
	Omit(cols ...field.Expr) IFbBuriedPointDo
	Join(table schema.Tabler, on ...field.Expr) IFbBuriedPointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbBuriedPointDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbBuriedPointDo
	Group(cols ...field.Expr) IFbBuriedPointDo
	Having(conds ...gen.Condition) IFbBuriedPointDo
	Limit(limit int) IFbBuriedPointDo
	Offset(offset int) IFbBuriedPointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBuriedPointDo
	Unscoped() IFbBuriedPointDo
	Create(values ...*model.FbBuriedPoint) error
	CreateInBatches(values []*model.FbBuriedPoint, batchSize int) error
	Save(values ...*model.FbBuriedPoint) error
	First() (*model.FbBuriedPoint, error)
	Take() (*model.FbBuriedPoint, error)
	Last() (*model.FbBuriedPoint, error)
	Find() ([]*model.FbBuriedPoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBuriedPoint, err error)
	FindInBatches(result *[]*model.FbBuriedPoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbBuriedPoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbBuriedPointDo
	Assign(attrs ...field.AssignExpr) IFbBuriedPointDo
	Joins(fields ...field.RelationField) IFbBuriedPointDo
	Preload(fields ...field.RelationField) IFbBuriedPointDo
	FirstOrInit() (*model.FbBuriedPoint, error)
	FirstOrCreate() (*model.FbBuriedPoint, error)
	FindByPage(offset int, limit int) (result []*model.FbBuriedPoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbBuriedPointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbBuriedPointDo) Debug() IFbBuriedPointDo {
	return f.withDO(f.DO.Debug())
}

func (f fbBuriedPointDo) WithContext(ctx context.Context) IFbBuriedPointDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbBuriedPointDo) ReadDB() IFbBuriedPointDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbBuriedPointDo) WriteDB() IFbBuriedPointDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbBuriedPointDo) Session(config *gorm.Session) IFbBuriedPointDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbBuriedPointDo) Clauses(conds ...clause.Expression) IFbBuriedPointDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbBuriedPointDo) Returning(value interface{}, columns ...string) IFbBuriedPointDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbBuriedPointDo) Not(conds ...gen.Condition) IFbBuriedPointDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbBuriedPointDo) Or(conds ...gen.Condition) IFbBuriedPointDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbBuriedPointDo) Select(conds ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbBuriedPointDo) Where(conds ...gen.Condition) IFbBuriedPointDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbBuriedPointDo) Order(conds ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbBuriedPointDo) Distinct(cols ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbBuriedPointDo) Omit(cols ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbBuriedPointDo) Join(table schema.Tabler, on ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbBuriedPointDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbBuriedPointDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbBuriedPointDo) Group(cols ...field.Expr) IFbBuriedPointDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbBuriedPointDo) Having(conds ...gen.Condition) IFbBuriedPointDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbBuriedPointDo) Limit(limit int) IFbBuriedPointDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbBuriedPointDo) Offset(offset int) IFbBuriedPointDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbBuriedPointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBuriedPointDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbBuriedPointDo) Unscoped() IFbBuriedPointDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbBuriedPointDo) Create(values ...*model.FbBuriedPoint) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbBuriedPointDo) CreateInBatches(values []*model.FbBuriedPoint, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbBuriedPointDo) Save(values ...*model.FbBuriedPoint) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbBuriedPointDo) First() (*model.FbBuriedPoint, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBuriedPoint), nil
	}
}

func (f fbBuriedPointDo) Take() (*model.FbBuriedPoint, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBuriedPoint), nil
	}
}

func (f fbBuriedPointDo) Last() (*model.FbBuriedPoint, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBuriedPoint), nil
	}
}

func (f fbBuriedPointDo) Find() ([]*model.FbBuriedPoint, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbBuriedPoint), err
}

func (f fbBuriedPointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBuriedPoint, err error) {
	buf := make([]*model.FbBuriedPoint, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbBuriedPointDo) FindInBatches(result *[]*model.FbBuriedPoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbBuriedPointDo) Attrs(attrs ...field.AssignExpr) IFbBuriedPointDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbBuriedPointDo) Assign(attrs ...field.AssignExpr) IFbBuriedPointDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbBuriedPointDo) Joins(fields ...field.RelationField) IFbBuriedPointDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbBuriedPointDo) Preload(fields ...field.RelationField) IFbBuriedPointDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbBuriedPointDo) FirstOrInit() (*model.FbBuriedPoint, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBuriedPoint), nil
	}
}

func (f fbBuriedPointDo) FirstOrCreate() (*model.FbBuriedPoint, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBuriedPoint), nil
	}
}

func (f fbBuriedPointDo) FindByPage(offset int, limit int) (result []*model.FbBuriedPoint, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbBuriedPointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbBuriedPointDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbBuriedPointDo) Delete(models ...*model.FbBuriedPoint) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbBuriedPointDo) withDO(do gen.Dao) *fbBuriedPointDo {
	f.DO = *do.(*gen.DO)
	return f
}
