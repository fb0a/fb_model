// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMallOrder(db *gorm.DB, opts ...gen.DOOption) fbMallOrder {
	_fbMallOrder := fbMallOrder{}

	_fbMallOrder.fbMallOrderDo.UseDB(db, opts...)
	_fbMallOrder.fbMallOrderDo.UseModel(&model.FbMallOrder{})

	tableName := _fbMallOrder.fbMallOrderDo.TableName()
	_fbMallOrder.ALL = field.NewAsterisk(tableName)
	_fbMallOrder.ID = field.NewInt64(tableName, "id")
	_fbMallOrder.UID = field.NewInt64(tableName, "uid")
	_fbMallOrder.Username = field.NewString(tableName, "username")
	_fbMallOrder.Phone = field.NewString(tableName, "phone")
	_fbMallOrder.ProductID = field.NewInt64(tableName, "product_id")
	_fbMallOrder.ProductName = field.NewString(tableName, "product_name")
	_fbMallOrder.ProductType = field.NewInt32(tableName, "product_type")
	_fbMallOrder.DeliverMethod = field.NewInt32(tableName, "deliver_method")
	_fbMallOrder.TokenPrice = field.NewFloat64(tableName, "token_price")
	_fbMallOrder.Quantity = field.NewInt32(tableName, "quantity")
	_fbMallOrder.PayAmount = field.NewFloat64(tableName, "pay_amount")
	_fbMallOrder.RechargeAmount = field.NewFloat64(tableName, "recharge_amount")
	_fbMallOrder.ReceiveType = field.NewInt32(tableName, "receive_type")
	_fbMallOrder.StoreAddress = field.NewString(tableName, "store_address")
	_fbMallOrder.DeliveryAddress = field.NewString(tableName, "delivery_address")
	_fbMallOrder.RecipientName = field.NewString(tableName, "recipient_name")
	_fbMallOrder.PhoneNumber = field.NewString(tableName, "phone_number")
	_fbMallOrder.Email = field.NewString(tableName, "email")
	_fbMallOrder.DeliverStatus = field.NewInt32(tableName, "deliver_status")
	_fbMallOrder.DeliverTime = field.NewInt64(tableName, "deliver_time")
	_fbMallOrder.DeliverName = field.NewString(tableName, "deliver_name")
	_fbMallOrder.DeliverEditNum = field.NewInt64(tableName, "deliver_edit_num")
	_fbMallOrder.DeliverInfo = field.NewString(tableName, "deliver_info")
	_fbMallOrder.SubmitAt = field.NewInt64(tableName, "submit_at")
	_fbMallOrder.TransAt = field.NewInt64(tableName, "trans_at")
	_fbMallOrder.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbMallOrder.UpdatedName = field.NewString(tableName, "updated_name")
	_fbMallOrder.UpdatedUID = field.NewInt64(tableName, "updated_uid")
	_fbMallOrder.ProductImg = field.NewString(tableName, "product_img")

	_fbMallOrder.fillFieldMap()

	return _fbMallOrder
}

// fbMallOrder 积分商城订单表
type fbMallOrder struct {
	fbMallOrderDo

	ALL             field.Asterisk
	ID              field.Int64   // 订单id
	UID             field.Int64   // uid
	Username        field.String  // 用户名
	Phone           field.String  // 手机号
	ProductID       field.Int64   // 商品id
	ProductName     field.String  // 商品名称
	ProductType     field.Int32   // 商品类型[1: 虚拟商品 2:实物商品]
	DeliverMethod   field.Int32   // 帐变类型，1自动发货 2人工发货 3到店领取 4人工发货或到店领取
	TokenPrice      field.Float64 // 商城代币价值
	Quantity        field.Int32   // 购买数量
	PayAmount       field.Float64 // 付款金额
	RechargeAmount  field.Float64 // 兑换的批索
	ReceiveType     field.Int32   // 兑换方式[1=自提 2=快递]
	StoreAddress    field.String  // 门店地址
	DeliveryAddress field.String  // 快递收货地址
	RecipientName   field.String  // 收件人姓名
	PhoneNumber     field.String  // 收件人手机号
	Email           field.String  // 收件人邮箱
	DeliverStatus   field.Int32   // 发货状态[1已自动给发货 2待人工发货 3已人工发货 4待领取 5已领取]
	DeliverTime     field.Int64   // 发货时间
	DeliverName     field.String  // 发货人
	DeliverEditNum  field.Int64   // 发货信息修改次数
	DeliverInfo     field.String  // 发货信息
	SubmitAt        field.Int64   // 提交时间
	TransAt         field.Int64   // 成交时间
	UpdatedAt       field.Int64   // 更新时间
	UpdatedName     field.String  // 更新人
	UpdatedUID      field.Int64   // 更新人uid
	ProductImg      field.String  // 产品图片

	fieldMap map[string]field.Expr
}

func (f fbMallOrder) Table(newTableName string) *fbMallOrder {
	f.fbMallOrderDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMallOrder) As(alias string) *fbMallOrder {
	f.fbMallOrderDo.DO = *(f.fbMallOrderDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMallOrder) updateTableName(table string) *fbMallOrder {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.Phone = field.NewString(table, "phone")
	f.ProductID = field.NewInt64(table, "product_id")
	f.ProductName = field.NewString(table, "product_name")
	f.ProductType = field.NewInt32(table, "product_type")
	f.DeliverMethod = field.NewInt32(table, "deliver_method")
	f.TokenPrice = field.NewFloat64(table, "token_price")
	f.Quantity = field.NewInt32(table, "quantity")
	f.PayAmount = field.NewFloat64(table, "pay_amount")
	f.RechargeAmount = field.NewFloat64(table, "recharge_amount")
	f.ReceiveType = field.NewInt32(table, "receive_type")
	f.StoreAddress = field.NewString(table, "store_address")
	f.DeliveryAddress = field.NewString(table, "delivery_address")
	f.RecipientName = field.NewString(table, "recipient_name")
	f.PhoneNumber = field.NewString(table, "phone_number")
	f.Email = field.NewString(table, "email")
	f.DeliverStatus = field.NewInt32(table, "deliver_status")
	f.DeliverTime = field.NewInt64(table, "deliver_time")
	f.DeliverName = field.NewString(table, "deliver_name")
	f.DeliverEditNum = field.NewInt64(table, "deliver_edit_num")
	f.DeliverInfo = field.NewString(table, "deliver_info")
	f.SubmitAt = field.NewInt64(table, "submit_at")
	f.TransAt = field.NewInt64(table, "trans_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")
	f.ProductImg = field.NewString(table, "product_img")

	f.fillFieldMap()

	return f
}

func (f *fbMallOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMallOrder) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 29)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["product_id"] = f.ProductID
	f.fieldMap["product_name"] = f.ProductName
	f.fieldMap["product_type"] = f.ProductType
	f.fieldMap["deliver_method"] = f.DeliverMethod
	f.fieldMap["token_price"] = f.TokenPrice
	f.fieldMap["quantity"] = f.Quantity
	f.fieldMap["pay_amount"] = f.PayAmount
	f.fieldMap["recharge_amount"] = f.RechargeAmount
	f.fieldMap["receive_type"] = f.ReceiveType
	f.fieldMap["store_address"] = f.StoreAddress
	f.fieldMap["delivery_address"] = f.DeliveryAddress
	f.fieldMap["recipient_name"] = f.RecipientName
	f.fieldMap["phone_number"] = f.PhoneNumber
	f.fieldMap["email"] = f.Email
	f.fieldMap["deliver_status"] = f.DeliverStatus
	f.fieldMap["deliver_time"] = f.DeliverTime
	f.fieldMap["deliver_name"] = f.DeliverName
	f.fieldMap["deliver_edit_num"] = f.DeliverEditNum
	f.fieldMap["deliver_info"] = f.DeliverInfo
	f.fieldMap["submit_at"] = f.SubmitAt
	f.fieldMap["trans_at"] = f.TransAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["product_img"] = f.ProductImg
}

func (f fbMallOrder) clone(db *gorm.DB) fbMallOrder {
	f.fbMallOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMallOrder) replaceDB(db *gorm.DB) fbMallOrder {
	f.fbMallOrderDo.ReplaceDB(db)
	return f
}

type fbMallOrderDo struct{ gen.DO }

type IFbMallOrderDo interface {
	gen.SubQuery
	Debug() IFbMallOrderDo
	WithContext(ctx context.Context) IFbMallOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMallOrderDo
	WriteDB() IFbMallOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMallOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMallOrderDo
	Not(conds ...gen.Condition) IFbMallOrderDo
	Or(conds ...gen.Condition) IFbMallOrderDo
	Select(conds ...field.Expr) IFbMallOrderDo
	Where(conds ...gen.Condition) IFbMallOrderDo
	Order(conds ...field.Expr) IFbMallOrderDo
	Distinct(cols ...field.Expr) IFbMallOrderDo
	Omit(cols ...field.Expr) IFbMallOrderDo
	Join(table schema.Tabler, on ...field.Expr) IFbMallOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMallOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMallOrderDo
	Group(cols ...field.Expr) IFbMallOrderDo
	Having(conds ...gen.Condition) IFbMallOrderDo
	Limit(limit int) IFbMallOrderDo
	Offset(offset int) IFbMallOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMallOrderDo
	Unscoped() IFbMallOrderDo
	Create(values ...*model.FbMallOrder) error
	CreateInBatches(values []*model.FbMallOrder, batchSize int) error
	Save(values ...*model.FbMallOrder) error
	First() (*model.FbMallOrder, error)
	Take() (*model.FbMallOrder, error)
	Last() (*model.FbMallOrder, error)
	Find() ([]*model.FbMallOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMallOrder, err error)
	FindInBatches(result *[]*model.FbMallOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMallOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMallOrderDo
	Assign(attrs ...field.AssignExpr) IFbMallOrderDo
	Joins(fields ...field.RelationField) IFbMallOrderDo
	Preload(fields ...field.RelationField) IFbMallOrderDo
	FirstOrInit() (*model.FbMallOrder, error)
	FirstOrCreate() (*model.FbMallOrder, error)
	FindByPage(offset int, limit int) (result []*model.FbMallOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMallOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMallOrderDo) Debug() IFbMallOrderDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMallOrderDo) WithContext(ctx context.Context) IFbMallOrderDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMallOrderDo) ReadDB() IFbMallOrderDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMallOrderDo) WriteDB() IFbMallOrderDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMallOrderDo) Session(config *gorm.Session) IFbMallOrderDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMallOrderDo) Clauses(conds ...clause.Expression) IFbMallOrderDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMallOrderDo) Returning(value interface{}, columns ...string) IFbMallOrderDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMallOrderDo) Not(conds ...gen.Condition) IFbMallOrderDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMallOrderDo) Or(conds ...gen.Condition) IFbMallOrderDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMallOrderDo) Select(conds ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMallOrderDo) Where(conds ...gen.Condition) IFbMallOrderDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMallOrderDo) Order(conds ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMallOrderDo) Distinct(cols ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMallOrderDo) Omit(cols ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMallOrderDo) Join(table schema.Tabler, on ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMallOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMallOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMallOrderDo) Group(cols ...field.Expr) IFbMallOrderDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMallOrderDo) Having(conds ...gen.Condition) IFbMallOrderDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMallOrderDo) Limit(limit int) IFbMallOrderDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMallOrderDo) Offset(offset int) IFbMallOrderDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMallOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMallOrderDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMallOrderDo) Unscoped() IFbMallOrderDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMallOrderDo) Create(values ...*model.FbMallOrder) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMallOrderDo) CreateInBatches(values []*model.FbMallOrder, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMallOrderDo) Save(values ...*model.FbMallOrder) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMallOrderDo) First() (*model.FbMallOrder, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMallOrder), nil
	}
}

func (f fbMallOrderDo) Take() (*model.FbMallOrder, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMallOrder), nil
	}
}

func (f fbMallOrderDo) Last() (*model.FbMallOrder, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMallOrder), nil
	}
}

func (f fbMallOrderDo) Find() ([]*model.FbMallOrder, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMallOrder), err
}

func (f fbMallOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMallOrder, err error) {
	buf := make([]*model.FbMallOrder, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMallOrderDo) FindInBatches(result *[]*model.FbMallOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMallOrderDo) Attrs(attrs ...field.AssignExpr) IFbMallOrderDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMallOrderDo) Assign(attrs ...field.AssignExpr) IFbMallOrderDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMallOrderDo) Joins(fields ...field.RelationField) IFbMallOrderDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMallOrderDo) Preload(fields ...field.RelationField) IFbMallOrderDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMallOrderDo) FirstOrInit() (*model.FbMallOrder, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMallOrder), nil
	}
}

func (f fbMallOrderDo) FirstOrCreate() (*model.FbMallOrder, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMallOrder), nil
	}
}

func (f fbMallOrderDo) FindByPage(offset int, limit int) (result []*model.FbMallOrder, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMallOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMallOrderDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMallOrderDo) Delete(models ...*model.FbMallOrder) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMallOrderDo) withDO(do gen.Dao) *fbMallOrderDo {
	f.DO = *do.(*gen.DO)
	return f
}
