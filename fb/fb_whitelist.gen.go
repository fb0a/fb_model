// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbWhitelist(db *gorm.DB, opts ...gen.DOOption) fbWhitelist {
	_fbWhitelist := fbWhitelist{}

	_fbWhitelist.fbWhitelistDo.UseDB(db, opts...)
	_fbWhitelist.fbWhitelistDo.UseModel(&model.FbWhitelist{})

	tableName := _fbWhitelist.fbWhitelistDo.TableName()
	_fbWhitelist.ALL = field.NewAsterisk(tableName)
	_fbWhitelist.ID = field.NewInt64(tableName, "id")
	_fbWhitelist.IP = field.NewString(tableName, "ip")
	_fbWhitelist.Vest = field.NewString(tableName, "vest")
	_fbWhitelist.Flags = field.NewInt32(tableName, "flags")
	_fbWhitelist.Note = field.NewString(tableName, "note")
	_fbWhitelist.UpdatedName = field.NewString(tableName, "updated_name")
	_fbWhitelist.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbWhitelist.State = field.NewInt32(tableName, "state")

	_fbWhitelist.fillFieldMap()

	return _fbWhitelist
}

// fbWhitelist IP白名单
type fbWhitelist struct {
	fbWhitelistDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	IP          field.String // IP地址
	Vest        field.String // IP归属
	Flags       field.Int32  // [1,2,3] 管理后台 客户端 导航站
	Note        field.String // 备注
	UpdatedName field.String // 操作人员
	UpdatedAt   field.Int64  // 更新时间
	State       field.Int32  // 1正常2删除

	fieldMap map[string]field.Expr
}

func (f fbWhitelist) Table(newTableName string) *fbWhitelist {
	f.fbWhitelistDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbWhitelist) As(alias string) *fbWhitelist {
	f.fbWhitelistDo.DO = *(f.fbWhitelistDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbWhitelist) updateTableName(table string) *fbWhitelist {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.IP = field.NewString(table, "ip")
	f.Vest = field.NewString(table, "vest")
	f.Flags = field.NewInt32(table, "flags")
	f.Note = field.NewString(table, "note")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.State = field.NewInt32(table, "state")

	f.fillFieldMap()

	return f
}

func (f *fbWhitelist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbWhitelist) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["id"] = f.ID
	f.fieldMap["ip"] = f.IP
	f.fieldMap["vest"] = f.Vest
	f.fieldMap["flags"] = f.Flags
	f.fieldMap["note"] = f.Note
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["state"] = f.State
}

func (f fbWhitelist) clone(db *gorm.DB) fbWhitelist {
	f.fbWhitelistDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbWhitelist) replaceDB(db *gorm.DB) fbWhitelist {
	f.fbWhitelistDo.ReplaceDB(db)
	return f
}

type fbWhitelistDo struct{ gen.DO }

type IFbWhitelistDo interface {
	gen.SubQuery
	Debug() IFbWhitelistDo
	WithContext(ctx context.Context) IFbWhitelistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbWhitelistDo
	WriteDB() IFbWhitelistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbWhitelistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbWhitelistDo
	Not(conds ...gen.Condition) IFbWhitelistDo
	Or(conds ...gen.Condition) IFbWhitelistDo
	Select(conds ...field.Expr) IFbWhitelistDo
	Where(conds ...gen.Condition) IFbWhitelistDo
	Order(conds ...field.Expr) IFbWhitelistDo
	Distinct(cols ...field.Expr) IFbWhitelistDo
	Omit(cols ...field.Expr) IFbWhitelistDo
	Join(table schema.Tabler, on ...field.Expr) IFbWhitelistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbWhitelistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbWhitelistDo
	Group(cols ...field.Expr) IFbWhitelistDo
	Having(conds ...gen.Condition) IFbWhitelistDo
	Limit(limit int) IFbWhitelistDo
	Offset(offset int) IFbWhitelistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbWhitelistDo
	Unscoped() IFbWhitelistDo
	Create(values ...*model.FbWhitelist) error
	CreateInBatches(values []*model.FbWhitelist, batchSize int) error
	Save(values ...*model.FbWhitelist) error
	First() (*model.FbWhitelist, error)
	Take() (*model.FbWhitelist, error)
	Last() (*model.FbWhitelist, error)
	Find() ([]*model.FbWhitelist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbWhitelist, err error)
	FindInBatches(result *[]*model.FbWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbWhitelist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbWhitelistDo
	Assign(attrs ...field.AssignExpr) IFbWhitelistDo
	Joins(fields ...field.RelationField) IFbWhitelistDo
	Preload(fields ...field.RelationField) IFbWhitelistDo
	FirstOrInit() (*model.FbWhitelist, error)
	FirstOrCreate() (*model.FbWhitelist, error)
	FindByPage(offset int, limit int) (result []*model.FbWhitelist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbWhitelistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbWhitelistDo) Debug() IFbWhitelistDo {
	return f.withDO(f.DO.Debug())
}

func (f fbWhitelistDo) WithContext(ctx context.Context) IFbWhitelistDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbWhitelistDo) ReadDB() IFbWhitelistDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbWhitelistDo) WriteDB() IFbWhitelistDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbWhitelistDo) Session(config *gorm.Session) IFbWhitelistDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbWhitelistDo) Clauses(conds ...clause.Expression) IFbWhitelistDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbWhitelistDo) Returning(value interface{}, columns ...string) IFbWhitelistDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbWhitelistDo) Not(conds ...gen.Condition) IFbWhitelistDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbWhitelistDo) Or(conds ...gen.Condition) IFbWhitelistDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbWhitelistDo) Select(conds ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbWhitelistDo) Where(conds ...gen.Condition) IFbWhitelistDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbWhitelistDo) Order(conds ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbWhitelistDo) Distinct(cols ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbWhitelistDo) Omit(cols ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbWhitelistDo) Join(table schema.Tabler, on ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbWhitelistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbWhitelistDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbWhitelistDo) Group(cols ...field.Expr) IFbWhitelistDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbWhitelistDo) Having(conds ...gen.Condition) IFbWhitelistDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbWhitelistDo) Limit(limit int) IFbWhitelistDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbWhitelistDo) Offset(offset int) IFbWhitelistDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbWhitelistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbWhitelistDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbWhitelistDo) Unscoped() IFbWhitelistDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbWhitelistDo) Create(values ...*model.FbWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbWhitelistDo) CreateInBatches(values []*model.FbWhitelist, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbWhitelistDo) Save(values ...*model.FbWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbWhitelistDo) First() (*model.FbWhitelist, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWhitelist), nil
	}
}

func (f fbWhitelistDo) Take() (*model.FbWhitelist, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWhitelist), nil
	}
}

func (f fbWhitelistDo) Last() (*model.FbWhitelist, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWhitelist), nil
	}
}

func (f fbWhitelistDo) Find() ([]*model.FbWhitelist, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbWhitelist), err
}

func (f fbWhitelistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbWhitelist, err error) {
	buf := make([]*model.FbWhitelist, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbWhitelistDo) FindInBatches(result *[]*model.FbWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbWhitelistDo) Attrs(attrs ...field.AssignExpr) IFbWhitelistDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbWhitelistDo) Assign(attrs ...field.AssignExpr) IFbWhitelistDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbWhitelistDo) Joins(fields ...field.RelationField) IFbWhitelistDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbWhitelistDo) Preload(fields ...field.RelationField) IFbWhitelistDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbWhitelistDo) FirstOrInit() (*model.FbWhitelist, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWhitelist), nil
	}
}

func (f fbWhitelistDo) FirstOrCreate() (*model.FbWhitelist, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbWhitelist), nil
	}
}

func (f fbWhitelistDo) FindByPage(offset int, limit int) (result []*model.FbWhitelist, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbWhitelistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbWhitelistDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbWhitelistDo) Delete(models ...*model.FbWhitelist) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbWhitelistDo) withDO(do gen.Dao) *fbWhitelistDo {
	f.DO = *do.(*gen.DO)
	return f
}
