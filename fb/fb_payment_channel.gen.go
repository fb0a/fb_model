// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPaymentChannel(db *gorm.DB, opts ...gen.DOOption) fbPaymentChannel {
	_fbPaymentChannel := fbPaymentChannel{}

	_fbPaymentChannel.fbPaymentChannelDo.UseDB(db, opts...)
	_fbPaymentChannel.fbPaymentChannelDo.UseModel(&model.FbPaymentChannel{})

	tableName := _fbPaymentChannel.fbPaymentChannelDo.TableName()
	_fbPaymentChannel.ALL = field.NewAsterisk(tableName)
	_fbPaymentChannel.ID = field.NewUint64(tableName, "id")
	_fbPaymentChannel.Name = field.NewString(tableName, "name")
	_fbPaymentChannel.PaymentID = field.NewUint64(tableName, "payment_id")
	_fbPaymentChannel.PaymentName = field.NewString(tableName, "payment_name")
	_fbPaymentChannel.Mode = field.NewString(tableName, "mode")
	_fbPaymentChannel.Flag = field.NewInt32(tableName, "flag")
	_fbPaymentChannel.State = field.NewInt32(tableName, "state")
	_fbPaymentChannel.Remark = field.NewString(tableName, "remark")
	_fbPaymentChannel.CreatedAt = field.NewUint64(tableName, "created_at")
	_fbPaymentChannel.UpdatedAt = field.NewUint64(tableName, "updated_at")
	_fbPaymentChannel.UpdatedUID = field.NewUint64(tableName, "updated_uid")
	_fbPaymentChannel.UpdatedName = field.NewString(tableName, "updated_name")
	_fbPaymentChannel.Config = field.NewString(tableName, "config")
	_fbPaymentChannel.Img = field.NewString(tableName, "img")
	_fbPaymentChannel.Sort = field.NewInt32(tableName, "sort")

	_fbPaymentChannel.fillFieldMap()

	return _fbPaymentChannel
}

// fbPaymentChannel 支付通道表
type fbPaymentChannel struct {
	fbPaymentChannelDo

	ALL         field.Asterisk
	ID          field.Uint64
	Name        field.String // 通道名(前台展示)
	PaymentID   field.Uint64 // 渠道id
	PaymentName field.String // 渠道名
	Mode        field.String // 通道类型 deposit代收 withdraw代付
	Flag        field.Int32  // 1 银行卡 ,2 电子钱包 3 信用卡, 4 加密货币,5 预付卡,6 third_party 7 线下
	State       field.Int32  // 通道状态，1=正常 2=停用
	Remark      field.String // 通道备注
	CreatedAt   field.Uint64 // 创建时间
	UpdatedAt   field.Uint64 // 更新时间
	UpdatedUID  field.Uint64 // 更新管理员id
	UpdatedName field.String // 更新管理员帐号
	Config      field.String // 通道配置信息
	Img         field.String // 图片
	Sort        field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (f fbPaymentChannel) Table(newTableName string) *fbPaymentChannel {
	f.fbPaymentChannelDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPaymentChannel) As(alias string) *fbPaymentChannel {
	f.fbPaymentChannelDo.DO = *(f.fbPaymentChannelDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPaymentChannel) updateTableName(table string) *fbPaymentChannel {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint64(table, "id")
	f.Name = field.NewString(table, "name")
	f.PaymentID = field.NewUint64(table, "payment_id")
	f.PaymentName = field.NewString(table, "payment_name")
	f.Mode = field.NewString(table, "mode")
	f.Flag = field.NewInt32(table, "flag")
	f.State = field.NewInt32(table, "state")
	f.Remark = field.NewString(table, "remark")
	f.CreatedAt = field.NewUint64(table, "created_at")
	f.UpdatedAt = field.NewUint64(table, "updated_at")
	f.UpdatedUID = field.NewUint64(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.Config = field.NewString(table, "config")
	f.Img = field.NewString(table, "img")
	f.Sort = field.NewInt32(table, "sort")

	f.fillFieldMap()

	return f
}

func (f *fbPaymentChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPaymentChannel) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["payment_id"] = f.PaymentID
	f.fieldMap["payment_name"] = f.PaymentName
	f.fieldMap["mode"] = f.Mode
	f.fieldMap["flag"] = f.Flag
	f.fieldMap["state"] = f.State
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["config"] = f.Config
	f.fieldMap["img"] = f.Img
	f.fieldMap["sort"] = f.Sort
}

func (f fbPaymentChannel) clone(db *gorm.DB) fbPaymentChannel {
	f.fbPaymentChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPaymentChannel) replaceDB(db *gorm.DB) fbPaymentChannel {
	f.fbPaymentChannelDo.ReplaceDB(db)
	return f
}

type fbPaymentChannelDo struct{ gen.DO }

type IFbPaymentChannelDo interface {
	gen.SubQuery
	Debug() IFbPaymentChannelDo
	WithContext(ctx context.Context) IFbPaymentChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPaymentChannelDo
	WriteDB() IFbPaymentChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPaymentChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPaymentChannelDo
	Not(conds ...gen.Condition) IFbPaymentChannelDo
	Or(conds ...gen.Condition) IFbPaymentChannelDo
	Select(conds ...field.Expr) IFbPaymentChannelDo
	Where(conds ...gen.Condition) IFbPaymentChannelDo
	Order(conds ...field.Expr) IFbPaymentChannelDo
	Distinct(cols ...field.Expr) IFbPaymentChannelDo
	Omit(cols ...field.Expr) IFbPaymentChannelDo
	Join(table schema.Tabler, on ...field.Expr) IFbPaymentChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPaymentChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPaymentChannelDo
	Group(cols ...field.Expr) IFbPaymentChannelDo
	Having(conds ...gen.Condition) IFbPaymentChannelDo
	Limit(limit int) IFbPaymentChannelDo
	Offset(offset int) IFbPaymentChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPaymentChannelDo
	Unscoped() IFbPaymentChannelDo
	Create(values ...*model.FbPaymentChannel) error
	CreateInBatches(values []*model.FbPaymentChannel, batchSize int) error
	Save(values ...*model.FbPaymentChannel) error
	First() (*model.FbPaymentChannel, error)
	Take() (*model.FbPaymentChannel, error)
	Last() (*model.FbPaymentChannel, error)
	Find() ([]*model.FbPaymentChannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPaymentChannel, err error)
	FindInBatches(result *[]*model.FbPaymentChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPaymentChannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPaymentChannelDo
	Assign(attrs ...field.AssignExpr) IFbPaymentChannelDo
	Joins(fields ...field.RelationField) IFbPaymentChannelDo
	Preload(fields ...field.RelationField) IFbPaymentChannelDo
	FirstOrInit() (*model.FbPaymentChannel, error)
	FirstOrCreate() (*model.FbPaymentChannel, error)
	FindByPage(offset int, limit int) (result []*model.FbPaymentChannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPaymentChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPaymentChannelDo) Debug() IFbPaymentChannelDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPaymentChannelDo) WithContext(ctx context.Context) IFbPaymentChannelDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPaymentChannelDo) ReadDB() IFbPaymentChannelDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPaymentChannelDo) WriteDB() IFbPaymentChannelDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPaymentChannelDo) Session(config *gorm.Session) IFbPaymentChannelDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPaymentChannelDo) Clauses(conds ...clause.Expression) IFbPaymentChannelDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPaymentChannelDo) Returning(value interface{}, columns ...string) IFbPaymentChannelDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPaymentChannelDo) Not(conds ...gen.Condition) IFbPaymentChannelDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPaymentChannelDo) Or(conds ...gen.Condition) IFbPaymentChannelDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPaymentChannelDo) Select(conds ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPaymentChannelDo) Where(conds ...gen.Condition) IFbPaymentChannelDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPaymentChannelDo) Order(conds ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPaymentChannelDo) Distinct(cols ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPaymentChannelDo) Omit(cols ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPaymentChannelDo) Join(table schema.Tabler, on ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPaymentChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPaymentChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPaymentChannelDo) Group(cols ...field.Expr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPaymentChannelDo) Having(conds ...gen.Condition) IFbPaymentChannelDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPaymentChannelDo) Limit(limit int) IFbPaymentChannelDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPaymentChannelDo) Offset(offset int) IFbPaymentChannelDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPaymentChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPaymentChannelDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPaymentChannelDo) Unscoped() IFbPaymentChannelDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPaymentChannelDo) Create(values ...*model.FbPaymentChannel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPaymentChannelDo) CreateInBatches(values []*model.FbPaymentChannel, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPaymentChannelDo) Save(values ...*model.FbPaymentChannel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPaymentChannelDo) First() (*model.FbPaymentChannel, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPaymentChannel), nil
	}
}

func (f fbPaymentChannelDo) Take() (*model.FbPaymentChannel, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPaymentChannel), nil
	}
}

func (f fbPaymentChannelDo) Last() (*model.FbPaymentChannel, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPaymentChannel), nil
	}
}

func (f fbPaymentChannelDo) Find() ([]*model.FbPaymentChannel, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPaymentChannel), err
}

func (f fbPaymentChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPaymentChannel, err error) {
	buf := make([]*model.FbPaymentChannel, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPaymentChannelDo) FindInBatches(result *[]*model.FbPaymentChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPaymentChannelDo) Attrs(attrs ...field.AssignExpr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPaymentChannelDo) Assign(attrs ...field.AssignExpr) IFbPaymentChannelDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPaymentChannelDo) Joins(fields ...field.RelationField) IFbPaymentChannelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPaymentChannelDo) Preload(fields ...field.RelationField) IFbPaymentChannelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPaymentChannelDo) FirstOrInit() (*model.FbPaymentChannel, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPaymentChannel), nil
	}
}

func (f fbPaymentChannelDo) FirstOrCreate() (*model.FbPaymentChannel, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPaymentChannel), nil
	}
}

func (f fbPaymentChannelDo) FindByPage(offset int, limit int) (result []*model.FbPaymentChannel, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPaymentChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPaymentChannelDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPaymentChannelDo) Delete(models ...*model.FbPaymentChannel) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPaymentChannelDo) withDO(do gen.Dao) *fbPaymentChannelDo {
	f.DO = *do.(*gen.DO)
	return f
}
