// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbReportProfit(db *gorm.DB, opts ...gen.DOOption) fbReportProfit {
	_fbReportProfit := fbReportProfit{}

	_fbReportProfit.fbReportProfitDo.UseDB(db, opts...)
	_fbReportProfit.fbReportProfitDo.UseModel(&model.FbReportProfit{})

	tableName := _fbReportProfit.fbReportProfitDo.TableName()
	_fbReportProfit.ALL = field.NewAsterisk(tableName)
	_fbReportProfit.ID = field.NewInt32(tableName, "id")
	_fbReportProfit.Day = field.NewInt32(tableName, "day")
	_fbReportProfit.Logged = field.NewInt32(tableName, "logged")
	_fbReportProfit.Kyc = field.NewInt32(tableName, "kyc")
	_fbReportProfit.Active = field.NewInt32(tableName, "active")
	_fbReportProfit.DepositPeople = field.NewInt32(tableName, "deposit_people")
	_fbReportProfit.DepositAmount = field.NewFloat64(tableName, "deposit_amount")
	_fbReportProfit.Deposits = field.NewInt32(tableName, "deposits")
	_fbReportProfit.DepositSucceed = field.NewInt32(tableName, "deposit_succeed")
	_fbReportProfit.DepositSuccessRate = field.NewFloat64(tableName, "deposit_success_rate")
	_fbReportProfit.DepositAvg = field.NewFloat64(tableName, "deposit_avg")
	_fbReportProfit.DepositFee = field.NewFloat64(tableName, "deposit_fee")
	_fbReportProfit.ReportType = field.NewBool(tableName, "report_type")
	_fbReportProfit.WithdrawPeople = field.NewInt32(tableName, "withdraw_people")
	_fbReportProfit.Withdraws = field.NewInt32(tableName, "withdraws")
	_fbReportProfit.WithdrawAmount = field.NewFloat64(tableName, "withdraw_amount")
	_fbReportProfit.WithdrawRemark = field.NewString(tableName, "withdraw_remark")
	_fbReportProfit.DwDiff = field.NewFloat64(tableName, "dw_diff")
	_fbReportProfit.Bets = field.NewInt32(tableName, "bets")
	_fbReportProfit.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_fbReportProfit.BetAvg = field.NewFloat64(tableName, "bet_avg")
	_fbReportProfit.Ggr = field.NewFloat64(tableName, "ggr")
	_fbReportProfit.Rate = field.NewFloat64(tableName, "rate")
	_fbReportProfit.BonusDue = field.NewFloat64(tableName, "bonus_due")
	_fbReportProfit.BonusReceived = field.NewFloat64(tableName, "bonus_received")
	_fbReportProfit.Commission = field.NewFloat64(tableName, "commission")
	_fbReportProfit.CreatedAt = field.NewInt64(tableName, "created_at")

	_fbReportProfit.fillFieldMap()

	return _fbReportProfit
}

// fbReportProfit 平台业绩日报表
type fbReportProfit struct {
	fbReportProfitDo

	ALL                field.Asterisk
	ID                 field.Int32   // ID
	Day                field.Int32   // 年月日
	Logged             field.Int32   // 登陆统计
	Kyc                field.Int32   // kyc统计
	Active             field.Int32   // 活跃人数
	DepositPeople      field.Int32   // 充值人数
	DepositAmount      field.Float64 // 总存款金额
	Deposits           field.Int32   // 充值次数
	DepositSucceed     field.Int32   // 充值成功次数
	DepositSuccessRate field.Float64 // 充值成功率
	DepositAvg         field.Float64 // 笔均充值金额
	DepositFee         field.Float64 // 总充值手续
	ReportType         field.Bool    // 报表类型：1日报、2周报、3月报
	WithdrawPeople     field.Int32   // 提现人数
	Withdraws          field.Int32   // 成功提现次数
	WithdrawAmount     field.Float64 // 总提现金额
	WithdrawRemark     field.String  // 提现用时
	DwDiff             field.Float64 // 存提差
	Bets               field.Int32   // 总注单数
	ValidBetAmount     field.Float64 // 总有效投注额
	BetAvg             field.Float64 // 笔均注单额
	Ggr                field.Float64 // GGR
	Rate               field.Float64 // 杀率
	BonusDue           field.Float64 // 应发礼金
	BonusReceived      field.Float64 // 实发礼金
	Commission         field.Float64 // 佣金
	CreatedAt          field.Int64   // 创建时间

	fieldMap map[string]field.Expr
}

func (f fbReportProfit) Table(newTableName string) *fbReportProfit {
	f.fbReportProfitDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbReportProfit) As(alias string) *fbReportProfit {
	f.fbReportProfitDo.DO = *(f.fbReportProfitDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbReportProfit) updateTableName(table string) *fbReportProfit {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.Logged = field.NewInt32(table, "logged")
	f.Kyc = field.NewInt32(table, "kyc")
	f.Active = field.NewInt32(table, "active")
	f.DepositPeople = field.NewInt32(table, "deposit_people")
	f.DepositAmount = field.NewFloat64(table, "deposit_amount")
	f.Deposits = field.NewInt32(table, "deposits")
	f.DepositSucceed = field.NewInt32(table, "deposit_succeed")
	f.DepositSuccessRate = field.NewFloat64(table, "deposit_success_rate")
	f.DepositAvg = field.NewFloat64(table, "deposit_avg")
	f.DepositFee = field.NewFloat64(table, "deposit_fee")
	f.ReportType = field.NewBool(table, "report_type")
	f.WithdrawPeople = field.NewInt32(table, "withdraw_people")
	f.Withdraws = field.NewInt32(table, "withdraws")
	f.WithdrawAmount = field.NewFloat64(table, "withdraw_amount")
	f.WithdrawRemark = field.NewString(table, "withdraw_remark")
	f.DwDiff = field.NewFloat64(table, "dw_diff")
	f.Bets = field.NewInt32(table, "bets")
	f.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	f.BetAvg = field.NewFloat64(table, "bet_avg")
	f.Ggr = field.NewFloat64(table, "ggr")
	f.Rate = field.NewFloat64(table, "rate")
	f.BonusDue = field.NewFloat64(table, "bonus_due")
	f.BonusReceived = field.NewFloat64(table, "bonus_received")
	f.Commission = field.NewFloat64(table, "commission")
	f.CreatedAt = field.NewInt64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbReportProfit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbReportProfit) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 27)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["logged"] = f.Logged
	f.fieldMap["kyc"] = f.Kyc
	f.fieldMap["active"] = f.Active
	f.fieldMap["deposit_people"] = f.DepositPeople
	f.fieldMap["deposit_amount"] = f.DepositAmount
	f.fieldMap["deposits"] = f.Deposits
	f.fieldMap["deposit_succeed"] = f.DepositSucceed
	f.fieldMap["deposit_success_rate"] = f.DepositSuccessRate
	f.fieldMap["deposit_avg"] = f.DepositAvg
	f.fieldMap["deposit_fee"] = f.DepositFee
	f.fieldMap["report_type"] = f.ReportType
	f.fieldMap["withdraw_people"] = f.WithdrawPeople
	f.fieldMap["withdraws"] = f.Withdraws
	f.fieldMap["withdraw_amount"] = f.WithdrawAmount
	f.fieldMap["withdraw_remark"] = f.WithdrawRemark
	f.fieldMap["dw_diff"] = f.DwDiff
	f.fieldMap["bets"] = f.Bets
	f.fieldMap["valid_bet_amount"] = f.ValidBetAmount
	f.fieldMap["bet_avg"] = f.BetAvg
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["rate"] = f.Rate
	f.fieldMap["bonus_due"] = f.BonusDue
	f.fieldMap["bonus_received"] = f.BonusReceived
	f.fieldMap["commission"] = f.Commission
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbReportProfit) clone(db *gorm.DB) fbReportProfit {
	f.fbReportProfitDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbReportProfit) replaceDB(db *gorm.DB) fbReportProfit {
	f.fbReportProfitDo.ReplaceDB(db)
	return f
}

type fbReportProfitDo struct{ gen.DO }

type IFbReportProfitDo interface {
	gen.SubQuery
	Debug() IFbReportProfitDo
	WithContext(ctx context.Context) IFbReportProfitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbReportProfitDo
	WriteDB() IFbReportProfitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbReportProfitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbReportProfitDo
	Not(conds ...gen.Condition) IFbReportProfitDo
	Or(conds ...gen.Condition) IFbReportProfitDo
	Select(conds ...field.Expr) IFbReportProfitDo
	Where(conds ...gen.Condition) IFbReportProfitDo
	Order(conds ...field.Expr) IFbReportProfitDo
	Distinct(cols ...field.Expr) IFbReportProfitDo
	Omit(cols ...field.Expr) IFbReportProfitDo
	Join(table schema.Tabler, on ...field.Expr) IFbReportProfitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportProfitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbReportProfitDo
	Group(cols ...field.Expr) IFbReportProfitDo
	Having(conds ...gen.Condition) IFbReportProfitDo
	Limit(limit int) IFbReportProfitDo
	Offset(offset int) IFbReportProfitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportProfitDo
	Unscoped() IFbReportProfitDo
	Create(values ...*model.FbReportProfit) error
	CreateInBatches(values []*model.FbReportProfit, batchSize int) error
	Save(values ...*model.FbReportProfit) error
	First() (*model.FbReportProfit, error)
	Take() (*model.FbReportProfit, error)
	Last() (*model.FbReportProfit, error)
	Find() ([]*model.FbReportProfit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportProfit, err error)
	FindInBatches(result *[]*model.FbReportProfit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbReportProfit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbReportProfitDo
	Assign(attrs ...field.AssignExpr) IFbReportProfitDo
	Joins(fields ...field.RelationField) IFbReportProfitDo
	Preload(fields ...field.RelationField) IFbReportProfitDo
	FirstOrInit() (*model.FbReportProfit, error)
	FirstOrCreate() (*model.FbReportProfit, error)
	FindByPage(offset int, limit int) (result []*model.FbReportProfit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbReportProfitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbReportProfitDo) Debug() IFbReportProfitDo {
	return f.withDO(f.DO.Debug())
}

func (f fbReportProfitDo) WithContext(ctx context.Context) IFbReportProfitDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbReportProfitDo) ReadDB() IFbReportProfitDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbReportProfitDo) WriteDB() IFbReportProfitDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbReportProfitDo) Session(config *gorm.Session) IFbReportProfitDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbReportProfitDo) Clauses(conds ...clause.Expression) IFbReportProfitDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbReportProfitDo) Returning(value interface{}, columns ...string) IFbReportProfitDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbReportProfitDo) Not(conds ...gen.Condition) IFbReportProfitDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbReportProfitDo) Or(conds ...gen.Condition) IFbReportProfitDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbReportProfitDo) Select(conds ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbReportProfitDo) Where(conds ...gen.Condition) IFbReportProfitDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbReportProfitDo) Order(conds ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbReportProfitDo) Distinct(cols ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbReportProfitDo) Omit(cols ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbReportProfitDo) Join(table schema.Tabler, on ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbReportProfitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbReportProfitDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbReportProfitDo) Group(cols ...field.Expr) IFbReportProfitDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbReportProfitDo) Having(conds ...gen.Condition) IFbReportProfitDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbReportProfitDo) Limit(limit int) IFbReportProfitDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbReportProfitDo) Offset(offset int) IFbReportProfitDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbReportProfitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportProfitDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbReportProfitDo) Unscoped() IFbReportProfitDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbReportProfitDo) Create(values ...*model.FbReportProfit) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbReportProfitDo) CreateInBatches(values []*model.FbReportProfit, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbReportProfitDo) Save(values ...*model.FbReportProfit) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbReportProfitDo) First() (*model.FbReportProfit, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportProfit), nil
	}
}

func (f fbReportProfitDo) Take() (*model.FbReportProfit, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportProfit), nil
	}
}

func (f fbReportProfitDo) Last() (*model.FbReportProfit, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportProfit), nil
	}
}

func (f fbReportProfitDo) Find() ([]*model.FbReportProfit, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbReportProfit), err
}

func (f fbReportProfitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportProfit, err error) {
	buf := make([]*model.FbReportProfit, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbReportProfitDo) FindInBatches(result *[]*model.FbReportProfit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbReportProfitDo) Attrs(attrs ...field.AssignExpr) IFbReportProfitDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbReportProfitDo) Assign(attrs ...field.AssignExpr) IFbReportProfitDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbReportProfitDo) Joins(fields ...field.RelationField) IFbReportProfitDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbReportProfitDo) Preload(fields ...field.RelationField) IFbReportProfitDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbReportProfitDo) FirstOrInit() (*model.FbReportProfit, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportProfit), nil
	}
}

func (f fbReportProfitDo) FirstOrCreate() (*model.FbReportProfit, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportProfit), nil
	}
}

func (f fbReportProfitDo) FindByPage(offset int, limit int) (result []*model.FbReportProfit, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbReportProfitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbReportProfitDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbReportProfitDo) Delete(models ...*model.FbReportProfit) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbReportProfitDo) withDO(do gen.Dao) *fbReportProfitDo {
	f.DO = *do.(*gen.DO)
	return f
}
