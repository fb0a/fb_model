// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbFinanceAccount(db *gorm.DB, opts ...gen.DOOption) fbFinanceAccount {
	_fbFinanceAccount := fbFinanceAccount{}

	_fbFinanceAccount.fbFinanceAccountDo.UseDB(db, opts...)
	_fbFinanceAccount.fbFinanceAccountDo.UseModel(&model.FbFinanceAccount{})

	tableName := _fbFinanceAccount.fbFinanceAccountDo.TableName()
	_fbFinanceAccount.ALL = field.NewAsterisk(tableName)
	_fbFinanceAccount.ID = field.NewInt64(tableName, "id")
	_fbFinanceAccount.UID = field.NewInt64(tableName, "uid")
	_fbFinanceAccount.Username = field.NewString(tableName, "username")
	_fbFinanceAccount.Account = field.NewString(tableName, "account")
	_fbFinanceAccount.ChannelName = field.NewString(tableName, "channel_name")
	_fbFinanceAccount.Currency = field.NewString(tableName, "currency")
	_fbFinanceAccount.FirstName = field.NewString(tableName, "first_name")
	_fbFinanceAccount.MiddleName = field.NewString(tableName, "middle_name")
	_fbFinanceAccount.LastName = field.NewString(tableName, "last_name")
	_fbFinanceAccount.TotalOut = field.NewFloat64(tableName, "total_out")
	_fbFinanceAccount.Status = field.NewInt32(tableName, "status")
	_fbFinanceAccount.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbFinanceAccount.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbFinanceAccount.LastUsedAt = field.NewInt64(tableName, "last_used_at")
	_fbFinanceAccount.UsedTimes = field.NewInt32(tableName, "used_times")

	_fbFinanceAccount.fillFieldMap()

	return _fbFinanceAccount
}

// fbFinanceAccount 会员账户表
type fbFinanceAccount struct {
	fbFinanceAccountDo

	ALL         field.Asterisk
	ID          field.Int64
	UID         field.Int64
	Username    field.String  // 用户名
	Account     field.String  // 帐号
	ChannelName field.String  // 通道名
	Currency    field.String  // 币种
	FirstName   field.String  // first_name
	MiddleName  field.String  // middle_name
	LastName    field.String  // last_name
	TotalOut    field.Float64 // 总共提款金额
	Status      field.Int32   // 状态
	CreatedAt   field.Int64   // 创建时间
	UpdatedAt   field.Int64   // 创建时间
	LastUsedAt  field.Int64   // 最后使用时间
	UsedTimes   field.Int32   // 使用次数

	fieldMap map[string]field.Expr
}

func (f fbFinanceAccount) Table(newTableName string) *fbFinanceAccount {
	f.fbFinanceAccountDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbFinanceAccount) As(alias string) *fbFinanceAccount {
	f.fbFinanceAccountDo.DO = *(f.fbFinanceAccountDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbFinanceAccount) updateTableName(table string) *fbFinanceAccount {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.Account = field.NewString(table, "account")
	f.ChannelName = field.NewString(table, "channel_name")
	f.Currency = field.NewString(table, "currency")
	f.FirstName = field.NewString(table, "first_name")
	f.MiddleName = field.NewString(table, "middle_name")
	f.LastName = field.NewString(table, "last_name")
	f.TotalOut = field.NewFloat64(table, "total_out")
	f.Status = field.NewInt32(table, "status")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.LastUsedAt = field.NewInt64(table, "last_used_at")
	f.UsedTimes = field.NewInt32(table, "used_times")

	f.fillFieldMap()

	return f
}

func (f *fbFinanceAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbFinanceAccount) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["account"] = f.Account
	f.fieldMap["channel_name"] = f.ChannelName
	f.fieldMap["currency"] = f.Currency
	f.fieldMap["first_name"] = f.FirstName
	f.fieldMap["middle_name"] = f.MiddleName
	f.fieldMap["last_name"] = f.LastName
	f.fieldMap["total_out"] = f.TotalOut
	f.fieldMap["status"] = f.Status
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["last_used_at"] = f.LastUsedAt
	f.fieldMap["used_times"] = f.UsedTimes
}

func (f fbFinanceAccount) clone(db *gorm.DB) fbFinanceAccount {
	f.fbFinanceAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbFinanceAccount) replaceDB(db *gorm.DB) fbFinanceAccount {
	f.fbFinanceAccountDo.ReplaceDB(db)
	return f
}

type fbFinanceAccountDo struct{ gen.DO }

type IFbFinanceAccountDo interface {
	gen.SubQuery
	Debug() IFbFinanceAccountDo
	WithContext(ctx context.Context) IFbFinanceAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbFinanceAccountDo
	WriteDB() IFbFinanceAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbFinanceAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbFinanceAccountDo
	Not(conds ...gen.Condition) IFbFinanceAccountDo
	Or(conds ...gen.Condition) IFbFinanceAccountDo
	Select(conds ...field.Expr) IFbFinanceAccountDo
	Where(conds ...gen.Condition) IFbFinanceAccountDo
	Order(conds ...field.Expr) IFbFinanceAccountDo
	Distinct(cols ...field.Expr) IFbFinanceAccountDo
	Omit(cols ...field.Expr) IFbFinanceAccountDo
	Join(table schema.Tabler, on ...field.Expr) IFbFinanceAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbFinanceAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbFinanceAccountDo
	Group(cols ...field.Expr) IFbFinanceAccountDo
	Having(conds ...gen.Condition) IFbFinanceAccountDo
	Limit(limit int) IFbFinanceAccountDo
	Offset(offset int) IFbFinanceAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbFinanceAccountDo
	Unscoped() IFbFinanceAccountDo
	Create(values ...*model.FbFinanceAccount) error
	CreateInBatches(values []*model.FbFinanceAccount, batchSize int) error
	Save(values ...*model.FbFinanceAccount) error
	First() (*model.FbFinanceAccount, error)
	Take() (*model.FbFinanceAccount, error)
	Last() (*model.FbFinanceAccount, error)
	Find() ([]*model.FbFinanceAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbFinanceAccount, err error)
	FindInBatches(result *[]*model.FbFinanceAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbFinanceAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbFinanceAccountDo
	Assign(attrs ...field.AssignExpr) IFbFinanceAccountDo
	Joins(fields ...field.RelationField) IFbFinanceAccountDo
	Preload(fields ...field.RelationField) IFbFinanceAccountDo
	FirstOrInit() (*model.FbFinanceAccount, error)
	FirstOrCreate() (*model.FbFinanceAccount, error)
	FindByPage(offset int, limit int) (result []*model.FbFinanceAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbFinanceAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbFinanceAccountDo) Debug() IFbFinanceAccountDo {
	return f.withDO(f.DO.Debug())
}

func (f fbFinanceAccountDo) WithContext(ctx context.Context) IFbFinanceAccountDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbFinanceAccountDo) ReadDB() IFbFinanceAccountDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbFinanceAccountDo) WriteDB() IFbFinanceAccountDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbFinanceAccountDo) Session(config *gorm.Session) IFbFinanceAccountDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbFinanceAccountDo) Clauses(conds ...clause.Expression) IFbFinanceAccountDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbFinanceAccountDo) Returning(value interface{}, columns ...string) IFbFinanceAccountDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbFinanceAccountDo) Not(conds ...gen.Condition) IFbFinanceAccountDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbFinanceAccountDo) Or(conds ...gen.Condition) IFbFinanceAccountDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbFinanceAccountDo) Select(conds ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbFinanceAccountDo) Where(conds ...gen.Condition) IFbFinanceAccountDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbFinanceAccountDo) Order(conds ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbFinanceAccountDo) Distinct(cols ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbFinanceAccountDo) Omit(cols ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbFinanceAccountDo) Join(table schema.Tabler, on ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbFinanceAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbFinanceAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbFinanceAccountDo) Group(cols ...field.Expr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbFinanceAccountDo) Having(conds ...gen.Condition) IFbFinanceAccountDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbFinanceAccountDo) Limit(limit int) IFbFinanceAccountDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbFinanceAccountDo) Offset(offset int) IFbFinanceAccountDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbFinanceAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbFinanceAccountDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbFinanceAccountDo) Unscoped() IFbFinanceAccountDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbFinanceAccountDo) Create(values ...*model.FbFinanceAccount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbFinanceAccountDo) CreateInBatches(values []*model.FbFinanceAccount, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbFinanceAccountDo) Save(values ...*model.FbFinanceAccount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbFinanceAccountDo) First() (*model.FbFinanceAccount, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbFinanceAccount), nil
	}
}

func (f fbFinanceAccountDo) Take() (*model.FbFinanceAccount, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbFinanceAccount), nil
	}
}

func (f fbFinanceAccountDo) Last() (*model.FbFinanceAccount, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbFinanceAccount), nil
	}
}

func (f fbFinanceAccountDo) Find() ([]*model.FbFinanceAccount, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbFinanceAccount), err
}

func (f fbFinanceAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbFinanceAccount, err error) {
	buf := make([]*model.FbFinanceAccount, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbFinanceAccountDo) FindInBatches(result *[]*model.FbFinanceAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbFinanceAccountDo) Attrs(attrs ...field.AssignExpr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbFinanceAccountDo) Assign(attrs ...field.AssignExpr) IFbFinanceAccountDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbFinanceAccountDo) Joins(fields ...field.RelationField) IFbFinanceAccountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbFinanceAccountDo) Preload(fields ...field.RelationField) IFbFinanceAccountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbFinanceAccountDo) FirstOrInit() (*model.FbFinanceAccount, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbFinanceAccount), nil
	}
}

func (f fbFinanceAccountDo) FirstOrCreate() (*model.FbFinanceAccount, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbFinanceAccount), nil
	}
}

func (f fbFinanceAccountDo) FindByPage(offset int, limit int) (result []*model.FbFinanceAccount, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbFinanceAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbFinanceAccountDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbFinanceAccountDo) Delete(models ...*model.FbFinanceAccount) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbFinanceAccountDo) withDO(do gen.Dao) *fbFinanceAccountDo {
	f.DO = *do.(*gen.DO)
	return f
}
