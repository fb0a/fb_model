// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMembersCopy1(db *gorm.DB, opts ...gen.DOOption) fbMembersCopy1 {
	_fbMembersCopy1 := fbMembersCopy1{}

	_fbMembersCopy1.fbMembersCopy1Do.UseDB(db, opts...)
	_fbMembersCopy1.fbMembersCopy1Do.UseModel(&model.FbMembersCopy1{})

	tableName := _fbMembersCopy1.fbMembersCopy1Do.TableName()
	_fbMembersCopy1.ALL = field.NewAsterisk(tableName)
	_fbMembersCopy1.UID = field.NewInt64(tableName, "uid")
	_fbMembersCopy1.Username = field.NewString(tableName, "username")
	_fbMembersCopy1.WithdrawTotal = field.NewFloat64(tableName, "withdraw_total")
	_fbMembersCopy1.WithdrawCount = field.NewInt32(tableName, "withdraw_count")
	_fbMembersCopy1.DepositTotal = field.NewFloat64(tableName, "deposit_total")
	_fbMembersCopy1.DepositCount = field.NewInt32(tableName, "deposit_count")
	_fbMembersCopy1.Email = field.NewString(tableName, "email")
	_fbMembersCopy1.EmailCheckState = field.NewInt32(tableName, "email_check_state")
	_fbMembersCopy1.CountryCode = field.NewString(tableName, "country_code")
	_fbMembersCopy1.Phone = field.NewString(tableName, "phone")
	_fbMembersCopy1.PhoneCheckState = field.NewInt32(tableName, "phone_check_state")
	_fbMembersCopy1.Avatar = field.NewString(tableName, "avatar")
	_fbMembersCopy1.Gender = field.NewString(tableName, "gender")
	_fbMembersCopy1.Password = field.NewString(tableName, "password")
	_fbMembersCopy1.OauthSecrets = field.NewString(tableName, "oauth_secrets")
	_fbMembersCopy1.ReferralCode = field.NewString(tableName, "referral_code")
	_fbMembersCopy1.Tags = field.NewString(tableName, "tags")
	_fbMembersCopy1.Vip = field.NewInt32(tableName, "vip")
	_fbMembersCopy1.ParentUID = field.NewString(tableName, "parent_uid")
	_fbMembersCopy1.ParentName = field.NewString(tableName, "parent_name")
	_fbMembersCopy1.Tester = field.NewInt32(tableName, "tester")
	_fbMembersCopy1.DeviceNumber = field.NewString(tableName, "device_number")
	_fbMembersCopy1.State = field.NewInt32(tableName, "state")
	_fbMembersCopy1.Note = field.NewString(tableName, "note")
	_fbMembersCopy1.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbMembersCopy1.CreatedTime = field.NewTime(tableName, "created_time")
	_fbMembersCopy1.CreatedIP = field.NewString(tableName, "created_ip")
	_fbMembersCopy1.RegIP = field.NewString(tableName, "reg_ip")
	_fbMembersCopy1.RegDevice = field.NewInt32(tableName, "reg_device")
	_fbMembersCopy1.RegDeviceNo = field.NewString(tableName, "reg_device_no")
	_fbMembersCopy1.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_fbMembersCopy1.LastLoginAt = field.NewInt64(tableName, "last_login_at")
	_fbMembersCopy1.LastLoginDevice = field.NewInt32(tableName, "last_login_device")
	_fbMembersCopy1.NickName = field.NewString(tableName, "nick_name")
	_fbMembersCopy1.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbMembersCopy1.ThirdParty = field.NewString(tableName, "third_party")
	_fbMembersCopy1.RealUsername = field.NewString(tableName, "real_username")
	_fbMembersCopy1.Birthday = field.NewString(tableName, "birthday")
	_fbMembersCopy1.FirstDeposit = field.NewInt64(tableName, "first_deposit")
	_fbMembersCopy1.SecondDeposit = field.NewInt64(tableName, "second_deposit")
	_fbMembersCopy1.ThirdDeposit = field.NewInt64(tableName, "third_deposit")
	_fbMembersCopy1.Source = field.NewString(tableName, "source")
	_fbMembersCopy1.Balance = field.NewFloat64(tableName, "balance")
	_fbMembersCopy1.KycStatus = field.NewInt32(tableName, "kyc_status")

	_fbMembersCopy1.fillFieldMap()

	return _fbMembersCopy1
}

// fbMembersCopy1 会员表
type fbMembersCopy1 struct {
	fbMembersCopy1Do

	ALL             field.Asterisk
	UID             field.Int64
	Username        field.String  // 用户名
	WithdrawTotal   field.Float64 // 提现总数
	WithdrawCount   field.Int32   // 提现次数
	DepositTotal    field.Float64 // 存款总额
	DepositCount    field.Int32   // 存款次数
	Email           field.String
	EmailCheckState field.Int32  // 邮箱是否验证1=已验证,2=未验证
	CountryCode     field.String // 国家区号
	Phone           field.String // 手机号
	PhoneCheckState field.Int32  // 手机号是否验证1=已验证,2=未验证
	Avatar          field.String // 头像图片地址
	Gender          field.String // 性别
	Password        field.String // 密码
	OauthSecrets    field.String // 授权密码
	ReferralCode    field.String // 推荐码
	Tags            field.String // 标签
	Vip             field.Int32  // vip等级
	ParentUID       field.String // 父级代理id
	ParentName      field.String // 父级代理名
	Tester          field.Int32  // 1 正式账号 2 测试帐号
	DeviceNumber    field.String // 登录设备号
	State           field.Int32  // 会员状态，0=正常 1=停用
	Note            field.String // 账号备注
	CreatedAt       field.Int64  // 创建时间
	CreatedTime     field.Time   // 分区时间戳(等于created_at)
	CreatedIP       field.String // 创建ip
	RegIP           field.String // 注册IP
	RegDevice       field.Int32  // 注册设备
	RegDeviceNo     field.String // 注册设备号
	LastLoginIP     field.String // 登陆IP
	LastLoginAt     field.Int64  // 登陆时间
	LastLoginDevice field.Int32  // 登陆设备
	NickName        field.String
	UpdatedAt       field.Int64
	ThirdParty      field.String
	RealUsername    field.String
	Birthday        field.String // 生日
	FirstDeposit    field.Int64
	SecondDeposit   field.Int64
	ThirdDeposit    field.Int64
	Source          field.String
	Balance         field.Float64 // 余额
	KycStatus       field.Int32   // 1.Basic Account,2.Basic KYC,3.Under Review,4.Reject KYC,5.Fully KYC,6.Frozen,7.Block,8.Test Account

	fieldMap map[string]field.Expr
}

func (f fbMembersCopy1) Table(newTableName string) *fbMembersCopy1 {
	f.fbMembersCopy1Do.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMembersCopy1) As(alias string) *fbMembersCopy1 {
	f.fbMembersCopy1Do.DO = *(f.fbMembersCopy1Do.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMembersCopy1) updateTableName(table string) *fbMembersCopy1 {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.WithdrawTotal = field.NewFloat64(table, "withdraw_total")
	f.WithdrawCount = field.NewInt32(table, "withdraw_count")
	f.DepositTotal = field.NewFloat64(table, "deposit_total")
	f.DepositCount = field.NewInt32(table, "deposit_count")
	f.Email = field.NewString(table, "email")
	f.EmailCheckState = field.NewInt32(table, "email_check_state")
	f.CountryCode = field.NewString(table, "country_code")
	f.Phone = field.NewString(table, "phone")
	f.PhoneCheckState = field.NewInt32(table, "phone_check_state")
	f.Avatar = field.NewString(table, "avatar")
	f.Gender = field.NewString(table, "gender")
	f.Password = field.NewString(table, "password")
	f.OauthSecrets = field.NewString(table, "oauth_secrets")
	f.ReferralCode = field.NewString(table, "referral_code")
	f.Tags = field.NewString(table, "tags")
	f.Vip = field.NewInt32(table, "vip")
	f.ParentUID = field.NewString(table, "parent_uid")
	f.ParentName = field.NewString(table, "parent_name")
	f.Tester = field.NewInt32(table, "tester")
	f.DeviceNumber = field.NewString(table, "device_number")
	f.State = field.NewInt32(table, "state")
	f.Note = field.NewString(table, "note")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.CreatedTime = field.NewTime(table, "created_time")
	f.CreatedIP = field.NewString(table, "created_ip")
	f.RegIP = field.NewString(table, "reg_ip")
	f.RegDevice = field.NewInt32(table, "reg_device")
	f.RegDeviceNo = field.NewString(table, "reg_device_no")
	f.LastLoginIP = field.NewString(table, "last_login_ip")
	f.LastLoginAt = field.NewInt64(table, "last_login_at")
	f.LastLoginDevice = field.NewInt32(table, "last_login_device")
	f.NickName = field.NewString(table, "nick_name")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.ThirdParty = field.NewString(table, "third_party")
	f.RealUsername = field.NewString(table, "real_username")
	f.Birthday = field.NewString(table, "birthday")
	f.FirstDeposit = field.NewInt64(table, "first_deposit")
	f.SecondDeposit = field.NewInt64(table, "second_deposit")
	f.ThirdDeposit = field.NewInt64(table, "third_deposit")
	f.Source = field.NewString(table, "source")
	f.Balance = field.NewFloat64(table, "balance")
	f.KycStatus = field.NewInt32(table, "kyc_status")

	f.fillFieldMap()

	return f
}

func (f *fbMembersCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMembersCopy1) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 44)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["withdraw_total"] = f.WithdrawTotal
	f.fieldMap["withdraw_count"] = f.WithdrawCount
	f.fieldMap["deposit_total"] = f.DepositTotal
	f.fieldMap["deposit_count"] = f.DepositCount
	f.fieldMap["email"] = f.Email
	f.fieldMap["email_check_state"] = f.EmailCheckState
	f.fieldMap["country_code"] = f.CountryCode
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["phone_check_state"] = f.PhoneCheckState
	f.fieldMap["avatar"] = f.Avatar
	f.fieldMap["gender"] = f.Gender
	f.fieldMap["password"] = f.Password
	f.fieldMap["oauth_secrets"] = f.OauthSecrets
	f.fieldMap["referral_code"] = f.ReferralCode
	f.fieldMap["tags"] = f.Tags
	f.fieldMap["vip"] = f.Vip
	f.fieldMap["parent_uid"] = f.ParentUID
	f.fieldMap["parent_name"] = f.ParentName
	f.fieldMap["tester"] = f.Tester
	f.fieldMap["device_number"] = f.DeviceNumber
	f.fieldMap["state"] = f.State
	f.fieldMap["note"] = f.Note
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["created_time"] = f.CreatedTime
	f.fieldMap["created_ip"] = f.CreatedIP
	f.fieldMap["reg_ip"] = f.RegIP
	f.fieldMap["reg_device"] = f.RegDevice
	f.fieldMap["reg_device_no"] = f.RegDeviceNo
	f.fieldMap["last_login_ip"] = f.LastLoginIP
	f.fieldMap["last_login_at"] = f.LastLoginAt
	f.fieldMap["last_login_device"] = f.LastLoginDevice
	f.fieldMap["nick_name"] = f.NickName
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["third_party"] = f.ThirdParty
	f.fieldMap["real_username"] = f.RealUsername
	f.fieldMap["birthday"] = f.Birthday
	f.fieldMap["first_deposit"] = f.FirstDeposit
	f.fieldMap["second_deposit"] = f.SecondDeposit
	f.fieldMap["third_deposit"] = f.ThirdDeposit
	f.fieldMap["source"] = f.Source
	f.fieldMap["balance"] = f.Balance
	f.fieldMap["kyc_status"] = f.KycStatus
}

func (f fbMembersCopy1) clone(db *gorm.DB) fbMembersCopy1 {
	f.fbMembersCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMembersCopy1) replaceDB(db *gorm.DB) fbMembersCopy1 {
	f.fbMembersCopy1Do.ReplaceDB(db)
	return f
}

type fbMembersCopy1Do struct{ gen.DO }

type IFbMembersCopy1Do interface {
	gen.SubQuery
	Debug() IFbMembersCopy1Do
	WithContext(ctx context.Context) IFbMembersCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMembersCopy1Do
	WriteDB() IFbMembersCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMembersCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMembersCopy1Do
	Not(conds ...gen.Condition) IFbMembersCopy1Do
	Or(conds ...gen.Condition) IFbMembersCopy1Do
	Select(conds ...field.Expr) IFbMembersCopy1Do
	Where(conds ...gen.Condition) IFbMembersCopy1Do
	Order(conds ...field.Expr) IFbMembersCopy1Do
	Distinct(cols ...field.Expr) IFbMembersCopy1Do
	Omit(cols ...field.Expr) IFbMembersCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IFbMembersCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersCopy1Do
	Group(cols ...field.Expr) IFbMembersCopy1Do
	Having(conds ...gen.Condition) IFbMembersCopy1Do
	Limit(limit int) IFbMembersCopy1Do
	Offset(offset int) IFbMembersCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersCopy1Do
	Unscoped() IFbMembersCopy1Do
	Create(values ...*model.FbMembersCopy1) error
	CreateInBatches(values []*model.FbMembersCopy1, batchSize int) error
	Save(values ...*model.FbMembersCopy1) error
	First() (*model.FbMembersCopy1, error)
	Take() (*model.FbMembersCopy1, error)
	Last() (*model.FbMembersCopy1, error)
	Find() ([]*model.FbMembersCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersCopy1, err error)
	FindInBatches(result *[]*model.FbMembersCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMembersCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMembersCopy1Do
	Assign(attrs ...field.AssignExpr) IFbMembersCopy1Do
	Joins(fields ...field.RelationField) IFbMembersCopy1Do
	Preload(fields ...field.RelationField) IFbMembersCopy1Do
	FirstOrInit() (*model.FbMembersCopy1, error)
	FirstOrCreate() (*model.FbMembersCopy1, error)
	FindByPage(offset int, limit int) (result []*model.FbMembersCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMembersCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMembersCopy1Do) Debug() IFbMembersCopy1Do {
	return f.withDO(f.DO.Debug())
}

func (f fbMembersCopy1Do) WithContext(ctx context.Context) IFbMembersCopy1Do {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMembersCopy1Do) ReadDB() IFbMembersCopy1Do {
	return f.Clauses(dbresolver.Read)
}

func (f fbMembersCopy1Do) WriteDB() IFbMembersCopy1Do {
	return f.Clauses(dbresolver.Write)
}

func (f fbMembersCopy1Do) Session(config *gorm.Session) IFbMembersCopy1Do {
	return f.withDO(f.DO.Session(config))
}

func (f fbMembersCopy1Do) Clauses(conds ...clause.Expression) IFbMembersCopy1Do {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMembersCopy1Do) Returning(value interface{}, columns ...string) IFbMembersCopy1Do {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMembersCopy1Do) Not(conds ...gen.Condition) IFbMembersCopy1Do {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMembersCopy1Do) Or(conds ...gen.Condition) IFbMembersCopy1Do {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMembersCopy1Do) Select(conds ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMembersCopy1Do) Where(conds ...gen.Condition) IFbMembersCopy1Do {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMembersCopy1Do) Order(conds ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMembersCopy1Do) Distinct(cols ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMembersCopy1Do) Omit(cols ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMembersCopy1Do) Join(table schema.Tabler, on ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMembersCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMembersCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMembersCopy1Do) Group(cols ...field.Expr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMembersCopy1Do) Having(conds ...gen.Condition) IFbMembersCopy1Do {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMembersCopy1Do) Limit(limit int) IFbMembersCopy1Do {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMembersCopy1Do) Offset(offset int) IFbMembersCopy1Do {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMembersCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersCopy1Do {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMembersCopy1Do) Unscoped() IFbMembersCopy1Do {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMembersCopy1Do) Create(values ...*model.FbMembersCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMembersCopy1Do) CreateInBatches(values []*model.FbMembersCopy1, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMembersCopy1Do) Save(values ...*model.FbMembersCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMembersCopy1Do) First() (*model.FbMembersCopy1, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersCopy1), nil
	}
}

func (f fbMembersCopy1Do) Take() (*model.FbMembersCopy1, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersCopy1), nil
	}
}

func (f fbMembersCopy1Do) Last() (*model.FbMembersCopy1, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersCopy1), nil
	}
}

func (f fbMembersCopy1Do) Find() ([]*model.FbMembersCopy1, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMembersCopy1), err
}

func (f fbMembersCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersCopy1, err error) {
	buf := make([]*model.FbMembersCopy1, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMembersCopy1Do) FindInBatches(result *[]*model.FbMembersCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMembersCopy1Do) Attrs(attrs ...field.AssignExpr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMembersCopy1Do) Assign(attrs ...field.AssignExpr) IFbMembersCopy1Do {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMembersCopy1Do) Joins(fields ...field.RelationField) IFbMembersCopy1Do {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMembersCopy1Do) Preload(fields ...field.RelationField) IFbMembersCopy1Do {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMembersCopy1Do) FirstOrInit() (*model.FbMembersCopy1, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersCopy1), nil
	}
}

func (f fbMembersCopy1Do) FirstOrCreate() (*model.FbMembersCopy1, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersCopy1), nil
	}
}

func (f fbMembersCopy1Do) FindByPage(offset int, limit int) (result []*model.FbMembersCopy1, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMembersCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMembersCopy1Do) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMembersCopy1Do) Delete(models ...*model.FbMembersCopy1) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMembersCopy1Do) withDO(do gen.Dao) *fbMembersCopy1Do {
	f.DO = *do.(*gen.DO)
	return f
}
