// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbReportMemberGtTotal(db *gorm.DB, opts ...gen.DOOption) fbReportMemberGtTotal {
	_fbReportMemberGtTotal := fbReportMemberGtTotal{}

	_fbReportMemberGtTotal.fbReportMemberGtTotalDo.UseDB(db, opts...)
	_fbReportMemberGtTotal.fbReportMemberGtTotalDo.UseModel(&model.FbReportMemberGtTotal{})

	tableName := _fbReportMemberGtTotal.fbReportMemberGtTotalDo.TableName()
	_fbReportMemberGtTotal.ALL = field.NewAsterisk(tableName)
	_fbReportMemberGtTotal.UID = field.NewInt64(tableName, "uid")
	_fbReportMemberGtTotal.Gt = field.NewInt32(tableName, "gt")
	_fbReportMemberGtTotal.Phone = field.NewString(tableName, "phone")
	_fbReportMemberGtTotal.Username = field.NewString(tableName, "username")
	_fbReportMemberGtTotal.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_fbReportMemberGtTotal.SettleAmount = field.NewFloat64(tableName, "settle_amount")
	_fbReportMemberGtTotal.Ggr = field.NewFloat64(tableName, "ggr")
	_fbReportMemberGtTotal.CreatedAt = field.NewInt64(tableName, "created_at")

	_fbReportMemberGtTotal.fillFieldMap()

	return _fbReportMemberGtTotal
}

// fbReportMemberGtTotal 会员游戏分类总报表
type fbReportMemberGtTotal struct {
	fbReportMemberGtTotalDo

	ALL            field.Asterisk
	UID            field.Int64
	Gt             field.Int32   // 游戏类型
	Phone          field.String  // 手机号
	Username       field.String  // 用户名
	ValidBetAmount field.Float64 // 投注额
	SettleAmount   field.Float64 // 派彩额
	Ggr            field.Float64 // GGR
	CreatedAt      field.Int64

	fieldMap map[string]field.Expr
}

func (f fbReportMemberGtTotal) Table(newTableName string) *fbReportMemberGtTotal {
	f.fbReportMemberGtTotalDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbReportMemberGtTotal) As(alias string) *fbReportMemberGtTotal {
	f.fbReportMemberGtTotalDo.DO = *(f.fbReportMemberGtTotalDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbReportMemberGtTotal) updateTableName(table string) *fbReportMemberGtTotal {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewInt64(table, "uid")
	f.Gt = field.NewInt32(table, "gt")
	f.Phone = field.NewString(table, "phone")
	f.Username = field.NewString(table, "username")
	f.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	f.SettleAmount = field.NewFloat64(table, "settle_amount")
	f.Ggr = field.NewFloat64(table, "ggr")
	f.CreatedAt = field.NewInt64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbReportMemberGtTotal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbReportMemberGtTotal) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["gt"] = f.Gt
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["username"] = f.Username
	f.fieldMap["valid_bet_amount"] = f.ValidBetAmount
	f.fieldMap["settle_amount"] = f.SettleAmount
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbReportMemberGtTotal) clone(db *gorm.DB) fbReportMemberGtTotal {
	f.fbReportMemberGtTotalDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbReportMemberGtTotal) replaceDB(db *gorm.DB) fbReportMemberGtTotal {
	f.fbReportMemberGtTotalDo.ReplaceDB(db)
	return f
}

type fbReportMemberGtTotalDo struct{ gen.DO }

type IFbReportMemberGtTotalDo interface {
	gen.SubQuery
	Debug() IFbReportMemberGtTotalDo
	WithContext(ctx context.Context) IFbReportMemberGtTotalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbReportMemberGtTotalDo
	WriteDB() IFbReportMemberGtTotalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbReportMemberGtTotalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbReportMemberGtTotalDo
	Not(conds ...gen.Condition) IFbReportMemberGtTotalDo
	Or(conds ...gen.Condition) IFbReportMemberGtTotalDo
	Select(conds ...field.Expr) IFbReportMemberGtTotalDo
	Where(conds ...gen.Condition) IFbReportMemberGtTotalDo
	Order(conds ...field.Expr) IFbReportMemberGtTotalDo
	Distinct(cols ...field.Expr) IFbReportMemberGtTotalDo
	Omit(cols ...field.Expr) IFbReportMemberGtTotalDo
	Join(table schema.Tabler, on ...field.Expr) IFbReportMemberGtTotalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberGtTotalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberGtTotalDo
	Group(cols ...field.Expr) IFbReportMemberGtTotalDo
	Having(conds ...gen.Condition) IFbReportMemberGtTotalDo
	Limit(limit int) IFbReportMemberGtTotalDo
	Offset(offset int) IFbReportMemberGtTotalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberGtTotalDo
	Unscoped() IFbReportMemberGtTotalDo
	Create(values ...*model.FbReportMemberGtTotal) error
	CreateInBatches(values []*model.FbReportMemberGtTotal, batchSize int) error
	Save(values ...*model.FbReportMemberGtTotal) error
	First() (*model.FbReportMemberGtTotal, error)
	Take() (*model.FbReportMemberGtTotal, error)
	Last() (*model.FbReportMemberGtTotal, error)
	Find() ([]*model.FbReportMemberGtTotal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMemberGtTotal, err error)
	FindInBatches(result *[]*model.FbReportMemberGtTotal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbReportMemberGtTotal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbReportMemberGtTotalDo
	Assign(attrs ...field.AssignExpr) IFbReportMemberGtTotalDo
	Joins(fields ...field.RelationField) IFbReportMemberGtTotalDo
	Preload(fields ...field.RelationField) IFbReportMemberGtTotalDo
	FirstOrInit() (*model.FbReportMemberGtTotal, error)
	FirstOrCreate() (*model.FbReportMemberGtTotal, error)
	FindByPage(offset int, limit int) (result []*model.FbReportMemberGtTotal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbReportMemberGtTotalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbReportMemberGtTotalDo) Debug() IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Debug())
}

func (f fbReportMemberGtTotalDo) WithContext(ctx context.Context) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbReportMemberGtTotalDo) ReadDB() IFbReportMemberGtTotalDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbReportMemberGtTotalDo) WriteDB() IFbReportMemberGtTotalDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbReportMemberGtTotalDo) Session(config *gorm.Session) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbReportMemberGtTotalDo) Clauses(conds ...clause.Expression) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbReportMemberGtTotalDo) Returning(value interface{}, columns ...string) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbReportMemberGtTotalDo) Not(conds ...gen.Condition) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbReportMemberGtTotalDo) Or(conds ...gen.Condition) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbReportMemberGtTotalDo) Select(conds ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbReportMemberGtTotalDo) Where(conds ...gen.Condition) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbReportMemberGtTotalDo) Order(conds ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbReportMemberGtTotalDo) Distinct(cols ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbReportMemberGtTotalDo) Omit(cols ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbReportMemberGtTotalDo) Join(table schema.Tabler, on ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbReportMemberGtTotalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbReportMemberGtTotalDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbReportMemberGtTotalDo) Group(cols ...field.Expr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbReportMemberGtTotalDo) Having(conds ...gen.Condition) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbReportMemberGtTotalDo) Limit(limit int) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbReportMemberGtTotalDo) Offset(offset int) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbReportMemberGtTotalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbReportMemberGtTotalDo) Unscoped() IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbReportMemberGtTotalDo) Create(values ...*model.FbReportMemberGtTotal) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbReportMemberGtTotalDo) CreateInBatches(values []*model.FbReportMemberGtTotal, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbReportMemberGtTotalDo) Save(values ...*model.FbReportMemberGtTotal) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbReportMemberGtTotalDo) First() (*model.FbReportMemberGtTotal, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberGtTotal), nil
	}
}

func (f fbReportMemberGtTotalDo) Take() (*model.FbReportMemberGtTotal, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberGtTotal), nil
	}
}

func (f fbReportMemberGtTotalDo) Last() (*model.FbReportMemberGtTotal, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberGtTotal), nil
	}
}

func (f fbReportMemberGtTotalDo) Find() ([]*model.FbReportMemberGtTotal, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbReportMemberGtTotal), err
}

func (f fbReportMemberGtTotalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMemberGtTotal, err error) {
	buf := make([]*model.FbReportMemberGtTotal, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbReportMemberGtTotalDo) FindInBatches(result *[]*model.FbReportMemberGtTotal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbReportMemberGtTotalDo) Attrs(attrs ...field.AssignExpr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbReportMemberGtTotalDo) Assign(attrs ...field.AssignExpr) IFbReportMemberGtTotalDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbReportMemberGtTotalDo) Joins(fields ...field.RelationField) IFbReportMemberGtTotalDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbReportMemberGtTotalDo) Preload(fields ...field.RelationField) IFbReportMemberGtTotalDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbReportMemberGtTotalDo) FirstOrInit() (*model.FbReportMemberGtTotal, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberGtTotal), nil
	}
}

func (f fbReportMemberGtTotalDo) FirstOrCreate() (*model.FbReportMemberGtTotal, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberGtTotal), nil
	}
}

func (f fbReportMemberGtTotalDo) FindByPage(offset int, limit int) (result []*model.FbReportMemberGtTotal, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbReportMemberGtTotalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbReportMemberGtTotalDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbReportMemberGtTotalDo) Delete(models ...*model.FbReportMemberGtTotal) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbReportMemberGtTotalDo) withDO(do gen.Dao) *fbReportMemberGtTotalDo {
	f.DO = *do.(*gen.DO)
	return f
}
