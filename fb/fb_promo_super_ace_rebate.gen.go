// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPromoSuperAceRebate(db *gorm.DB, opts ...gen.DOOption) fbPromoSuperAceRebate {
	_fbPromoSuperAceRebate := fbPromoSuperAceRebate{}

	_fbPromoSuperAceRebate.fbPromoSuperAceRebateDo.UseDB(db, opts...)
	_fbPromoSuperAceRebate.fbPromoSuperAceRebateDo.UseModel(&model.FbPromoSuperAceRebate{})

	tableName := _fbPromoSuperAceRebate.fbPromoSuperAceRebateDo.TableName()
	_fbPromoSuperAceRebate.ALL = field.NewAsterisk(tableName)
	_fbPromoSuperAceRebate.ID = field.NewUint64(tableName, "id")
	_fbPromoSuperAceRebate.UID = field.NewUint64(tableName, "uid")
	_fbPromoSuperAceRebate.Username = field.NewString(tableName, "username")
	_fbPromoSuperAceRebate.ParentUID = field.NewUint64(tableName, "parent_uid")
	_fbPromoSuperAceRebate.ParentName = field.NewString(tableName, "parent_name")
	_fbPromoSuperAceRebate.Pid = field.NewUint64(tableName, "pid")
	_fbPromoSuperAceRebate.Bonus = field.NewFloat64(tableName, "bonus")
	_fbPromoSuperAceRebate.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_fbPromoSuperAceRebate.NetAmount = field.NewFloat64(tableName, "net_amount")
	_fbPromoSuperAceRebate.State = field.NewInt32(tableName, "state")
	_fbPromoSuperAceRebate.CreatedAt = field.NewUint64(tableName, "created_at")
	_fbPromoSuperAceRebate.UpdatedAt = field.NewUint64(tableName, "updated_at")
	_fbPromoSuperAceRebate.Ymd = field.NewInt32(tableName, "ymd")

	_fbPromoSuperAceRebate.fillFieldMap()

	return _fbPromoSuperAceRebate
}

// fbPromoSuperAceRebate 超级ace返水活动表
type fbPromoSuperAceRebate struct {
	fbPromoSuperAceRebateDo

	ALL        field.Asterisk
	ID         field.Uint64
	UID        field.Uint64  // 用户ID
	Username   field.String  // 用户名
	ParentUID  field.Uint64  // 上级UID
	ParentName field.String  // 上级用户名
	Pid        field.Uint64  // 活动ID
	Bonus      field.Float64 // 奖金金额
	BetAmount  field.Float64 // 投注金额
	NetAmount  field.Float64
	State      field.Int32  // 状态 1:已发送 2:待审核 3:已失效
	CreatedAt  field.Uint64 // 创建时间
	UpdatedAt  field.Uint64 // 更新时间
	Ymd        field.Int32  // 20060102

	fieldMap map[string]field.Expr
}

func (f fbPromoSuperAceRebate) Table(newTableName string) *fbPromoSuperAceRebate {
	f.fbPromoSuperAceRebateDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPromoSuperAceRebate) As(alias string) *fbPromoSuperAceRebate {
	f.fbPromoSuperAceRebateDo.DO = *(f.fbPromoSuperAceRebateDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPromoSuperAceRebate) updateTableName(table string) *fbPromoSuperAceRebate {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint64(table, "id")
	f.UID = field.NewUint64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.ParentUID = field.NewUint64(table, "parent_uid")
	f.ParentName = field.NewString(table, "parent_name")
	f.Pid = field.NewUint64(table, "pid")
	f.Bonus = field.NewFloat64(table, "bonus")
	f.BetAmount = field.NewFloat64(table, "bet_amount")
	f.NetAmount = field.NewFloat64(table, "net_amount")
	f.State = field.NewInt32(table, "state")
	f.CreatedAt = field.NewUint64(table, "created_at")
	f.UpdatedAt = field.NewUint64(table, "updated_at")
	f.Ymd = field.NewInt32(table, "ymd")

	f.fillFieldMap()

	return f
}

func (f *fbPromoSuperAceRebate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPromoSuperAceRebate) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 13)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["parent_uid"] = f.ParentUID
	f.fieldMap["parent_name"] = f.ParentName
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["bonus"] = f.Bonus
	f.fieldMap["bet_amount"] = f.BetAmount
	f.fieldMap["net_amount"] = f.NetAmount
	f.fieldMap["state"] = f.State
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["ymd"] = f.Ymd
}

func (f fbPromoSuperAceRebate) clone(db *gorm.DB) fbPromoSuperAceRebate {
	f.fbPromoSuperAceRebateDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPromoSuperAceRebate) replaceDB(db *gorm.DB) fbPromoSuperAceRebate {
	f.fbPromoSuperAceRebateDo.ReplaceDB(db)
	return f
}

type fbPromoSuperAceRebateDo struct{ gen.DO }

type IFbPromoSuperAceRebateDo interface {
	gen.SubQuery
	Debug() IFbPromoSuperAceRebateDo
	WithContext(ctx context.Context) IFbPromoSuperAceRebateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPromoSuperAceRebateDo
	WriteDB() IFbPromoSuperAceRebateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPromoSuperAceRebateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPromoSuperAceRebateDo
	Not(conds ...gen.Condition) IFbPromoSuperAceRebateDo
	Or(conds ...gen.Condition) IFbPromoSuperAceRebateDo
	Select(conds ...field.Expr) IFbPromoSuperAceRebateDo
	Where(conds ...gen.Condition) IFbPromoSuperAceRebateDo
	Order(conds ...field.Expr) IFbPromoSuperAceRebateDo
	Distinct(cols ...field.Expr) IFbPromoSuperAceRebateDo
	Omit(cols ...field.Expr) IFbPromoSuperAceRebateDo
	Join(table schema.Tabler, on ...field.Expr) IFbPromoSuperAceRebateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoSuperAceRebateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoSuperAceRebateDo
	Group(cols ...field.Expr) IFbPromoSuperAceRebateDo
	Having(conds ...gen.Condition) IFbPromoSuperAceRebateDo
	Limit(limit int) IFbPromoSuperAceRebateDo
	Offset(offset int) IFbPromoSuperAceRebateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoSuperAceRebateDo
	Unscoped() IFbPromoSuperAceRebateDo
	Create(values ...*model.FbPromoSuperAceRebate) error
	CreateInBatches(values []*model.FbPromoSuperAceRebate, batchSize int) error
	Save(values ...*model.FbPromoSuperAceRebate) error
	First() (*model.FbPromoSuperAceRebate, error)
	Take() (*model.FbPromoSuperAceRebate, error)
	Last() (*model.FbPromoSuperAceRebate, error)
	Find() ([]*model.FbPromoSuperAceRebate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoSuperAceRebate, err error)
	FindInBatches(result *[]*model.FbPromoSuperAceRebate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPromoSuperAceRebate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPromoSuperAceRebateDo
	Assign(attrs ...field.AssignExpr) IFbPromoSuperAceRebateDo
	Joins(fields ...field.RelationField) IFbPromoSuperAceRebateDo
	Preload(fields ...field.RelationField) IFbPromoSuperAceRebateDo
	FirstOrInit() (*model.FbPromoSuperAceRebate, error)
	FirstOrCreate() (*model.FbPromoSuperAceRebate, error)
	FindByPage(offset int, limit int) (result []*model.FbPromoSuperAceRebate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPromoSuperAceRebateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPromoSuperAceRebateDo) Debug() IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPromoSuperAceRebateDo) WithContext(ctx context.Context) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPromoSuperAceRebateDo) ReadDB() IFbPromoSuperAceRebateDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPromoSuperAceRebateDo) WriteDB() IFbPromoSuperAceRebateDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPromoSuperAceRebateDo) Session(config *gorm.Session) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPromoSuperAceRebateDo) Clauses(conds ...clause.Expression) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPromoSuperAceRebateDo) Returning(value interface{}, columns ...string) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPromoSuperAceRebateDo) Not(conds ...gen.Condition) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPromoSuperAceRebateDo) Or(conds ...gen.Condition) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPromoSuperAceRebateDo) Select(conds ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPromoSuperAceRebateDo) Where(conds ...gen.Condition) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPromoSuperAceRebateDo) Order(conds ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPromoSuperAceRebateDo) Distinct(cols ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPromoSuperAceRebateDo) Omit(cols ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPromoSuperAceRebateDo) Join(table schema.Tabler, on ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPromoSuperAceRebateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPromoSuperAceRebateDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPromoSuperAceRebateDo) Group(cols ...field.Expr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPromoSuperAceRebateDo) Having(conds ...gen.Condition) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPromoSuperAceRebateDo) Limit(limit int) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPromoSuperAceRebateDo) Offset(offset int) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPromoSuperAceRebateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPromoSuperAceRebateDo) Unscoped() IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPromoSuperAceRebateDo) Create(values ...*model.FbPromoSuperAceRebate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPromoSuperAceRebateDo) CreateInBatches(values []*model.FbPromoSuperAceRebate, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPromoSuperAceRebateDo) Save(values ...*model.FbPromoSuperAceRebate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPromoSuperAceRebateDo) First() (*model.FbPromoSuperAceRebate, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoSuperAceRebate), nil
	}
}

func (f fbPromoSuperAceRebateDo) Take() (*model.FbPromoSuperAceRebate, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoSuperAceRebate), nil
	}
}

func (f fbPromoSuperAceRebateDo) Last() (*model.FbPromoSuperAceRebate, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoSuperAceRebate), nil
	}
}

func (f fbPromoSuperAceRebateDo) Find() ([]*model.FbPromoSuperAceRebate, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPromoSuperAceRebate), err
}

func (f fbPromoSuperAceRebateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoSuperAceRebate, err error) {
	buf := make([]*model.FbPromoSuperAceRebate, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPromoSuperAceRebateDo) FindInBatches(result *[]*model.FbPromoSuperAceRebate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPromoSuperAceRebateDo) Attrs(attrs ...field.AssignExpr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPromoSuperAceRebateDo) Assign(attrs ...field.AssignExpr) IFbPromoSuperAceRebateDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPromoSuperAceRebateDo) Joins(fields ...field.RelationField) IFbPromoSuperAceRebateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPromoSuperAceRebateDo) Preload(fields ...field.RelationField) IFbPromoSuperAceRebateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPromoSuperAceRebateDo) FirstOrInit() (*model.FbPromoSuperAceRebate, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoSuperAceRebate), nil
	}
}

func (f fbPromoSuperAceRebateDo) FirstOrCreate() (*model.FbPromoSuperAceRebate, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoSuperAceRebate), nil
	}
}

func (f fbPromoSuperAceRebateDo) FindByPage(offset int, limit int) (result []*model.FbPromoSuperAceRebate, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPromoSuperAceRebateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPromoSuperAceRebateDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPromoSuperAceRebateDo) Delete(models ...*model.FbPromoSuperAceRebate) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPromoSuperAceRebateDo) withDO(do gen.Dao) *fbPromoSuperAceRebateDo {
	f.DO = *do.(*gen.DO)
	return f
}
