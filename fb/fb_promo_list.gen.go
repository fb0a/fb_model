// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPromoList(db *gorm.DB, opts ...gen.DOOption) fbPromoList {
	_fbPromoList := fbPromoList{}

	_fbPromoList.fbPromoListDo.UseDB(db, opts...)
	_fbPromoList.fbPromoListDo.UseModel(&model.FbPromoList{})

	tableName := _fbPromoList.fbPromoListDo.TableName()
	_fbPromoList.ALL = field.NewAsterisk(tableName)
	_fbPromoList.ID = field.NewInt64(tableName, "id")
	_fbPromoList.Name = field.NewString(tableName, "name")
	_fbPromoList.Ty = field.NewInt32(tableName, "ty")
	_fbPromoList.Display = field.NewInt32(tableName, "display")
	_fbPromoList.DisplayStartAt = field.NewInt64(tableName, "display_start_at")
	_fbPromoList.DisplayEndAt = field.NewInt64(tableName, "display_end_at")
	_fbPromoList.State = field.NewInt32(tableName, "state")
	_fbPromoList.ClientType = field.NewString(tableName, "client_type")
	_fbPromoList.Config = field.NewString(tableName, "config")
	_fbPromoList.IsDelete = field.NewInt32(tableName, "is_delete")
	_fbPromoList.StartAt = field.NewInt64(tableName, "start_at")
	_fbPromoList.EndAt = field.NewInt64(tableName, "end_at")
	_fbPromoList.Multiple = field.NewString(tableName, "multiple")
	_fbPromoList.Recommend = field.NewInt32(tableName, "recommend")
	_fbPromoList.Automatic = field.NewInt32(tableName, "automatic")
	_fbPromoList.Sort = field.NewInt32(tableName, "sort")
	_fbPromoList.Images = field.NewString(tableName, "images")
	_fbPromoList.Summary = field.NewString(tableName, "summary")
	_fbPromoList.DetailImage = field.NewInt32(tableName, "detail_image")
	_fbPromoList.DisplayType = field.NewInt32(tableName, "display_type")
	_fbPromoList.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbPromoList.CreatedUID = field.NewInt64(tableName, "created_uid")
	_fbPromoList.CreatedName = field.NewString(tableName, "created_name")
	_fbPromoList.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbPromoList.UpdatedUID = field.NewInt64(tableName, "updated_uid")
	_fbPromoList.UpdatedName = field.NewString(tableName, "updated_name")

	_fbPromoList.fillFieldMap()

	return _fbPromoList
}

// fbPromoList 活动表
type fbPromoList struct {
	fbPromoListDo

	ALL            field.Asterisk
	ID             field.Int64
	Name           field.String // 活动英文名称
	Ty             field.Int32  // 活动类型 1轮盘 2推广 3抢红包 4负盈利返现 5自定义 8充值
	Display        field.Int32  // 展示状态 1展示 2不展示 3未开始
	DisplayStartAt field.Int64  // 展示时间开始
	DisplayEndAt   field.Int64  // 展示时间结束
	State          field.Int32  // 状态 1开启 2关闭 3未开启
	ClientType     field.String // 领取入口 24web 25，26，27h5(多选json切片)
	Config         field.String // 活动配置
	IsDelete       field.Int32  // 删除 1是2否
	StartAt        field.Int64  // 开始时间
	EndAt          field.Int64  // 结束时间
	Multiple       field.String // 流水倍数
	Recommend      field.Int32  // 推荐状态 1推荐 2不推荐
	Automatic      field.Int32  // 领取方式 1自动 2手动领取
	Sort           field.Int32  // 英语排序
	Images         field.String // 图片(包含背景图和logo)
	Summary        field.String // 简介
	DetailImage    field.Int32  // 详情显示图片1:显示2:不显示
	DisplayType    field.Int32  // // 展示方式 1:内置页面 2:跳转外部链接
	CreatedAt      field.Int64  // 创建时间
	CreatedUID     field.Int64  // 创建人uid
	CreatedName    field.String // 创建人名
	UpdatedAt      field.Int64  // 修改时间
	UpdatedUID     field.Int64  // 修改人uid
	UpdatedName    field.String // 修改人名

	fieldMap map[string]field.Expr
}

func (f fbPromoList) Table(newTableName string) *fbPromoList {
	f.fbPromoListDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPromoList) As(alias string) *fbPromoList {
	f.fbPromoListDo.DO = *(f.fbPromoListDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPromoList) updateTableName(table string) *fbPromoList {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.Ty = field.NewInt32(table, "ty")
	f.Display = field.NewInt32(table, "display")
	f.DisplayStartAt = field.NewInt64(table, "display_start_at")
	f.DisplayEndAt = field.NewInt64(table, "display_end_at")
	f.State = field.NewInt32(table, "state")
	f.ClientType = field.NewString(table, "client_type")
	f.Config = field.NewString(table, "config")
	f.IsDelete = field.NewInt32(table, "is_delete")
	f.StartAt = field.NewInt64(table, "start_at")
	f.EndAt = field.NewInt64(table, "end_at")
	f.Multiple = field.NewString(table, "multiple")
	f.Recommend = field.NewInt32(table, "recommend")
	f.Automatic = field.NewInt32(table, "automatic")
	f.Sort = field.NewInt32(table, "sort")
	f.Images = field.NewString(table, "images")
	f.Summary = field.NewString(table, "summary")
	f.DetailImage = field.NewInt32(table, "detail_image")
	f.DisplayType = field.NewInt32(table, "display_type")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.CreatedUID = field.NewInt64(table, "created_uid")
	f.CreatedName = field.NewString(table, "created_name")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")

	f.fillFieldMap()

	return f
}

func (f *fbPromoList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPromoList) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 26)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["display"] = f.Display
	f.fieldMap["display_start_at"] = f.DisplayStartAt
	f.fieldMap["display_end_at"] = f.DisplayEndAt
	f.fieldMap["state"] = f.State
	f.fieldMap["client_type"] = f.ClientType
	f.fieldMap["config"] = f.Config
	f.fieldMap["is_delete"] = f.IsDelete
	f.fieldMap["start_at"] = f.StartAt
	f.fieldMap["end_at"] = f.EndAt
	f.fieldMap["multiple"] = f.Multiple
	f.fieldMap["recommend"] = f.Recommend
	f.fieldMap["automatic"] = f.Automatic
	f.fieldMap["sort"] = f.Sort
	f.fieldMap["images"] = f.Images
	f.fieldMap["summary"] = f.Summary
	f.fieldMap["detail_image"] = f.DetailImage
	f.fieldMap["display_type"] = f.DisplayType
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["created_uid"] = f.CreatedUID
	f.fieldMap["created_name"] = f.CreatedName
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
}

func (f fbPromoList) clone(db *gorm.DB) fbPromoList {
	f.fbPromoListDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPromoList) replaceDB(db *gorm.DB) fbPromoList {
	f.fbPromoListDo.ReplaceDB(db)
	return f
}

type fbPromoListDo struct{ gen.DO }

type IFbPromoListDo interface {
	gen.SubQuery
	Debug() IFbPromoListDo
	WithContext(ctx context.Context) IFbPromoListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPromoListDo
	WriteDB() IFbPromoListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPromoListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPromoListDo
	Not(conds ...gen.Condition) IFbPromoListDo
	Or(conds ...gen.Condition) IFbPromoListDo
	Select(conds ...field.Expr) IFbPromoListDo
	Where(conds ...gen.Condition) IFbPromoListDo
	Order(conds ...field.Expr) IFbPromoListDo
	Distinct(cols ...field.Expr) IFbPromoListDo
	Omit(cols ...field.Expr) IFbPromoListDo
	Join(table schema.Tabler, on ...field.Expr) IFbPromoListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoListDo
	Group(cols ...field.Expr) IFbPromoListDo
	Having(conds ...gen.Condition) IFbPromoListDo
	Limit(limit int) IFbPromoListDo
	Offset(offset int) IFbPromoListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoListDo
	Unscoped() IFbPromoListDo
	Create(values ...*model.FbPromoList) error
	CreateInBatches(values []*model.FbPromoList, batchSize int) error
	Save(values ...*model.FbPromoList) error
	First() (*model.FbPromoList, error)
	Take() (*model.FbPromoList, error)
	Last() (*model.FbPromoList, error)
	Find() ([]*model.FbPromoList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoList, err error)
	FindInBatches(result *[]*model.FbPromoList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPromoList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPromoListDo
	Assign(attrs ...field.AssignExpr) IFbPromoListDo
	Joins(fields ...field.RelationField) IFbPromoListDo
	Preload(fields ...field.RelationField) IFbPromoListDo
	FirstOrInit() (*model.FbPromoList, error)
	FirstOrCreate() (*model.FbPromoList, error)
	FindByPage(offset int, limit int) (result []*model.FbPromoList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPromoListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPromoListDo) Debug() IFbPromoListDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPromoListDo) WithContext(ctx context.Context) IFbPromoListDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPromoListDo) ReadDB() IFbPromoListDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPromoListDo) WriteDB() IFbPromoListDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPromoListDo) Session(config *gorm.Session) IFbPromoListDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPromoListDo) Clauses(conds ...clause.Expression) IFbPromoListDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPromoListDo) Returning(value interface{}, columns ...string) IFbPromoListDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPromoListDo) Not(conds ...gen.Condition) IFbPromoListDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPromoListDo) Or(conds ...gen.Condition) IFbPromoListDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPromoListDo) Select(conds ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPromoListDo) Where(conds ...gen.Condition) IFbPromoListDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPromoListDo) Order(conds ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPromoListDo) Distinct(cols ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPromoListDo) Omit(cols ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPromoListDo) Join(table schema.Tabler, on ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPromoListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPromoListDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPromoListDo) Group(cols ...field.Expr) IFbPromoListDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPromoListDo) Having(conds ...gen.Condition) IFbPromoListDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPromoListDo) Limit(limit int) IFbPromoListDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPromoListDo) Offset(offset int) IFbPromoListDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPromoListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoListDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPromoListDo) Unscoped() IFbPromoListDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPromoListDo) Create(values ...*model.FbPromoList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPromoListDo) CreateInBatches(values []*model.FbPromoList, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPromoListDo) Save(values ...*model.FbPromoList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPromoListDo) First() (*model.FbPromoList, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoList), nil
	}
}

func (f fbPromoListDo) Take() (*model.FbPromoList, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoList), nil
	}
}

func (f fbPromoListDo) Last() (*model.FbPromoList, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoList), nil
	}
}

func (f fbPromoListDo) Find() ([]*model.FbPromoList, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPromoList), err
}

func (f fbPromoListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoList, err error) {
	buf := make([]*model.FbPromoList, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPromoListDo) FindInBatches(result *[]*model.FbPromoList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPromoListDo) Attrs(attrs ...field.AssignExpr) IFbPromoListDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPromoListDo) Assign(attrs ...field.AssignExpr) IFbPromoListDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPromoListDo) Joins(fields ...field.RelationField) IFbPromoListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPromoListDo) Preload(fields ...field.RelationField) IFbPromoListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPromoListDo) FirstOrInit() (*model.FbPromoList, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoList), nil
	}
}

func (f fbPromoListDo) FirstOrCreate() (*model.FbPromoList, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoList), nil
	}
}

func (f fbPromoListDo) FindByPage(offset int, limit int) (result []*model.FbPromoList, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPromoListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPromoListDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPromoListDo) Delete(models ...*model.FbPromoList) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPromoListDo) withDO(do gen.Dao) *fbPromoListDo {
	f.DO = *do.(*gen.DO)
	return f
}
