// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbGameList(db *gorm.DB, opts ...gen.DOOption) fbGameList {
	_fbGameList := fbGameList{}

	_fbGameList.fbGameListDo.UseDB(db, opts...)
	_fbGameList.fbGameListDo.UseModel(&model.FbGameList{})

	tableName := _fbGameList.fbGameListDo.TableName()
	_fbGameList.ALL = field.NewAsterisk(tableName)
	_fbGameList.ID = field.NewInt64(tableName, "id")
	_fbGameList.PlatformID = field.NewInt64(tableName, "platform_id")
	_fbGameList.VenueID = field.NewInt64(tableName, "venue_id")
	_fbGameList.PlatformName = field.NewString(tableName, "platform_name")
	_fbGameList.TwName = field.NewString(tableName, "tw_name")
	_fbGameList.ZhName = field.NewString(tableName, "zh_name")
	_fbGameList.EnName = field.NewString(tableName, "en_name")
	_fbGameList.GameType = field.NewInt32(tableName, "game_type")
	_fbGameList.Online = field.NewInt32(tableName, "online")
	_fbGameList.Maintained = field.NewInt32(tableName, "maintained")
	_fbGameList.GameID = field.NewString(tableName, "game_id")
	_fbGameList.IsHot = field.NewInt32(tableName, "is_hot")
	_fbGameList.IsNew = field.NewInt32(tableName, "is_new")
	_fbGameList.Img = field.NewString(tableName, "img")
	_fbGameList.Sorting = field.NewInt32(tableName, "sorting")
	_fbGameList.Rtp = field.NewFloat64(tableName, "rtp")
	_fbGameList.ReleasedAt = field.NewInt32(tableName, "released_at")
	_fbGameList.CreatedAt = field.NewInt32(tableName, "created_at")
	_fbGameList.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbGameList.UpdatedUID = field.NewInt64(tableName, "updated_uid")
	_fbGameList.UpdatedName = field.NewString(tableName, "updated_name")
	_fbGameList.Code = field.NewString(tableName, "code")
	_fbGameList.Category = field.NewString(tableName, "category")
	_fbGameList.Weight = field.NewInt32(tableName, "weight")

	_fbGameList.fillFieldMap()

	return _fbGameList
}

// fbGameList 游戏列表
type fbGameList struct {
	fbGameListDo

	ALL          field.Asterisk
	ID           field.Int64
	PlatformID   field.Int64  // 场馆ID
	VenueID      field.Int64  // 平台id(PP/EVO等)
	PlatformName field.String // 场馆名
	TwName       field.String // 繁体中文名
	ZhName       field.String // 中文名称
	EnName       field.String // 英文名称
	GameType     field.Int32  // 游戏类型:1=真人,2=捕鱼,3=电子,4=体育,5=棋牌,6=电竞
	Online       field.Int32  // 上线状态 1上线 2下线
	Maintained   field.Int32  // 维护状态 1正常 2维护中
	GameID       field.String // 游戏ID
	IsHot        field.Int32  // 热门 1热门 2一般
	IsNew        field.Int32  // 1新 2不是
	Img          field.String // 手机图片
	Sorting      field.Int32  // 排序
	Rtp          field.Float64
	ReleasedAt   field.Int32  // 游戏发布时间
	CreatedAt    field.Int32  // 添加时间
	UpdatedAt    field.Int64  // 更新时间
	UpdatedUID   field.Int64  // 更新人uid
	UpdatedName  field.String // 更新人名
	Code         field.String
	Category     field.String
	Weight       field.Int32 // a-z权重

	fieldMap map[string]field.Expr
}

func (f fbGameList) Table(newTableName string) *fbGameList {
	f.fbGameListDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbGameList) As(alias string) *fbGameList {
	f.fbGameListDo.DO = *(f.fbGameListDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbGameList) updateTableName(table string) *fbGameList {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.PlatformID = field.NewInt64(table, "platform_id")
	f.VenueID = field.NewInt64(table, "venue_id")
	f.PlatformName = field.NewString(table, "platform_name")
	f.TwName = field.NewString(table, "tw_name")
	f.ZhName = field.NewString(table, "zh_name")
	f.EnName = field.NewString(table, "en_name")
	f.GameType = field.NewInt32(table, "game_type")
	f.Online = field.NewInt32(table, "online")
	f.Maintained = field.NewInt32(table, "maintained")
	f.GameID = field.NewString(table, "game_id")
	f.IsHot = field.NewInt32(table, "is_hot")
	f.IsNew = field.NewInt32(table, "is_new")
	f.Img = field.NewString(table, "img")
	f.Sorting = field.NewInt32(table, "sorting")
	f.Rtp = field.NewFloat64(table, "rtp")
	f.ReleasedAt = field.NewInt32(table, "released_at")
	f.CreatedAt = field.NewInt32(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.Code = field.NewString(table, "code")
	f.Category = field.NewString(table, "category")
	f.Weight = field.NewInt32(table, "weight")

	f.fillFieldMap()

	return f
}

func (f *fbGameList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbGameList) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 24)
	f.fieldMap["id"] = f.ID
	f.fieldMap["platform_id"] = f.PlatformID
	f.fieldMap["venue_id"] = f.VenueID
	f.fieldMap["platform_name"] = f.PlatformName
	f.fieldMap["tw_name"] = f.TwName
	f.fieldMap["zh_name"] = f.ZhName
	f.fieldMap["en_name"] = f.EnName
	f.fieldMap["game_type"] = f.GameType
	f.fieldMap["online"] = f.Online
	f.fieldMap["maintained"] = f.Maintained
	f.fieldMap["game_id"] = f.GameID
	f.fieldMap["is_hot"] = f.IsHot
	f.fieldMap["is_new"] = f.IsNew
	f.fieldMap["img"] = f.Img
	f.fieldMap["sorting"] = f.Sorting
	f.fieldMap["rtp"] = f.Rtp
	f.fieldMap["released_at"] = f.ReleasedAt
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["code"] = f.Code
	f.fieldMap["category"] = f.Category
	f.fieldMap["weight"] = f.Weight
}

func (f fbGameList) clone(db *gorm.DB) fbGameList {
	f.fbGameListDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbGameList) replaceDB(db *gorm.DB) fbGameList {
	f.fbGameListDo.ReplaceDB(db)
	return f
}

type fbGameListDo struct{ gen.DO }

type IFbGameListDo interface {
	gen.SubQuery
	Debug() IFbGameListDo
	WithContext(ctx context.Context) IFbGameListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbGameListDo
	WriteDB() IFbGameListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbGameListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbGameListDo
	Not(conds ...gen.Condition) IFbGameListDo
	Or(conds ...gen.Condition) IFbGameListDo
	Select(conds ...field.Expr) IFbGameListDo
	Where(conds ...gen.Condition) IFbGameListDo
	Order(conds ...field.Expr) IFbGameListDo
	Distinct(cols ...field.Expr) IFbGameListDo
	Omit(cols ...field.Expr) IFbGameListDo
	Join(table schema.Tabler, on ...field.Expr) IFbGameListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbGameListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbGameListDo
	Group(cols ...field.Expr) IFbGameListDo
	Having(conds ...gen.Condition) IFbGameListDo
	Limit(limit int) IFbGameListDo
	Offset(offset int) IFbGameListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbGameListDo
	Unscoped() IFbGameListDo
	Create(values ...*model.FbGameList) error
	CreateInBatches(values []*model.FbGameList, batchSize int) error
	Save(values ...*model.FbGameList) error
	First() (*model.FbGameList, error)
	Take() (*model.FbGameList, error)
	Last() (*model.FbGameList, error)
	Find() ([]*model.FbGameList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbGameList, err error)
	FindInBatches(result *[]*model.FbGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbGameList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbGameListDo
	Assign(attrs ...field.AssignExpr) IFbGameListDo
	Joins(fields ...field.RelationField) IFbGameListDo
	Preload(fields ...field.RelationField) IFbGameListDo
	FirstOrInit() (*model.FbGameList, error)
	FirstOrCreate() (*model.FbGameList, error)
	FindByPage(offset int, limit int) (result []*model.FbGameList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbGameListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbGameListDo) Debug() IFbGameListDo {
	return f.withDO(f.DO.Debug())
}

func (f fbGameListDo) WithContext(ctx context.Context) IFbGameListDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbGameListDo) ReadDB() IFbGameListDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbGameListDo) WriteDB() IFbGameListDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbGameListDo) Session(config *gorm.Session) IFbGameListDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbGameListDo) Clauses(conds ...clause.Expression) IFbGameListDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbGameListDo) Returning(value interface{}, columns ...string) IFbGameListDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbGameListDo) Not(conds ...gen.Condition) IFbGameListDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbGameListDo) Or(conds ...gen.Condition) IFbGameListDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbGameListDo) Select(conds ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbGameListDo) Where(conds ...gen.Condition) IFbGameListDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbGameListDo) Order(conds ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbGameListDo) Distinct(cols ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbGameListDo) Omit(cols ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbGameListDo) Join(table schema.Tabler, on ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbGameListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbGameListDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbGameListDo) Group(cols ...field.Expr) IFbGameListDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbGameListDo) Having(conds ...gen.Condition) IFbGameListDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbGameListDo) Limit(limit int) IFbGameListDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbGameListDo) Offset(offset int) IFbGameListDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbGameListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbGameListDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbGameListDo) Unscoped() IFbGameListDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbGameListDo) Create(values ...*model.FbGameList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbGameListDo) CreateInBatches(values []*model.FbGameList, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbGameListDo) Save(values ...*model.FbGameList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbGameListDo) First() (*model.FbGameList, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGameList), nil
	}
}

func (f fbGameListDo) Take() (*model.FbGameList, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGameList), nil
	}
}

func (f fbGameListDo) Last() (*model.FbGameList, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGameList), nil
	}
}

func (f fbGameListDo) Find() ([]*model.FbGameList, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbGameList), err
}

func (f fbGameListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbGameList, err error) {
	buf := make([]*model.FbGameList, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbGameListDo) FindInBatches(result *[]*model.FbGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbGameListDo) Attrs(attrs ...field.AssignExpr) IFbGameListDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbGameListDo) Assign(attrs ...field.AssignExpr) IFbGameListDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbGameListDo) Joins(fields ...field.RelationField) IFbGameListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbGameListDo) Preload(fields ...field.RelationField) IFbGameListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbGameListDo) FirstOrInit() (*model.FbGameList, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGameList), nil
	}
}

func (f fbGameListDo) FirstOrCreate() (*model.FbGameList, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbGameList), nil
	}
}

func (f fbGameListDo) FindByPage(offset int, limit int) (result []*model.FbGameList, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbGameListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbGameListDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbGameListDo) Delete(models ...*model.FbGameList) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbGameListDo) withDO(do gen.Dao) *fbGameListDo {
	f.DO = *do.(*gen.DO)
	return f
}
