// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbVipTokensTransaction(db *gorm.DB, opts ...gen.DOOption) fbVipTokensTransaction {
	_fbVipTokensTransaction := fbVipTokensTransaction{}

	_fbVipTokensTransaction.fbVipTokensTransactionDo.UseDB(db, opts...)
	_fbVipTokensTransaction.fbVipTokensTransactionDo.UseModel(&model.FbVipTokensTransaction{})

	tableName := _fbVipTokensTransaction.fbVipTokensTransactionDo.TableName()
	_fbVipTokensTransaction.ALL = field.NewAsterisk(tableName)
	_fbVipTokensTransaction.ID = field.NewInt64(tableName, "id")
	_fbVipTokensTransaction.BillNo = field.NewString(tableName, "bill_no")
	_fbVipTokensTransaction.Pid = field.NewInt64(tableName, "pid")
	_fbVipTokensTransaction.UID = field.NewInt64(tableName, "uid")
	_fbVipTokensTransaction.Username = field.NewString(tableName, "username")
	_fbVipTokensTransaction.Phone = field.NewString(tableName, "phone")
	_fbVipTokensTransaction.CashType = field.NewInt32(tableName, "cash_type")
	_fbVipTokensTransaction.BusinessType = field.NewInt32(tableName, "business_type")
	_fbVipTokensTransaction.Symbol = field.NewInt32(tableName, "symbol")
	_fbVipTokensTransaction.Amount = field.NewFloat64(tableName, "amount")
	_fbVipTokensTransaction.BeforeAmount = field.NewFloat64(tableName, "before_amount")
	_fbVipTokensTransaction.AfterAmount = field.NewFloat64(tableName, "after_amount")
	_fbVipTokensTransaction.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbVipTokensTransaction.Remark = field.NewString(tableName, "remark")
	_fbVipTokensTransaction.OperatorUID = field.NewInt64(tableName, "operator_uid")
	_fbVipTokensTransaction.OperatorName = field.NewString(tableName, "operator_name")

	_fbVipTokensTransaction.fillFieldMap()

	return _fbVipTokensTransaction
}

// fbVipTokensTransaction vip代币账变
type fbVipTokensTransaction struct {
	fbVipTokensTransactionDo

	ALL          field.Asterisk
	ID           field.Int64
	BillNo       field.String  // bill_no
	Pid          field.Int64   // 活动ID
	UID          field.Int64   // 用户ID
	Username     field.String  // 用户名
	Phone        field.String  // phone
	CashType     field.Int32   // 帐变类型
	BusinessType field.Int32   // 业务类型
	Symbol       field.Int32   // 符号1加，2减
	Amount       field.Float64 // 账变金额
	BeforeAmount field.Float64 // 账变前的金额（钱包）
	AfterAmount  field.Float64 // 账变后的金额（钱包）
	CreatedAt    field.Int64   // 帐变时间
	Remark       field.String  // 备注
	OperatorUID  field.Int64   // 操作人uid
	OperatorName field.String  // 操作人

	fieldMap map[string]field.Expr
}

func (f fbVipTokensTransaction) Table(newTableName string) *fbVipTokensTransaction {
	f.fbVipTokensTransactionDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbVipTokensTransaction) As(alias string) *fbVipTokensTransaction {
	f.fbVipTokensTransactionDo.DO = *(f.fbVipTokensTransactionDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbVipTokensTransaction) updateTableName(table string) *fbVipTokensTransaction {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.BillNo = field.NewString(table, "bill_no")
	f.Pid = field.NewInt64(table, "pid")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.Phone = field.NewString(table, "phone")
	f.CashType = field.NewInt32(table, "cash_type")
	f.BusinessType = field.NewInt32(table, "business_type")
	f.Symbol = field.NewInt32(table, "symbol")
	f.Amount = field.NewFloat64(table, "amount")
	f.BeforeAmount = field.NewFloat64(table, "before_amount")
	f.AfterAmount = field.NewFloat64(table, "after_amount")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.Remark = field.NewString(table, "remark")
	f.OperatorUID = field.NewInt64(table, "operator_uid")
	f.OperatorName = field.NewString(table, "operator_name")

	f.fillFieldMap()

	return f
}

func (f *fbVipTokensTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbVipTokensTransaction) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 16)
	f.fieldMap["id"] = f.ID
	f.fieldMap["bill_no"] = f.BillNo
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["cash_type"] = f.CashType
	f.fieldMap["business_type"] = f.BusinessType
	f.fieldMap["symbol"] = f.Symbol
	f.fieldMap["amount"] = f.Amount
	f.fieldMap["before_amount"] = f.BeforeAmount
	f.fieldMap["after_amount"] = f.AfterAmount
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["operator_uid"] = f.OperatorUID
	f.fieldMap["operator_name"] = f.OperatorName
}

func (f fbVipTokensTransaction) clone(db *gorm.DB) fbVipTokensTransaction {
	f.fbVipTokensTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbVipTokensTransaction) replaceDB(db *gorm.DB) fbVipTokensTransaction {
	f.fbVipTokensTransactionDo.ReplaceDB(db)
	return f
}

type fbVipTokensTransactionDo struct{ gen.DO }

type IFbVipTokensTransactionDo interface {
	gen.SubQuery
	Debug() IFbVipTokensTransactionDo
	WithContext(ctx context.Context) IFbVipTokensTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbVipTokensTransactionDo
	WriteDB() IFbVipTokensTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbVipTokensTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbVipTokensTransactionDo
	Not(conds ...gen.Condition) IFbVipTokensTransactionDo
	Or(conds ...gen.Condition) IFbVipTokensTransactionDo
	Select(conds ...field.Expr) IFbVipTokensTransactionDo
	Where(conds ...gen.Condition) IFbVipTokensTransactionDo
	Order(conds ...field.Expr) IFbVipTokensTransactionDo
	Distinct(cols ...field.Expr) IFbVipTokensTransactionDo
	Omit(cols ...field.Expr) IFbVipTokensTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IFbVipTokensTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbVipTokensTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbVipTokensTransactionDo
	Group(cols ...field.Expr) IFbVipTokensTransactionDo
	Having(conds ...gen.Condition) IFbVipTokensTransactionDo
	Limit(limit int) IFbVipTokensTransactionDo
	Offset(offset int) IFbVipTokensTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbVipTokensTransactionDo
	Unscoped() IFbVipTokensTransactionDo
	Create(values ...*model.FbVipTokensTransaction) error
	CreateInBatches(values []*model.FbVipTokensTransaction, batchSize int) error
	Save(values ...*model.FbVipTokensTransaction) error
	First() (*model.FbVipTokensTransaction, error)
	Take() (*model.FbVipTokensTransaction, error)
	Last() (*model.FbVipTokensTransaction, error)
	Find() ([]*model.FbVipTokensTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbVipTokensTransaction, err error)
	FindInBatches(result *[]*model.FbVipTokensTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbVipTokensTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbVipTokensTransactionDo
	Assign(attrs ...field.AssignExpr) IFbVipTokensTransactionDo
	Joins(fields ...field.RelationField) IFbVipTokensTransactionDo
	Preload(fields ...field.RelationField) IFbVipTokensTransactionDo
	FirstOrInit() (*model.FbVipTokensTransaction, error)
	FirstOrCreate() (*model.FbVipTokensTransaction, error)
	FindByPage(offset int, limit int) (result []*model.FbVipTokensTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbVipTokensTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbVipTokensTransactionDo) Debug() IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Debug())
}

func (f fbVipTokensTransactionDo) WithContext(ctx context.Context) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbVipTokensTransactionDo) ReadDB() IFbVipTokensTransactionDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbVipTokensTransactionDo) WriteDB() IFbVipTokensTransactionDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbVipTokensTransactionDo) Session(config *gorm.Session) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbVipTokensTransactionDo) Clauses(conds ...clause.Expression) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbVipTokensTransactionDo) Returning(value interface{}, columns ...string) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbVipTokensTransactionDo) Not(conds ...gen.Condition) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbVipTokensTransactionDo) Or(conds ...gen.Condition) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbVipTokensTransactionDo) Select(conds ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbVipTokensTransactionDo) Where(conds ...gen.Condition) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbVipTokensTransactionDo) Order(conds ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbVipTokensTransactionDo) Distinct(cols ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbVipTokensTransactionDo) Omit(cols ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbVipTokensTransactionDo) Join(table schema.Tabler, on ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbVipTokensTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbVipTokensTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbVipTokensTransactionDo) Group(cols ...field.Expr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbVipTokensTransactionDo) Having(conds ...gen.Condition) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbVipTokensTransactionDo) Limit(limit int) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbVipTokensTransactionDo) Offset(offset int) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbVipTokensTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbVipTokensTransactionDo) Unscoped() IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbVipTokensTransactionDo) Create(values ...*model.FbVipTokensTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbVipTokensTransactionDo) CreateInBatches(values []*model.FbVipTokensTransaction, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbVipTokensTransactionDo) Save(values ...*model.FbVipTokensTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbVipTokensTransactionDo) First() (*model.FbVipTokensTransaction, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipTokensTransaction), nil
	}
}

func (f fbVipTokensTransactionDo) Take() (*model.FbVipTokensTransaction, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipTokensTransaction), nil
	}
}

func (f fbVipTokensTransactionDo) Last() (*model.FbVipTokensTransaction, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipTokensTransaction), nil
	}
}

func (f fbVipTokensTransactionDo) Find() ([]*model.FbVipTokensTransaction, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbVipTokensTransaction), err
}

func (f fbVipTokensTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbVipTokensTransaction, err error) {
	buf := make([]*model.FbVipTokensTransaction, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbVipTokensTransactionDo) FindInBatches(result *[]*model.FbVipTokensTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbVipTokensTransactionDo) Attrs(attrs ...field.AssignExpr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbVipTokensTransactionDo) Assign(attrs ...field.AssignExpr) IFbVipTokensTransactionDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbVipTokensTransactionDo) Joins(fields ...field.RelationField) IFbVipTokensTransactionDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbVipTokensTransactionDo) Preload(fields ...field.RelationField) IFbVipTokensTransactionDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbVipTokensTransactionDo) FirstOrInit() (*model.FbVipTokensTransaction, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipTokensTransaction), nil
	}
}

func (f fbVipTokensTransactionDo) FirstOrCreate() (*model.FbVipTokensTransaction, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipTokensTransaction), nil
	}
}

func (f fbVipTokensTransactionDo) FindByPage(offset int, limit int) (result []*model.FbVipTokensTransaction, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbVipTokensTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbVipTokensTransactionDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbVipTokensTransactionDo) Delete(models ...*model.FbVipTokensTransaction) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbVipTokensTransactionDo) withDO(do gen.Dao) *fbVipTokensTransactionDo {
	f.DO = *do.(*gen.DO)
	return f
}
