// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbReportMember(db *gorm.DB, opts ...gen.DOOption) fbReportMember {
	_fbReportMember := fbReportMember{}

	_fbReportMember.fbReportMemberDo.UseDB(db, opts...)
	_fbReportMember.fbReportMemberDo.UseModel(&model.FbReportMember{})

	tableName := _fbReportMember.fbReportMemberDo.TableName()
	_fbReportMember.ALL = field.NewAsterisk(tableName)
	_fbReportMember.ID = field.NewInt64(tableName, "id")
	_fbReportMember.Day = field.NewInt32(tableName, "day")
	_fbReportMember.UID = field.NewInt64(tableName, "uid")
	_fbReportMember.Phone = field.NewString(tableName, "phone")
	_fbReportMember.Username = field.NewString(tableName, "username")
	_fbReportMember.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_fbReportMember.SettleAmount = field.NewFloat64(tableName, "settle_amount")
	_fbReportMember.Ggr = field.NewFloat64(tableName, "ggr")
	_fbReportMember.DepositAmount = field.NewFloat64(tableName, "deposit_amount")
	_fbReportMember.Balance = field.NewFloat64(tableName, "balance")
	_fbReportMember.Bonus = field.NewFloat64(tableName, "bonus")
	_fbReportMember.AdjustAdd = field.NewFloat64(tableName, "adjust_add")
	_fbReportMember.AdjustSub = field.NewFloat64(tableName, "adjust_sub")
	_fbReportMember.WithdrawAmount = field.NewFloat64(tableName, "withdraw_amount")
	_fbReportMember.CreatedAt = field.NewInt64(tableName, "created_at")

	_fbReportMember.fillFieldMap()

	return _fbReportMember
}

// fbReportMember 会员报表
type fbReportMember struct {
	fbReportMemberDo

	ALL            field.Asterisk
	ID             field.Int64
	Day            field.Int32 // 日期
	UID            field.Int64
	Phone          field.String  // 手机号
	Username       field.String  // 用户名
	ValidBetAmount field.Float64 // 投注额
	SettleAmount   field.Float64 // 派彩额
	Ggr            field.Float64 // GGR
	DepositAmount  field.Float64 // 存款额
	Balance        field.Float64
	Bonus          field.Float64
	AdjustAdd      field.Float64
	AdjustSub      field.Float64
	WithdrawAmount field.Float64 // 提款额
	CreatedAt      field.Int64

	fieldMap map[string]field.Expr
}

func (f fbReportMember) Table(newTableName string) *fbReportMember {
	f.fbReportMemberDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbReportMember) As(alias string) *fbReportMember {
	f.fbReportMemberDo.DO = *(f.fbReportMemberDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbReportMember) updateTableName(table string) *fbReportMember {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.UID = field.NewInt64(table, "uid")
	f.Phone = field.NewString(table, "phone")
	f.Username = field.NewString(table, "username")
	f.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	f.SettleAmount = field.NewFloat64(table, "settle_amount")
	f.Ggr = field.NewFloat64(table, "ggr")
	f.DepositAmount = field.NewFloat64(table, "deposit_amount")
	f.Balance = field.NewFloat64(table, "balance")
	f.Bonus = field.NewFloat64(table, "bonus")
	f.AdjustAdd = field.NewFloat64(table, "adjust_add")
	f.AdjustSub = field.NewFloat64(table, "adjust_sub")
	f.WithdrawAmount = field.NewFloat64(table, "withdraw_amount")
	f.CreatedAt = field.NewInt64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbReportMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbReportMember) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["uid"] = f.UID
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["username"] = f.Username
	f.fieldMap["valid_bet_amount"] = f.ValidBetAmount
	f.fieldMap["settle_amount"] = f.SettleAmount
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["deposit_amount"] = f.DepositAmount
	f.fieldMap["balance"] = f.Balance
	f.fieldMap["bonus"] = f.Bonus
	f.fieldMap["adjust_add"] = f.AdjustAdd
	f.fieldMap["adjust_sub"] = f.AdjustSub
	f.fieldMap["withdraw_amount"] = f.WithdrawAmount
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbReportMember) clone(db *gorm.DB) fbReportMember {
	f.fbReportMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbReportMember) replaceDB(db *gorm.DB) fbReportMember {
	f.fbReportMemberDo.ReplaceDB(db)
	return f
}

type fbReportMemberDo struct{ gen.DO }

type IFbReportMemberDo interface {
	gen.SubQuery
	Debug() IFbReportMemberDo
	WithContext(ctx context.Context) IFbReportMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbReportMemberDo
	WriteDB() IFbReportMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbReportMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbReportMemberDo
	Not(conds ...gen.Condition) IFbReportMemberDo
	Or(conds ...gen.Condition) IFbReportMemberDo
	Select(conds ...field.Expr) IFbReportMemberDo
	Where(conds ...gen.Condition) IFbReportMemberDo
	Order(conds ...field.Expr) IFbReportMemberDo
	Distinct(cols ...field.Expr) IFbReportMemberDo
	Omit(cols ...field.Expr) IFbReportMemberDo
	Join(table schema.Tabler, on ...field.Expr) IFbReportMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberDo
	Group(cols ...field.Expr) IFbReportMemberDo
	Having(conds ...gen.Condition) IFbReportMemberDo
	Limit(limit int) IFbReportMemberDo
	Offset(offset int) IFbReportMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberDo
	Unscoped() IFbReportMemberDo
	Create(values ...*model.FbReportMember) error
	CreateInBatches(values []*model.FbReportMember, batchSize int) error
	Save(values ...*model.FbReportMember) error
	First() (*model.FbReportMember, error)
	Take() (*model.FbReportMember, error)
	Last() (*model.FbReportMember, error)
	Find() ([]*model.FbReportMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMember, err error)
	FindInBatches(result *[]*model.FbReportMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbReportMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbReportMemberDo
	Assign(attrs ...field.AssignExpr) IFbReportMemberDo
	Joins(fields ...field.RelationField) IFbReportMemberDo
	Preload(fields ...field.RelationField) IFbReportMemberDo
	FirstOrInit() (*model.FbReportMember, error)
	FirstOrCreate() (*model.FbReportMember, error)
	FindByPage(offset int, limit int) (result []*model.FbReportMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbReportMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbReportMemberDo) Debug() IFbReportMemberDo {
	return f.withDO(f.DO.Debug())
}

func (f fbReportMemberDo) WithContext(ctx context.Context) IFbReportMemberDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbReportMemberDo) ReadDB() IFbReportMemberDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbReportMemberDo) WriteDB() IFbReportMemberDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbReportMemberDo) Session(config *gorm.Session) IFbReportMemberDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbReportMemberDo) Clauses(conds ...clause.Expression) IFbReportMemberDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbReportMemberDo) Returning(value interface{}, columns ...string) IFbReportMemberDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbReportMemberDo) Not(conds ...gen.Condition) IFbReportMemberDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbReportMemberDo) Or(conds ...gen.Condition) IFbReportMemberDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbReportMemberDo) Select(conds ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbReportMemberDo) Where(conds ...gen.Condition) IFbReportMemberDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbReportMemberDo) Order(conds ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbReportMemberDo) Distinct(cols ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbReportMemberDo) Omit(cols ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbReportMemberDo) Join(table schema.Tabler, on ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbReportMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbReportMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbReportMemberDo) Group(cols ...field.Expr) IFbReportMemberDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbReportMemberDo) Having(conds ...gen.Condition) IFbReportMemberDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbReportMemberDo) Limit(limit int) IFbReportMemberDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbReportMemberDo) Offset(offset int) IFbReportMemberDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbReportMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbReportMemberDo) Unscoped() IFbReportMemberDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbReportMemberDo) Create(values ...*model.FbReportMember) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbReportMemberDo) CreateInBatches(values []*model.FbReportMember, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbReportMemberDo) Save(values ...*model.FbReportMember) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbReportMemberDo) First() (*model.FbReportMember, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMember), nil
	}
}

func (f fbReportMemberDo) Take() (*model.FbReportMember, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMember), nil
	}
}

func (f fbReportMemberDo) Last() (*model.FbReportMember, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMember), nil
	}
}

func (f fbReportMemberDo) Find() ([]*model.FbReportMember, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbReportMember), err
}

func (f fbReportMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMember, err error) {
	buf := make([]*model.FbReportMember, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbReportMemberDo) FindInBatches(result *[]*model.FbReportMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbReportMemberDo) Attrs(attrs ...field.AssignExpr) IFbReportMemberDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbReportMemberDo) Assign(attrs ...field.AssignExpr) IFbReportMemberDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbReportMemberDo) Joins(fields ...field.RelationField) IFbReportMemberDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbReportMemberDo) Preload(fields ...field.RelationField) IFbReportMemberDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbReportMemberDo) FirstOrInit() (*model.FbReportMember, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMember), nil
	}
}

func (f fbReportMemberDo) FirstOrCreate() (*model.FbReportMember, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMember), nil
	}
}

func (f fbReportMemberDo) FindByPage(offset int, limit int) (result []*model.FbReportMember, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbReportMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbReportMemberDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbReportMemberDo) Delete(models ...*model.FbReportMember) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbReportMemberDo) withDO(do gen.Dao) *fbReportMemberDo {
	f.DO = *do.(*gen.DO)
	return f
}
