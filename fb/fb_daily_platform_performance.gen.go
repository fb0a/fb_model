// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbDailyPlatformPerformance(db *gorm.DB, opts ...gen.DOOption) fbDailyPlatformPerformance {
	_fbDailyPlatformPerformance := fbDailyPlatformPerformance{}

	_fbDailyPlatformPerformance.fbDailyPlatformPerformanceDo.UseDB(db, opts...)
	_fbDailyPlatformPerformance.fbDailyPlatformPerformanceDo.UseModel(&model.FbDailyPlatformPerformance{})

	tableName := _fbDailyPlatformPerformance.fbDailyPlatformPerformanceDo.TableName()
	_fbDailyPlatformPerformance.ALL = field.NewAsterisk(tableName)
	_fbDailyPlatformPerformance.ID = field.NewInt64(tableName, "id")
	_fbDailyPlatformPerformance.Day = field.NewInt32(tableName, "day")
	_fbDailyPlatformPerformance.LoginCount = field.NewInt64(tableName, "login_count")
	_fbDailyPlatformPerformance.KycCount = field.NewInt64(tableName, "kyc_count")
	_fbDailyPlatformPerformance.BetsActiveUsersCount = field.NewInt64(tableName, "bets_active_users_count")
	_fbDailyPlatformPerformance.DepositPersonnelCount = field.NewInt64(tableName, "deposit_personnel_count")
	_fbDailyPlatformPerformance.DepositAmountTotal = field.NewString(tableName, "deposit_amount_total")
	_fbDailyPlatformPerformance.DepositCount = field.NewInt64(tableName, "deposit_count")
	_fbDailyPlatformPerformance.DepositFinishCount = field.NewInt64(tableName, "deposit_finish_count")
	_fbDailyPlatformPerformance.DepositFinishRate = field.NewString(tableName, "deposit_finish_rate")
	_fbDailyPlatformPerformance.DepositAverageAmount = field.NewString(tableName, "deposit_average_amount")
	_fbDailyPlatformPerformance.DepositHandlingFee = field.NewString(tableName, "deposit_handling_fee")
	_fbDailyPlatformPerformance.WithdrawalsPersonnelCount = field.NewInt64(tableName, "withdrawals_personnel_count")
	_fbDailyPlatformPerformance.WithdrawalsNum = field.NewInt64(tableName, "withdrawals_num")
	_fbDailyPlatformPerformance.WithdrawalAmountTotal = field.NewString(tableName, "withdrawal_amount_total")
	_fbDailyPlatformPerformance.TimeRequiredWithdrawals = field.NewString(tableName, "time_required_withdrawals")
	_fbDailyPlatformPerformance.WithdrawalAverageAmount = field.NewString(tableName, "withdrawal_average_amount")
	_fbDailyPlatformPerformance.DepositsWithdrawalsDiff = field.NewString(tableName, "deposits_withdrawals_diff")
	_fbDailyPlatformPerformance.BetsCount = field.NewInt64(tableName, "bets_count")
	_fbDailyPlatformPerformance.BetsEffectiveTotal = field.NewString(tableName, "bets_effective_total")
	_fbDailyPlatformPerformance.BetsAverageAmount = field.NewString(tableName, "bets_average_amount")
	_fbDailyPlatformPerformance.Ggr = field.NewString(tableName, "ggr")
	_fbDailyPlatformPerformance.KillRate = field.NewString(tableName, "kill_rate")
	_fbDailyPlatformPerformance.GiftsPayable = field.NewString(tableName, "gifts_payable")
	_fbDailyPlatformPerformance.GiftsActuallyPaid = field.NewString(tableName, "gifts_actually_paid")
	_fbDailyPlatformPerformance.CommissionPayable = field.NewString(tableName, "commission_payable")
	_fbDailyPlatformPerformance.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbDailyPlatformPerformance.ReportType = field.NewInt32(tableName, "report_type")

	_fbDailyPlatformPerformance.fillFieldMap()

	return _fbDailyPlatformPerformance
}

// fbDailyPlatformPerformance 平台业绩日报表
type fbDailyPlatformPerformance struct {
	fbDailyPlatformPerformanceDo

	ALL                       field.Asterisk
	ID                        field.Int64  // ID
	Day                       field.Int32  // 年月日
	LoginCount                field.Int64  // 登陆统计
	KycCount                  field.Int64  // kyc统计
	BetsActiveUsersCount      field.Int64  // 有投注的活跃人数
	DepositPersonnelCount     field.Int64  // 充值人数
	DepositAmountTotal        field.String // 总存款金额
	DepositCount              field.Int64  // 充值次数
	DepositFinishCount        field.Int64  // 充值成功次数
	DepositFinishRate         field.String // 充值成功率
	DepositAverageAmount      field.String // 笔均充值金额
	DepositHandlingFee        field.String // 总充值手续
	WithdrawalsPersonnelCount field.Int64  // 提现人数
	WithdrawalsNum            field.Int64  // 成功提现次数
	WithdrawalAmountTotal     field.String // 总提现金额
	TimeRequiredWithdrawals   field.String // 提现用时
	WithdrawalAverageAmount   field.String // 笔均充值金额
	DepositsWithdrawalsDiff   field.String // 存提差
	BetsCount                 field.Int64  // 总注单数
	BetsEffectiveTotal        field.String // 总有效投注额
	BetsAverageAmount         field.String // 笔均注单额
	Ggr                       field.String // GGR
	KillRate                  field.String // 杀率
	GiftsPayable              field.String // 应发礼金
	GiftsActuallyPaid         field.String // 实发礼金
	CommissionPayable         field.String // 应付佣金
	CreatedAt                 field.Int64  // 创建时间
	ReportType                field.Int32  // 1日报，2周报，3月报

	fieldMap map[string]field.Expr
}

func (f fbDailyPlatformPerformance) Table(newTableName string) *fbDailyPlatformPerformance {
	f.fbDailyPlatformPerformanceDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbDailyPlatformPerformance) As(alias string) *fbDailyPlatformPerformance {
	f.fbDailyPlatformPerformanceDo.DO = *(f.fbDailyPlatformPerformanceDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbDailyPlatformPerformance) updateTableName(table string) *fbDailyPlatformPerformance {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.LoginCount = field.NewInt64(table, "login_count")
	f.KycCount = field.NewInt64(table, "kyc_count")
	f.BetsActiveUsersCount = field.NewInt64(table, "bets_active_users_count")
	f.DepositPersonnelCount = field.NewInt64(table, "deposit_personnel_count")
	f.DepositAmountTotal = field.NewString(table, "deposit_amount_total")
	f.DepositCount = field.NewInt64(table, "deposit_count")
	f.DepositFinishCount = field.NewInt64(table, "deposit_finish_count")
	f.DepositFinishRate = field.NewString(table, "deposit_finish_rate")
	f.DepositAverageAmount = field.NewString(table, "deposit_average_amount")
	f.DepositHandlingFee = field.NewString(table, "deposit_handling_fee")
	f.WithdrawalsPersonnelCount = field.NewInt64(table, "withdrawals_personnel_count")
	f.WithdrawalsNum = field.NewInt64(table, "withdrawals_num")
	f.WithdrawalAmountTotal = field.NewString(table, "withdrawal_amount_total")
	f.TimeRequiredWithdrawals = field.NewString(table, "time_required_withdrawals")
	f.WithdrawalAverageAmount = field.NewString(table, "withdrawal_average_amount")
	f.DepositsWithdrawalsDiff = field.NewString(table, "deposits_withdrawals_diff")
	f.BetsCount = field.NewInt64(table, "bets_count")
	f.BetsEffectiveTotal = field.NewString(table, "bets_effective_total")
	f.BetsAverageAmount = field.NewString(table, "bets_average_amount")
	f.Ggr = field.NewString(table, "ggr")
	f.KillRate = field.NewString(table, "kill_rate")
	f.GiftsPayable = field.NewString(table, "gifts_payable")
	f.GiftsActuallyPaid = field.NewString(table, "gifts_actually_paid")
	f.CommissionPayable = field.NewString(table, "commission_payable")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.ReportType = field.NewInt32(table, "report_type")

	f.fillFieldMap()

	return f
}

func (f *fbDailyPlatformPerformance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbDailyPlatformPerformance) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 28)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["login_count"] = f.LoginCount
	f.fieldMap["kyc_count"] = f.KycCount
	f.fieldMap["bets_active_users_count"] = f.BetsActiveUsersCount
	f.fieldMap["deposit_personnel_count"] = f.DepositPersonnelCount
	f.fieldMap["deposit_amount_total"] = f.DepositAmountTotal
	f.fieldMap["deposit_count"] = f.DepositCount
	f.fieldMap["deposit_finish_count"] = f.DepositFinishCount
	f.fieldMap["deposit_finish_rate"] = f.DepositFinishRate
	f.fieldMap["deposit_average_amount"] = f.DepositAverageAmount
	f.fieldMap["deposit_handling_fee"] = f.DepositHandlingFee
	f.fieldMap["withdrawals_personnel_count"] = f.WithdrawalsPersonnelCount
	f.fieldMap["withdrawals_num"] = f.WithdrawalsNum
	f.fieldMap["withdrawal_amount_total"] = f.WithdrawalAmountTotal
	f.fieldMap["time_required_withdrawals"] = f.TimeRequiredWithdrawals
	f.fieldMap["withdrawal_average_amount"] = f.WithdrawalAverageAmount
	f.fieldMap["deposits_withdrawals_diff"] = f.DepositsWithdrawalsDiff
	f.fieldMap["bets_count"] = f.BetsCount
	f.fieldMap["bets_effective_total"] = f.BetsEffectiveTotal
	f.fieldMap["bets_average_amount"] = f.BetsAverageAmount
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["kill_rate"] = f.KillRate
	f.fieldMap["gifts_payable"] = f.GiftsPayable
	f.fieldMap["gifts_actually_paid"] = f.GiftsActuallyPaid
	f.fieldMap["commission_payable"] = f.CommissionPayable
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["report_type"] = f.ReportType
}

func (f fbDailyPlatformPerformance) clone(db *gorm.DB) fbDailyPlatformPerformance {
	f.fbDailyPlatformPerformanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbDailyPlatformPerformance) replaceDB(db *gorm.DB) fbDailyPlatformPerformance {
	f.fbDailyPlatformPerformanceDo.ReplaceDB(db)
	return f
}

type fbDailyPlatformPerformanceDo struct{ gen.DO }

type IFbDailyPlatformPerformanceDo interface {
	gen.SubQuery
	Debug() IFbDailyPlatformPerformanceDo
	WithContext(ctx context.Context) IFbDailyPlatformPerformanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbDailyPlatformPerformanceDo
	WriteDB() IFbDailyPlatformPerformanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbDailyPlatformPerformanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbDailyPlatformPerformanceDo
	Not(conds ...gen.Condition) IFbDailyPlatformPerformanceDo
	Or(conds ...gen.Condition) IFbDailyPlatformPerformanceDo
	Select(conds ...field.Expr) IFbDailyPlatformPerformanceDo
	Where(conds ...gen.Condition) IFbDailyPlatformPerformanceDo
	Order(conds ...field.Expr) IFbDailyPlatformPerformanceDo
	Distinct(cols ...field.Expr) IFbDailyPlatformPerformanceDo
	Omit(cols ...field.Expr) IFbDailyPlatformPerformanceDo
	Join(table schema.Tabler, on ...field.Expr) IFbDailyPlatformPerformanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformPerformanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformPerformanceDo
	Group(cols ...field.Expr) IFbDailyPlatformPerformanceDo
	Having(conds ...gen.Condition) IFbDailyPlatformPerformanceDo
	Limit(limit int) IFbDailyPlatformPerformanceDo
	Offset(offset int) IFbDailyPlatformPerformanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyPlatformPerformanceDo
	Unscoped() IFbDailyPlatformPerformanceDo
	Create(values ...*model.FbDailyPlatformPerformance) error
	CreateInBatches(values []*model.FbDailyPlatformPerformance, batchSize int) error
	Save(values ...*model.FbDailyPlatformPerformance) error
	First() (*model.FbDailyPlatformPerformance, error)
	Take() (*model.FbDailyPlatformPerformance, error)
	Last() (*model.FbDailyPlatformPerformance, error)
	Find() ([]*model.FbDailyPlatformPerformance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyPlatformPerformance, err error)
	FindInBatches(result *[]*model.FbDailyPlatformPerformance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbDailyPlatformPerformance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbDailyPlatformPerformanceDo
	Assign(attrs ...field.AssignExpr) IFbDailyPlatformPerformanceDo
	Joins(fields ...field.RelationField) IFbDailyPlatformPerformanceDo
	Preload(fields ...field.RelationField) IFbDailyPlatformPerformanceDo
	FirstOrInit() (*model.FbDailyPlatformPerformance, error)
	FirstOrCreate() (*model.FbDailyPlatformPerformance, error)
	FindByPage(offset int, limit int) (result []*model.FbDailyPlatformPerformance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbDailyPlatformPerformanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbDailyPlatformPerformanceDo) Debug() IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Debug())
}

func (f fbDailyPlatformPerformanceDo) WithContext(ctx context.Context) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbDailyPlatformPerformanceDo) ReadDB() IFbDailyPlatformPerformanceDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbDailyPlatformPerformanceDo) WriteDB() IFbDailyPlatformPerformanceDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbDailyPlatformPerformanceDo) Session(config *gorm.Session) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbDailyPlatformPerformanceDo) Clauses(conds ...clause.Expression) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbDailyPlatformPerformanceDo) Returning(value interface{}, columns ...string) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbDailyPlatformPerformanceDo) Not(conds ...gen.Condition) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbDailyPlatformPerformanceDo) Or(conds ...gen.Condition) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbDailyPlatformPerformanceDo) Select(conds ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbDailyPlatformPerformanceDo) Where(conds ...gen.Condition) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbDailyPlatformPerformanceDo) Order(conds ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbDailyPlatformPerformanceDo) Distinct(cols ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbDailyPlatformPerformanceDo) Omit(cols ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbDailyPlatformPerformanceDo) Join(table schema.Tabler, on ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbDailyPlatformPerformanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbDailyPlatformPerformanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbDailyPlatformPerformanceDo) Group(cols ...field.Expr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbDailyPlatformPerformanceDo) Having(conds ...gen.Condition) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbDailyPlatformPerformanceDo) Limit(limit int) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbDailyPlatformPerformanceDo) Offset(offset int) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbDailyPlatformPerformanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbDailyPlatformPerformanceDo) Unscoped() IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbDailyPlatformPerformanceDo) Create(values ...*model.FbDailyPlatformPerformance) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbDailyPlatformPerformanceDo) CreateInBatches(values []*model.FbDailyPlatformPerformance, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbDailyPlatformPerformanceDo) Save(values ...*model.FbDailyPlatformPerformance) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbDailyPlatformPerformanceDo) First() (*model.FbDailyPlatformPerformance, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformPerformance), nil
	}
}

func (f fbDailyPlatformPerformanceDo) Take() (*model.FbDailyPlatformPerformance, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformPerformance), nil
	}
}

func (f fbDailyPlatformPerformanceDo) Last() (*model.FbDailyPlatformPerformance, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformPerformance), nil
	}
}

func (f fbDailyPlatformPerformanceDo) Find() ([]*model.FbDailyPlatformPerformance, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbDailyPlatformPerformance), err
}

func (f fbDailyPlatformPerformanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyPlatformPerformance, err error) {
	buf := make([]*model.FbDailyPlatformPerformance, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbDailyPlatformPerformanceDo) FindInBatches(result *[]*model.FbDailyPlatformPerformance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbDailyPlatformPerformanceDo) Attrs(attrs ...field.AssignExpr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbDailyPlatformPerformanceDo) Assign(attrs ...field.AssignExpr) IFbDailyPlatformPerformanceDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbDailyPlatformPerformanceDo) Joins(fields ...field.RelationField) IFbDailyPlatformPerformanceDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbDailyPlatformPerformanceDo) Preload(fields ...field.RelationField) IFbDailyPlatformPerformanceDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbDailyPlatformPerformanceDo) FirstOrInit() (*model.FbDailyPlatformPerformance, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformPerformance), nil
	}
}

func (f fbDailyPlatformPerformanceDo) FirstOrCreate() (*model.FbDailyPlatformPerformance, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformPerformance), nil
	}
}

func (f fbDailyPlatformPerformanceDo) FindByPage(offset int, limit int) (result []*model.FbDailyPlatformPerformance, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbDailyPlatformPerformanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbDailyPlatformPerformanceDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbDailyPlatformPerformanceDo) Delete(models ...*model.FbDailyPlatformPerformance) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbDailyPlatformPerformanceDo) withDO(do gen.Dao) *fbDailyPlatformPerformanceDo {
	f.DO = *do.(*gen.DO)
	return f
}
