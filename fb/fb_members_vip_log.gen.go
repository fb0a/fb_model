// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMembersVipLog(db *gorm.DB, opts ...gen.DOOption) fbMembersVipLog {
	_fbMembersVipLog := fbMembersVipLog{}

	_fbMembersVipLog.fbMembersVipLogDo.UseDB(db, opts...)
	_fbMembersVipLog.fbMembersVipLogDo.UseModel(&model.FbMembersVipLog{})

	tableName := _fbMembersVipLog.fbMembersVipLogDo.TableName()
	_fbMembersVipLog.ALL = field.NewAsterisk(tableName)
	_fbMembersVipLog.ID = field.NewInt64(tableName, "id")

	_fbMembersVipLog.fillFieldMap()

	return _fbMembersVipLog
}

type fbMembersVipLog struct {
	fbMembersVipLogDo

	ALL field.Asterisk
	ID  field.Int64

	fieldMap map[string]field.Expr
}

func (f fbMembersVipLog) Table(newTableName string) *fbMembersVipLog {
	f.fbMembersVipLogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMembersVipLog) As(alias string) *fbMembersVipLog {
	f.fbMembersVipLogDo.DO = *(f.fbMembersVipLogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMembersVipLog) updateTableName(table string) *fbMembersVipLog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")

	f.fillFieldMap()

	return f
}

func (f *fbMembersVipLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMembersVipLog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 1)
	f.fieldMap["id"] = f.ID
}

func (f fbMembersVipLog) clone(db *gorm.DB) fbMembersVipLog {
	f.fbMembersVipLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMembersVipLog) replaceDB(db *gorm.DB) fbMembersVipLog {
	f.fbMembersVipLogDo.ReplaceDB(db)
	return f
}

type fbMembersVipLogDo struct{ gen.DO }

type IFbMembersVipLogDo interface {
	gen.SubQuery
	Debug() IFbMembersVipLogDo
	WithContext(ctx context.Context) IFbMembersVipLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMembersVipLogDo
	WriteDB() IFbMembersVipLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMembersVipLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMembersVipLogDo
	Not(conds ...gen.Condition) IFbMembersVipLogDo
	Or(conds ...gen.Condition) IFbMembersVipLogDo
	Select(conds ...field.Expr) IFbMembersVipLogDo
	Where(conds ...gen.Condition) IFbMembersVipLogDo
	Order(conds ...field.Expr) IFbMembersVipLogDo
	Distinct(cols ...field.Expr) IFbMembersVipLogDo
	Omit(cols ...field.Expr) IFbMembersVipLogDo
	Join(table schema.Tabler, on ...field.Expr) IFbMembersVipLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipLogDo
	Group(cols ...field.Expr) IFbMembersVipLogDo
	Having(conds ...gen.Condition) IFbMembersVipLogDo
	Limit(limit int) IFbMembersVipLogDo
	Offset(offset int) IFbMembersVipLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersVipLogDo
	Unscoped() IFbMembersVipLogDo
	Create(values ...*model.FbMembersVipLog) error
	CreateInBatches(values []*model.FbMembersVipLog, batchSize int) error
	Save(values ...*model.FbMembersVipLog) error
	First() (*model.FbMembersVipLog, error)
	Take() (*model.FbMembersVipLog, error)
	Last() (*model.FbMembersVipLog, error)
	Find() ([]*model.FbMembersVipLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersVipLog, err error)
	FindInBatches(result *[]*model.FbMembersVipLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMembersVipLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMembersVipLogDo
	Assign(attrs ...field.AssignExpr) IFbMembersVipLogDo
	Joins(fields ...field.RelationField) IFbMembersVipLogDo
	Preload(fields ...field.RelationField) IFbMembersVipLogDo
	FirstOrInit() (*model.FbMembersVipLog, error)
	FirstOrCreate() (*model.FbMembersVipLog, error)
	FindByPage(offset int, limit int) (result []*model.FbMembersVipLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMembersVipLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMembersVipLogDo) Debug() IFbMembersVipLogDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMembersVipLogDo) WithContext(ctx context.Context) IFbMembersVipLogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMembersVipLogDo) ReadDB() IFbMembersVipLogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMembersVipLogDo) WriteDB() IFbMembersVipLogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMembersVipLogDo) Session(config *gorm.Session) IFbMembersVipLogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMembersVipLogDo) Clauses(conds ...clause.Expression) IFbMembersVipLogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMembersVipLogDo) Returning(value interface{}, columns ...string) IFbMembersVipLogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMembersVipLogDo) Not(conds ...gen.Condition) IFbMembersVipLogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMembersVipLogDo) Or(conds ...gen.Condition) IFbMembersVipLogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMembersVipLogDo) Select(conds ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMembersVipLogDo) Where(conds ...gen.Condition) IFbMembersVipLogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMembersVipLogDo) Order(conds ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMembersVipLogDo) Distinct(cols ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMembersVipLogDo) Omit(cols ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMembersVipLogDo) Join(table schema.Tabler, on ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMembersVipLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMembersVipLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMembersVipLogDo) Group(cols ...field.Expr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMembersVipLogDo) Having(conds ...gen.Condition) IFbMembersVipLogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMembersVipLogDo) Limit(limit int) IFbMembersVipLogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMembersVipLogDo) Offset(offset int) IFbMembersVipLogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMembersVipLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersVipLogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMembersVipLogDo) Unscoped() IFbMembersVipLogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMembersVipLogDo) Create(values ...*model.FbMembersVipLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMembersVipLogDo) CreateInBatches(values []*model.FbMembersVipLog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMembersVipLogDo) Save(values ...*model.FbMembersVipLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMembersVipLogDo) First() (*model.FbMembersVipLog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVipLog), nil
	}
}

func (f fbMembersVipLogDo) Take() (*model.FbMembersVipLog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVipLog), nil
	}
}

func (f fbMembersVipLogDo) Last() (*model.FbMembersVipLog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVipLog), nil
	}
}

func (f fbMembersVipLogDo) Find() ([]*model.FbMembersVipLog, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMembersVipLog), err
}

func (f fbMembersVipLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersVipLog, err error) {
	buf := make([]*model.FbMembersVipLog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMembersVipLogDo) FindInBatches(result *[]*model.FbMembersVipLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMembersVipLogDo) Attrs(attrs ...field.AssignExpr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMembersVipLogDo) Assign(attrs ...field.AssignExpr) IFbMembersVipLogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMembersVipLogDo) Joins(fields ...field.RelationField) IFbMembersVipLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMembersVipLogDo) Preload(fields ...field.RelationField) IFbMembersVipLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMembersVipLogDo) FirstOrInit() (*model.FbMembersVipLog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVipLog), nil
	}
}

func (f fbMembersVipLogDo) FirstOrCreate() (*model.FbMembersVipLog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersVipLog), nil
	}
}

func (f fbMembersVipLogDo) FindByPage(offset int, limit int) (result []*model.FbMembersVipLog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMembersVipLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMembersVipLogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMembersVipLogDo) Delete(models ...*model.FbMembersVipLog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMembersVipLogDo) withDO(do gen.Dao) *fbMembersVipLogDo {
	f.DO = *do.(*gen.DO)
	return f
}
