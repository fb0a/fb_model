// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbShop(db *gorm.DB, opts ...gen.DOOption) fbShop {
	_fbShop := fbShop{}

	_fbShop.fbShopDo.UseDB(db, opts...)
	_fbShop.fbShopDo.UseModel(&model.FbShop{})

	tableName := _fbShop.fbShopDo.TableName()
	_fbShop.ALL = field.NewAsterisk(tableName)
	_fbShop.ID = field.NewInt32(tableName, "id")
	_fbShop.Name = field.NewString(tableName, "name")
	_fbShop.Address = field.NewString(tableName, "address")
	_fbShop.Domains = field.NewString(tableName, "domains")
	_fbShop.State = field.NewInt32(tableName, "state")
	_fbShop.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbShop.Note = field.NewString(tableName, "note")
	_fbShop.ReviewerTime = field.NewInt64(tableName, "reviewer_time")
	_fbShop.Reviewer = field.NewString(tableName, "reviewer")

	_fbShop.fillFieldMap()

	return _fbShop
}

type fbShop struct {
	fbShopDo

	ALL          field.Asterisk
	ID           field.Int32
	Name         field.String // 门店名
	Address      field.String // 门店地址
	Domains      field.String // 门店域名
	State        field.Int32  // 1:开启 2:关闭
	CreatedAt    field.Int64
	Note         field.String // 备注
	ReviewerTime field.Int64  // 操作时间
	Reviewer     field.String // 操作人

	fieldMap map[string]field.Expr
}

func (f fbShop) Table(newTableName string) *fbShop {
	f.fbShopDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbShop) As(alias string) *fbShop {
	f.fbShopDo.DO = *(f.fbShopDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbShop) updateTableName(table string) *fbShop {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.Address = field.NewString(table, "address")
	f.Domains = field.NewString(table, "domains")
	f.State = field.NewInt32(table, "state")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.Note = field.NewString(table, "note")
	f.ReviewerTime = field.NewInt64(table, "reviewer_time")
	f.Reviewer = field.NewString(table, "reviewer")

	f.fillFieldMap()

	return f
}

func (f *fbShop) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbShop) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["address"] = f.Address
	f.fieldMap["domains"] = f.Domains
	f.fieldMap["state"] = f.State
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["note"] = f.Note
	f.fieldMap["reviewer_time"] = f.ReviewerTime
	f.fieldMap["reviewer"] = f.Reviewer
}

func (f fbShop) clone(db *gorm.DB) fbShop {
	f.fbShopDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbShop) replaceDB(db *gorm.DB) fbShop {
	f.fbShopDo.ReplaceDB(db)
	return f
}

type fbShopDo struct{ gen.DO }

type IFbShopDo interface {
	gen.SubQuery
	Debug() IFbShopDo
	WithContext(ctx context.Context) IFbShopDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbShopDo
	WriteDB() IFbShopDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbShopDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbShopDo
	Not(conds ...gen.Condition) IFbShopDo
	Or(conds ...gen.Condition) IFbShopDo
	Select(conds ...field.Expr) IFbShopDo
	Where(conds ...gen.Condition) IFbShopDo
	Order(conds ...field.Expr) IFbShopDo
	Distinct(cols ...field.Expr) IFbShopDo
	Omit(cols ...field.Expr) IFbShopDo
	Join(table schema.Tabler, on ...field.Expr) IFbShopDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbShopDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbShopDo
	Group(cols ...field.Expr) IFbShopDo
	Having(conds ...gen.Condition) IFbShopDo
	Limit(limit int) IFbShopDo
	Offset(offset int) IFbShopDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbShopDo
	Unscoped() IFbShopDo
	Create(values ...*model.FbShop) error
	CreateInBatches(values []*model.FbShop, batchSize int) error
	Save(values ...*model.FbShop) error
	First() (*model.FbShop, error)
	Take() (*model.FbShop, error)
	Last() (*model.FbShop, error)
	Find() ([]*model.FbShop, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbShop, err error)
	FindInBatches(result *[]*model.FbShop, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbShop) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbShopDo
	Assign(attrs ...field.AssignExpr) IFbShopDo
	Joins(fields ...field.RelationField) IFbShopDo
	Preload(fields ...field.RelationField) IFbShopDo
	FirstOrInit() (*model.FbShop, error)
	FirstOrCreate() (*model.FbShop, error)
	FindByPage(offset int, limit int) (result []*model.FbShop, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbShopDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbShopDo) Debug() IFbShopDo {
	return f.withDO(f.DO.Debug())
}

func (f fbShopDo) WithContext(ctx context.Context) IFbShopDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbShopDo) ReadDB() IFbShopDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbShopDo) WriteDB() IFbShopDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbShopDo) Session(config *gorm.Session) IFbShopDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbShopDo) Clauses(conds ...clause.Expression) IFbShopDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbShopDo) Returning(value interface{}, columns ...string) IFbShopDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbShopDo) Not(conds ...gen.Condition) IFbShopDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbShopDo) Or(conds ...gen.Condition) IFbShopDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbShopDo) Select(conds ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbShopDo) Where(conds ...gen.Condition) IFbShopDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbShopDo) Order(conds ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbShopDo) Distinct(cols ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbShopDo) Omit(cols ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbShopDo) Join(table schema.Tabler, on ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbShopDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbShopDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbShopDo) Group(cols ...field.Expr) IFbShopDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbShopDo) Having(conds ...gen.Condition) IFbShopDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbShopDo) Limit(limit int) IFbShopDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbShopDo) Offset(offset int) IFbShopDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbShopDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbShopDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbShopDo) Unscoped() IFbShopDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbShopDo) Create(values ...*model.FbShop) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbShopDo) CreateInBatches(values []*model.FbShop, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbShopDo) Save(values ...*model.FbShop) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbShopDo) First() (*model.FbShop, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbShop), nil
	}
}

func (f fbShopDo) Take() (*model.FbShop, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbShop), nil
	}
}

func (f fbShopDo) Last() (*model.FbShop, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbShop), nil
	}
}

func (f fbShopDo) Find() ([]*model.FbShop, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbShop), err
}

func (f fbShopDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbShop, err error) {
	buf := make([]*model.FbShop, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbShopDo) FindInBatches(result *[]*model.FbShop, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbShopDo) Attrs(attrs ...field.AssignExpr) IFbShopDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbShopDo) Assign(attrs ...field.AssignExpr) IFbShopDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbShopDo) Joins(fields ...field.RelationField) IFbShopDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbShopDo) Preload(fields ...field.RelationField) IFbShopDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbShopDo) FirstOrInit() (*model.FbShop, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbShop), nil
	}
}

func (f fbShopDo) FirstOrCreate() (*model.FbShop, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbShop), nil
	}
}

func (f fbShopDo) FindByPage(offset int, limit int) (result []*model.FbShop, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbShopDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbShopDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbShopDo) Delete(models ...*model.FbShop) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbShopDo) withDO(do gen.Dao) *fbShopDo {
	f.DO = *do.(*gen.DO)
	return f
}
