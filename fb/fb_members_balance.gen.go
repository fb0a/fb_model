// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMembersBalance(db *gorm.DB, opts ...gen.DOOption) fbMembersBalance {
	_fbMembersBalance := fbMembersBalance{}

	_fbMembersBalance.fbMembersBalanceDo.UseDB(db, opts...)
	_fbMembersBalance.fbMembersBalanceDo.UseModel(&model.FbMembersBalance{})

	tableName := _fbMembersBalance.fbMembersBalanceDo.TableName()
	_fbMembersBalance.ALL = field.NewAsterisk(tableName)
	_fbMembersBalance.UID = field.NewUint64(tableName, "uid")
	_fbMembersBalance.Balance = field.NewFloat64(tableName, "balance")
	_fbMembersBalance.Available = field.NewFloat64(tableName, "available")
	_fbMembersBalance.Withdrawable = field.NewFloat64(tableName, "withdrawable")
	_fbMembersBalance.CreatedAt = field.NewUint64(tableName, "created_at")
	_fbMembersBalance.UpdatedAt = field.NewUint64(tableName, "updated_at")

	_fbMembersBalance.fillFieldMap()

	return _fbMembersBalance
}

// fbMembersBalance 会员余额表
type fbMembersBalance struct {
	fbMembersBalanceDo

	ALL          field.Asterisk
	UID          field.Uint64
	Balance      field.Float64 // 余额
	Available    field.Float64 // 可用余额
	Withdrawable field.Float64 // 可提现余额
	CreatedAt    field.Uint64  // 创建时间
	UpdatedAt    field.Uint64  // 创建时间

	fieldMap map[string]field.Expr
}

func (f fbMembersBalance) Table(newTableName string) *fbMembersBalance {
	f.fbMembersBalanceDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMembersBalance) As(alias string) *fbMembersBalance {
	f.fbMembersBalanceDo.DO = *(f.fbMembersBalanceDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMembersBalance) updateTableName(table string) *fbMembersBalance {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewUint64(table, "uid")
	f.Balance = field.NewFloat64(table, "balance")
	f.Available = field.NewFloat64(table, "available")
	f.Withdrawable = field.NewFloat64(table, "withdrawable")
	f.CreatedAt = field.NewUint64(table, "created_at")
	f.UpdatedAt = field.NewUint64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbMembersBalance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMembersBalance) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["balance"] = f.Balance
	f.fieldMap["available"] = f.Available
	f.fieldMap["withdrawable"] = f.Withdrawable
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbMembersBalance) clone(db *gorm.DB) fbMembersBalance {
	f.fbMembersBalanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMembersBalance) replaceDB(db *gorm.DB) fbMembersBalance {
	f.fbMembersBalanceDo.ReplaceDB(db)
	return f
}

type fbMembersBalanceDo struct{ gen.DO }

type IFbMembersBalanceDo interface {
	gen.SubQuery
	Debug() IFbMembersBalanceDo
	WithContext(ctx context.Context) IFbMembersBalanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMembersBalanceDo
	WriteDB() IFbMembersBalanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMembersBalanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMembersBalanceDo
	Not(conds ...gen.Condition) IFbMembersBalanceDo
	Or(conds ...gen.Condition) IFbMembersBalanceDo
	Select(conds ...field.Expr) IFbMembersBalanceDo
	Where(conds ...gen.Condition) IFbMembersBalanceDo
	Order(conds ...field.Expr) IFbMembersBalanceDo
	Distinct(cols ...field.Expr) IFbMembersBalanceDo
	Omit(cols ...field.Expr) IFbMembersBalanceDo
	Join(table schema.Tabler, on ...field.Expr) IFbMembersBalanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersBalanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersBalanceDo
	Group(cols ...field.Expr) IFbMembersBalanceDo
	Having(conds ...gen.Condition) IFbMembersBalanceDo
	Limit(limit int) IFbMembersBalanceDo
	Offset(offset int) IFbMembersBalanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersBalanceDo
	Unscoped() IFbMembersBalanceDo
	Create(values ...*model.FbMembersBalance) error
	CreateInBatches(values []*model.FbMembersBalance, batchSize int) error
	Save(values ...*model.FbMembersBalance) error
	First() (*model.FbMembersBalance, error)
	Take() (*model.FbMembersBalance, error)
	Last() (*model.FbMembersBalance, error)
	Find() ([]*model.FbMembersBalance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersBalance, err error)
	FindInBatches(result *[]*model.FbMembersBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMembersBalance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMembersBalanceDo
	Assign(attrs ...field.AssignExpr) IFbMembersBalanceDo
	Joins(fields ...field.RelationField) IFbMembersBalanceDo
	Preload(fields ...field.RelationField) IFbMembersBalanceDo
	FirstOrInit() (*model.FbMembersBalance, error)
	FirstOrCreate() (*model.FbMembersBalance, error)
	FindByPage(offset int, limit int) (result []*model.FbMembersBalance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMembersBalanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMembersBalanceDo) Debug() IFbMembersBalanceDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMembersBalanceDo) WithContext(ctx context.Context) IFbMembersBalanceDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMembersBalanceDo) ReadDB() IFbMembersBalanceDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMembersBalanceDo) WriteDB() IFbMembersBalanceDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMembersBalanceDo) Session(config *gorm.Session) IFbMembersBalanceDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMembersBalanceDo) Clauses(conds ...clause.Expression) IFbMembersBalanceDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMembersBalanceDo) Returning(value interface{}, columns ...string) IFbMembersBalanceDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMembersBalanceDo) Not(conds ...gen.Condition) IFbMembersBalanceDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMembersBalanceDo) Or(conds ...gen.Condition) IFbMembersBalanceDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMembersBalanceDo) Select(conds ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMembersBalanceDo) Where(conds ...gen.Condition) IFbMembersBalanceDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMembersBalanceDo) Order(conds ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMembersBalanceDo) Distinct(cols ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMembersBalanceDo) Omit(cols ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMembersBalanceDo) Join(table schema.Tabler, on ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMembersBalanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMembersBalanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMembersBalanceDo) Group(cols ...field.Expr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMembersBalanceDo) Having(conds ...gen.Condition) IFbMembersBalanceDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMembersBalanceDo) Limit(limit int) IFbMembersBalanceDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMembersBalanceDo) Offset(offset int) IFbMembersBalanceDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMembersBalanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersBalanceDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMembersBalanceDo) Unscoped() IFbMembersBalanceDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMembersBalanceDo) Create(values ...*model.FbMembersBalance) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMembersBalanceDo) CreateInBatches(values []*model.FbMembersBalance, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMembersBalanceDo) Save(values ...*model.FbMembersBalance) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMembersBalanceDo) First() (*model.FbMembersBalance, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBalance), nil
	}
}

func (f fbMembersBalanceDo) Take() (*model.FbMembersBalance, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBalance), nil
	}
}

func (f fbMembersBalanceDo) Last() (*model.FbMembersBalance, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBalance), nil
	}
}

func (f fbMembersBalanceDo) Find() ([]*model.FbMembersBalance, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMembersBalance), err
}

func (f fbMembersBalanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersBalance, err error) {
	buf := make([]*model.FbMembersBalance, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMembersBalanceDo) FindInBatches(result *[]*model.FbMembersBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMembersBalanceDo) Attrs(attrs ...field.AssignExpr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMembersBalanceDo) Assign(attrs ...field.AssignExpr) IFbMembersBalanceDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMembersBalanceDo) Joins(fields ...field.RelationField) IFbMembersBalanceDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMembersBalanceDo) Preload(fields ...field.RelationField) IFbMembersBalanceDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMembersBalanceDo) FirstOrInit() (*model.FbMembersBalance, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBalance), nil
	}
}

func (f fbMembersBalanceDo) FirstOrCreate() (*model.FbMembersBalance, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBalance), nil
	}
}

func (f fbMembersBalanceDo) FindByPage(offset int, limit int) (result []*model.FbMembersBalance, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMembersBalanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMembersBalanceDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMembersBalanceDo) Delete(models ...*model.FbMembersBalance) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMembersBalanceDo) withDO(do gen.Dao) *fbMembersBalanceDo {
	f.DO = *do.(*gen.DO)
	return f
}
