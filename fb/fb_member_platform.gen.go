// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMemberPlatform(db *gorm.DB, opts ...gen.DOOption) fbMemberPlatform {
	_fbMemberPlatform := fbMemberPlatform{}

	_fbMemberPlatform.fbMemberPlatformDo.UseDB(db, opts...)
	_fbMemberPlatform.fbMemberPlatformDo.UseModel(&model.FbMemberPlatform{})

	tableName := _fbMemberPlatform.fbMemberPlatformDo.TableName()
	_fbMemberPlatform.ALL = field.NewAsterisk(tableName)
	_fbMemberPlatform.ID = field.NewUint64(tableName, "id")
	_fbMemberPlatform.Phone = field.NewString(tableName, "phone")
	_fbMemberPlatform.Pid = field.NewUint64(tableName, "pid")
	_fbMemberPlatform.Password = field.NewString(tableName, "password")
	_fbMemberPlatform.State = field.NewInt32(tableName, "state")
	_fbMemberPlatform.CreatedAt = field.NewUint64(tableName, "created_at")

	_fbMemberPlatform.fillFieldMap()

	return _fbMemberPlatform
}

// fbMemberPlatform 会员场馆表
type fbMemberPlatform struct {
	fbMemberPlatformDo

	ALL       field.Asterisk
	ID        field.Uint64
	Phone     field.String // 用户名
	Pid       field.Uint64 // 场馆ID
	Password  field.String // 平台密码
	State     field.Int32  // 状态:1=正常,2=锁定
	CreatedAt field.Uint64

	fieldMap map[string]field.Expr
}

func (f fbMemberPlatform) Table(newTableName string) *fbMemberPlatform {
	f.fbMemberPlatformDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMemberPlatform) As(alias string) *fbMemberPlatform {
	f.fbMemberPlatformDo.DO = *(f.fbMemberPlatformDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMemberPlatform) updateTableName(table string) *fbMemberPlatform {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint64(table, "id")
	f.Phone = field.NewString(table, "phone")
	f.Pid = field.NewUint64(table, "pid")
	f.Password = field.NewString(table, "password")
	f.State = field.NewInt32(table, "state")
	f.CreatedAt = field.NewUint64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbMemberPlatform) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMemberPlatform) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["password"] = f.Password
	f.fieldMap["state"] = f.State
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbMemberPlatform) clone(db *gorm.DB) fbMemberPlatform {
	f.fbMemberPlatformDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMemberPlatform) replaceDB(db *gorm.DB) fbMemberPlatform {
	f.fbMemberPlatformDo.ReplaceDB(db)
	return f
}

type fbMemberPlatformDo struct{ gen.DO }

type IFbMemberPlatformDo interface {
	gen.SubQuery
	Debug() IFbMemberPlatformDo
	WithContext(ctx context.Context) IFbMemberPlatformDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMemberPlatformDo
	WriteDB() IFbMemberPlatformDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMemberPlatformDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMemberPlatformDo
	Not(conds ...gen.Condition) IFbMemberPlatformDo
	Or(conds ...gen.Condition) IFbMemberPlatformDo
	Select(conds ...field.Expr) IFbMemberPlatformDo
	Where(conds ...gen.Condition) IFbMemberPlatformDo
	Order(conds ...field.Expr) IFbMemberPlatformDo
	Distinct(cols ...field.Expr) IFbMemberPlatformDo
	Omit(cols ...field.Expr) IFbMemberPlatformDo
	Join(table schema.Tabler, on ...field.Expr) IFbMemberPlatformDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMemberPlatformDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMemberPlatformDo
	Group(cols ...field.Expr) IFbMemberPlatformDo
	Having(conds ...gen.Condition) IFbMemberPlatformDo
	Limit(limit int) IFbMemberPlatformDo
	Offset(offset int) IFbMemberPlatformDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMemberPlatformDo
	Unscoped() IFbMemberPlatformDo
	Create(values ...*model.FbMemberPlatform) error
	CreateInBatches(values []*model.FbMemberPlatform, batchSize int) error
	Save(values ...*model.FbMemberPlatform) error
	First() (*model.FbMemberPlatform, error)
	Take() (*model.FbMemberPlatform, error)
	Last() (*model.FbMemberPlatform, error)
	Find() ([]*model.FbMemberPlatform, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMemberPlatform, err error)
	FindInBatches(result *[]*model.FbMemberPlatform, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMemberPlatform) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMemberPlatformDo
	Assign(attrs ...field.AssignExpr) IFbMemberPlatformDo
	Joins(fields ...field.RelationField) IFbMemberPlatformDo
	Preload(fields ...field.RelationField) IFbMemberPlatformDo
	FirstOrInit() (*model.FbMemberPlatform, error)
	FirstOrCreate() (*model.FbMemberPlatform, error)
	FindByPage(offset int, limit int) (result []*model.FbMemberPlatform, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMemberPlatformDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMemberPlatformDo) Debug() IFbMemberPlatformDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMemberPlatformDo) WithContext(ctx context.Context) IFbMemberPlatformDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMemberPlatformDo) ReadDB() IFbMemberPlatformDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMemberPlatformDo) WriteDB() IFbMemberPlatformDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMemberPlatformDo) Session(config *gorm.Session) IFbMemberPlatformDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMemberPlatformDo) Clauses(conds ...clause.Expression) IFbMemberPlatformDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMemberPlatformDo) Returning(value interface{}, columns ...string) IFbMemberPlatformDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMemberPlatformDo) Not(conds ...gen.Condition) IFbMemberPlatformDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMemberPlatformDo) Or(conds ...gen.Condition) IFbMemberPlatformDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMemberPlatformDo) Select(conds ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMemberPlatformDo) Where(conds ...gen.Condition) IFbMemberPlatformDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMemberPlatformDo) Order(conds ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMemberPlatformDo) Distinct(cols ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMemberPlatformDo) Omit(cols ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMemberPlatformDo) Join(table schema.Tabler, on ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMemberPlatformDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMemberPlatformDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMemberPlatformDo) Group(cols ...field.Expr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMemberPlatformDo) Having(conds ...gen.Condition) IFbMemberPlatformDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMemberPlatformDo) Limit(limit int) IFbMemberPlatformDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMemberPlatformDo) Offset(offset int) IFbMemberPlatformDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMemberPlatformDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMemberPlatformDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMemberPlatformDo) Unscoped() IFbMemberPlatformDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMemberPlatformDo) Create(values ...*model.FbMemberPlatform) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMemberPlatformDo) CreateInBatches(values []*model.FbMemberPlatform, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMemberPlatformDo) Save(values ...*model.FbMemberPlatform) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMemberPlatformDo) First() (*model.FbMemberPlatform, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMemberPlatform), nil
	}
}

func (f fbMemberPlatformDo) Take() (*model.FbMemberPlatform, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMemberPlatform), nil
	}
}

func (f fbMemberPlatformDo) Last() (*model.FbMemberPlatform, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMemberPlatform), nil
	}
}

func (f fbMemberPlatformDo) Find() ([]*model.FbMemberPlatform, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMemberPlatform), err
}

func (f fbMemberPlatformDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMemberPlatform, err error) {
	buf := make([]*model.FbMemberPlatform, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMemberPlatformDo) FindInBatches(result *[]*model.FbMemberPlatform, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMemberPlatformDo) Attrs(attrs ...field.AssignExpr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMemberPlatformDo) Assign(attrs ...field.AssignExpr) IFbMemberPlatformDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMemberPlatformDo) Joins(fields ...field.RelationField) IFbMemberPlatformDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMemberPlatformDo) Preload(fields ...field.RelationField) IFbMemberPlatformDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMemberPlatformDo) FirstOrInit() (*model.FbMemberPlatform, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMemberPlatform), nil
	}
}

func (f fbMemberPlatformDo) FirstOrCreate() (*model.FbMemberPlatform, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMemberPlatform), nil
	}
}

func (f fbMemberPlatformDo) FindByPage(offset int, limit int) (result []*model.FbMemberPlatform, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMemberPlatformDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMemberPlatformDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMemberPlatformDo) Delete(models ...*model.FbMemberPlatform) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMemberPlatformDo) withDO(do gen.Dao) *fbMemberPlatformDo {
	f.DO = *do.(*gen.DO)
	return f
}
