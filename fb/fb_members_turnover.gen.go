// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMembersTurnover(db *gorm.DB, opts ...gen.DOOption) fbMembersTurnover {
	_fbMembersTurnover := fbMembersTurnover{}

	_fbMembersTurnover.fbMembersTurnoverDo.UseDB(db, opts...)
	_fbMembersTurnover.fbMembersTurnoverDo.UseModel(&model.FbMembersTurnover{})

	tableName := _fbMembersTurnover.fbMembersTurnoverDo.TableName()
	_fbMembersTurnover.ALL = field.NewAsterisk(tableName)
	_fbMembersTurnover.ID = field.NewInt64(tableName, "id")
	_fbMembersTurnover.UID = field.NewInt64(tableName, "uid")
	_fbMembersTurnover.Username = field.NewString(tableName, "username")
	_fbMembersTurnover.Phone = field.NewString(tableName, "phone")
	_fbMembersTurnover.ParentUID = field.NewInt64(tableName, "parent_uid")
	_fbMembersTurnover.ParentName = field.NewString(tableName, "parent_name")
	_fbMembersTurnover.Ty = field.NewInt32(tableName, "ty")
	_fbMembersTurnover.Pid = field.NewInt64(tableName, "pid")
	_fbMembersTurnover.Pname = field.NewString(tableName, "pname")
	_fbMembersTurnover.Bonus = field.NewFloat64(tableName, "bonus")
	_fbMembersTurnover.Locked = field.NewFloat64(tableName, "locked")
	_fbMembersTurnover.Multiple = field.NewFloat64(tableName, "multiple")
	_fbMembersTurnover.Turnover = field.NewFloat64(tableName, "turnover")
	_fbMembersTurnover.Finished = field.NewFloat64(tableName, "finished")
	_fbMembersTurnover.State = field.NewInt32(tableName, "state")
	_fbMembersTurnover.Plats = field.NewString(tableName, "plats")
	_fbMembersTurnover.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbMembersTurnover.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbMembersTurnover.UpdatedUID = field.NewInt64(tableName, "updated_uid")
	_fbMembersTurnover.UpdatedName = field.NewString(tableName, "updated_name")
	_fbMembersTurnover.Remark = field.NewString(tableName, "remark")

	_fbMembersTurnover.fillFieldMap()

	return _fbMembersTurnover
}

// fbMembersTurnover 会员流水记录表
type fbMembersTurnover struct {
	fbMembersTurnoverDo

	ALL         field.Asterisk
	ID          field.Int64
	UID         field.Int64   // 用户ID
	Username    field.String  // 用户名
	Phone       field.String  // 手机号
	ParentUID   field.Int64   // 上级UID
	ParentName  field.String  // 上级用户名
	Ty          field.Int32   // 流水类型 1后台上分 2活动彩金
	Pid         field.Int64   // 活动ID(仅活动彩金使用)
	Pname       field.String  // 活动名(仅活动彩金使用)
	Bonus       field.Float64 // 奖金金额
	Locked      field.Float64 // 锁定奖金金额
	Multiple    field.Float64 // 打码倍数
	Turnover    field.Float64 // 流水金额
	Finished    field.Float64 // 已完成流水金额
	State       field.Int32   // 状态 1:未完成 2:已完成 3清零
	Plats       field.String  // 流水计算场馆
	CreatedAt   field.Int64   // 创建时间
	UpdatedAt   field.Int64   // 更新时间
	UpdatedUID  field.Int64   // 更新人id
	UpdatedName field.String  // 更新人名
	Remark      field.String  // 备注

	fieldMap map[string]field.Expr
}

func (f fbMembersTurnover) Table(newTableName string) *fbMembersTurnover {
	f.fbMembersTurnoverDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMembersTurnover) As(alias string) *fbMembersTurnover {
	f.fbMembersTurnoverDo.DO = *(f.fbMembersTurnoverDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMembersTurnover) updateTableName(table string) *fbMembersTurnover {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.Phone = field.NewString(table, "phone")
	f.ParentUID = field.NewInt64(table, "parent_uid")
	f.ParentName = field.NewString(table, "parent_name")
	f.Ty = field.NewInt32(table, "ty")
	f.Pid = field.NewInt64(table, "pid")
	f.Pname = field.NewString(table, "pname")
	f.Bonus = field.NewFloat64(table, "bonus")
	f.Locked = field.NewFloat64(table, "locked")
	f.Multiple = field.NewFloat64(table, "multiple")
	f.Turnover = field.NewFloat64(table, "turnover")
	f.Finished = field.NewFloat64(table, "finished")
	f.State = field.NewInt32(table, "state")
	f.Plats = field.NewString(table, "plats")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.Remark = field.NewString(table, "remark")

	f.fillFieldMap()

	return f
}

func (f *fbMembersTurnover) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMembersTurnover) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 21)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["parent_uid"] = f.ParentUID
	f.fieldMap["parent_name"] = f.ParentName
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["pname"] = f.Pname
	f.fieldMap["bonus"] = f.Bonus
	f.fieldMap["locked"] = f.Locked
	f.fieldMap["multiple"] = f.Multiple
	f.fieldMap["turnover"] = f.Turnover
	f.fieldMap["finished"] = f.Finished
	f.fieldMap["state"] = f.State
	f.fieldMap["plats"] = f.Plats
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["remark"] = f.Remark
}

func (f fbMembersTurnover) clone(db *gorm.DB) fbMembersTurnover {
	f.fbMembersTurnoverDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMembersTurnover) replaceDB(db *gorm.DB) fbMembersTurnover {
	f.fbMembersTurnoverDo.ReplaceDB(db)
	return f
}

type fbMembersTurnoverDo struct{ gen.DO }

type IFbMembersTurnoverDo interface {
	gen.SubQuery
	Debug() IFbMembersTurnoverDo
	WithContext(ctx context.Context) IFbMembersTurnoverDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMembersTurnoverDo
	WriteDB() IFbMembersTurnoverDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMembersTurnoverDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMembersTurnoverDo
	Not(conds ...gen.Condition) IFbMembersTurnoverDo
	Or(conds ...gen.Condition) IFbMembersTurnoverDo
	Select(conds ...field.Expr) IFbMembersTurnoverDo
	Where(conds ...gen.Condition) IFbMembersTurnoverDo
	Order(conds ...field.Expr) IFbMembersTurnoverDo
	Distinct(cols ...field.Expr) IFbMembersTurnoverDo
	Omit(cols ...field.Expr) IFbMembersTurnoverDo
	Join(table schema.Tabler, on ...field.Expr) IFbMembersTurnoverDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersTurnoverDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersTurnoverDo
	Group(cols ...field.Expr) IFbMembersTurnoverDo
	Having(conds ...gen.Condition) IFbMembersTurnoverDo
	Limit(limit int) IFbMembersTurnoverDo
	Offset(offset int) IFbMembersTurnoverDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersTurnoverDo
	Unscoped() IFbMembersTurnoverDo
	Create(values ...*model.FbMembersTurnover) error
	CreateInBatches(values []*model.FbMembersTurnover, batchSize int) error
	Save(values ...*model.FbMembersTurnover) error
	First() (*model.FbMembersTurnover, error)
	Take() (*model.FbMembersTurnover, error)
	Last() (*model.FbMembersTurnover, error)
	Find() ([]*model.FbMembersTurnover, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersTurnover, err error)
	FindInBatches(result *[]*model.FbMembersTurnover, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMembersTurnover) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMembersTurnoverDo
	Assign(attrs ...field.AssignExpr) IFbMembersTurnoverDo
	Joins(fields ...field.RelationField) IFbMembersTurnoverDo
	Preload(fields ...field.RelationField) IFbMembersTurnoverDo
	FirstOrInit() (*model.FbMembersTurnover, error)
	FirstOrCreate() (*model.FbMembersTurnover, error)
	FindByPage(offset int, limit int) (result []*model.FbMembersTurnover, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMembersTurnoverDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMembersTurnoverDo) Debug() IFbMembersTurnoverDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMembersTurnoverDo) WithContext(ctx context.Context) IFbMembersTurnoverDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMembersTurnoverDo) ReadDB() IFbMembersTurnoverDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMembersTurnoverDo) WriteDB() IFbMembersTurnoverDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMembersTurnoverDo) Session(config *gorm.Session) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMembersTurnoverDo) Clauses(conds ...clause.Expression) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMembersTurnoverDo) Returning(value interface{}, columns ...string) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMembersTurnoverDo) Not(conds ...gen.Condition) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMembersTurnoverDo) Or(conds ...gen.Condition) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMembersTurnoverDo) Select(conds ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMembersTurnoverDo) Where(conds ...gen.Condition) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMembersTurnoverDo) Order(conds ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMembersTurnoverDo) Distinct(cols ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMembersTurnoverDo) Omit(cols ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMembersTurnoverDo) Join(table schema.Tabler, on ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMembersTurnoverDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMembersTurnoverDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMembersTurnoverDo) Group(cols ...field.Expr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMembersTurnoverDo) Having(conds ...gen.Condition) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMembersTurnoverDo) Limit(limit int) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMembersTurnoverDo) Offset(offset int) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMembersTurnoverDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMembersTurnoverDo) Unscoped() IFbMembersTurnoverDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMembersTurnoverDo) Create(values ...*model.FbMembersTurnover) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMembersTurnoverDo) CreateInBatches(values []*model.FbMembersTurnover, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMembersTurnoverDo) Save(values ...*model.FbMembersTurnover) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMembersTurnoverDo) First() (*model.FbMembersTurnover, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersTurnover), nil
	}
}

func (f fbMembersTurnoverDo) Take() (*model.FbMembersTurnover, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersTurnover), nil
	}
}

func (f fbMembersTurnoverDo) Last() (*model.FbMembersTurnover, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersTurnover), nil
	}
}

func (f fbMembersTurnoverDo) Find() ([]*model.FbMembersTurnover, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMembersTurnover), err
}

func (f fbMembersTurnoverDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersTurnover, err error) {
	buf := make([]*model.FbMembersTurnover, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMembersTurnoverDo) FindInBatches(result *[]*model.FbMembersTurnover, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMembersTurnoverDo) Attrs(attrs ...field.AssignExpr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMembersTurnoverDo) Assign(attrs ...field.AssignExpr) IFbMembersTurnoverDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMembersTurnoverDo) Joins(fields ...field.RelationField) IFbMembersTurnoverDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMembersTurnoverDo) Preload(fields ...field.RelationField) IFbMembersTurnoverDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMembersTurnoverDo) FirstOrInit() (*model.FbMembersTurnover, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersTurnover), nil
	}
}

func (f fbMembersTurnoverDo) FirstOrCreate() (*model.FbMembersTurnover, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersTurnover), nil
	}
}

func (f fbMembersTurnoverDo) FindByPage(offset int, limit int) (result []*model.FbMembersTurnover, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMembersTurnoverDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMembersTurnoverDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMembersTurnoverDo) Delete(models ...*model.FbMembersTurnover) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMembersTurnoverDo) withDO(do gen.Dao) *fbMembersTurnoverDo {
	f.DO = *do.(*gen.DO)
	return f
}
