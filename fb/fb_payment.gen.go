// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPayment(db *gorm.DB, opts ...gen.DOOption) fbPayment {
	_fbPayment := fbPayment{}

	_fbPayment.fbPaymentDo.UseDB(db, opts...)
	_fbPayment.fbPaymentDo.UseModel(&model.FbPayment{})

	tableName := _fbPayment.fbPaymentDo.TableName()
	_fbPayment.ALL = field.NewAsterisk(tableName)
	_fbPayment.ID = field.NewUint64(tableName, "id")
	_fbPayment.Name = field.NewString(tableName, "name")
	_fbPayment.State = field.NewInt32(tableName, "state")
	_fbPayment.Remark = field.NewString(tableName, "remark")
	_fbPayment.CreatedAt = field.NewUint64(tableName, "created_at")
	_fbPayment.UpdatedAt = field.NewUint64(tableName, "updated_at")
	_fbPayment.UpdatedUID = field.NewUint64(tableName, "updated_uid")
	_fbPayment.UpdatedName = field.NewString(tableName, "updated_name")

	_fbPayment.fillFieldMap()

	return _fbPayment
}

// fbPayment 支付渠道表
type fbPayment struct {
	fbPaymentDo

	ALL         field.Asterisk
	ID          field.Uint64
	Name        field.String // 渠道名
	State       field.Int32  // 会员状态，1=正常 2=停用
	Remark      field.String // 渠道备注
	CreatedAt   field.Uint64 // 创建时间
	UpdatedAt   field.Uint64 // 更新时间
	UpdatedUID  field.Uint64 // 更新管理员id
	UpdatedName field.String // 更新管理员帐号

	fieldMap map[string]field.Expr
}

func (f fbPayment) Table(newTableName string) *fbPayment {
	f.fbPaymentDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPayment) As(alias string) *fbPayment {
	f.fbPaymentDo.DO = *(f.fbPaymentDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPayment) updateTableName(table string) *fbPayment {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint64(table, "id")
	f.Name = field.NewString(table, "name")
	f.State = field.NewInt32(table, "state")
	f.Remark = field.NewString(table, "remark")
	f.CreatedAt = field.NewUint64(table, "created_at")
	f.UpdatedAt = field.NewUint64(table, "updated_at")
	f.UpdatedUID = field.NewUint64(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")

	f.fillFieldMap()

	return f
}

func (f *fbPayment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPayment) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["state"] = f.State
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
}

func (f fbPayment) clone(db *gorm.DB) fbPayment {
	f.fbPaymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPayment) replaceDB(db *gorm.DB) fbPayment {
	f.fbPaymentDo.ReplaceDB(db)
	return f
}

type fbPaymentDo struct{ gen.DO }

type IFbPaymentDo interface {
	gen.SubQuery
	Debug() IFbPaymentDo
	WithContext(ctx context.Context) IFbPaymentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPaymentDo
	WriteDB() IFbPaymentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPaymentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPaymentDo
	Not(conds ...gen.Condition) IFbPaymentDo
	Or(conds ...gen.Condition) IFbPaymentDo
	Select(conds ...field.Expr) IFbPaymentDo
	Where(conds ...gen.Condition) IFbPaymentDo
	Order(conds ...field.Expr) IFbPaymentDo
	Distinct(cols ...field.Expr) IFbPaymentDo
	Omit(cols ...field.Expr) IFbPaymentDo
	Join(table schema.Tabler, on ...field.Expr) IFbPaymentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPaymentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPaymentDo
	Group(cols ...field.Expr) IFbPaymentDo
	Having(conds ...gen.Condition) IFbPaymentDo
	Limit(limit int) IFbPaymentDo
	Offset(offset int) IFbPaymentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPaymentDo
	Unscoped() IFbPaymentDo
	Create(values ...*model.FbPayment) error
	CreateInBatches(values []*model.FbPayment, batchSize int) error
	Save(values ...*model.FbPayment) error
	First() (*model.FbPayment, error)
	Take() (*model.FbPayment, error)
	Last() (*model.FbPayment, error)
	Find() ([]*model.FbPayment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPayment, err error)
	FindInBatches(result *[]*model.FbPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPayment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPaymentDo
	Assign(attrs ...field.AssignExpr) IFbPaymentDo
	Joins(fields ...field.RelationField) IFbPaymentDo
	Preload(fields ...field.RelationField) IFbPaymentDo
	FirstOrInit() (*model.FbPayment, error)
	FirstOrCreate() (*model.FbPayment, error)
	FindByPage(offset int, limit int) (result []*model.FbPayment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPaymentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPaymentDo) Debug() IFbPaymentDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPaymentDo) WithContext(ctx context.Context) IFbPaymentDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPaymentDo) ReadDB() IFbPaymentDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPaymentDo) WriteDB() IFbPaymentDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPaymentDo) Session(config *gorm.Session) IFbPaymentDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPaymentDo) Clauses(conds ...clause.Expression) IFbPaymentDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPaymentDo) Returning(value interface{}, columns ...string) IFbPaymentDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPaymentDo) Not(conds ...gen.Condition) IFbPaymentDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPaymentDo) Or(conds ...gen.Condition) IFbPaymentDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPaymentDo) Select(conds ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPaymentDo) Where(conds ...gen.Condition) IFbPaymentDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPaymentDo) Order(conds ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPaymentDo) Distinct(cols ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPaymentDo) Omit(cols ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPaymentDo) Join(table schema.Tabler, on ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPaymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPaymentDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPaymentDo) Group(cols ...field.Expr) IFbPaymentDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPaymentDo) Having(conds ...gen.Condition) IFbPaymentDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPaymentDo) Limit(limit int) IFbPaymentDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPaymentDo) Offset(offset int) IFbPaymentDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPaymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPaymentDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPaymentDo) Unscoped() IFbPaymentDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPaymentDo) Create(values ...*model.FbPayment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPaymentDo) CreateInBatches(values []*model.FbPayment, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPaymentDo) Save(values ...*model.FbPayment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPaymentDo) First() (*model.FbPayment, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPayment), nil
	}
}

func (f fbPaymentDo) Take() (*model.FbPayment, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPayment), nil
	}
}

func (f fbPaymentDo) Last() (*model.FbPayment, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPayment), nil
	}
}

func (f fbPaymentDo) Find() ([]*model.FbPayment, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPayment), err
}

func (f fbPaymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPayment, err error) {
	buf := make([]*model.FbPayment, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPaymentDo) FindInBatches(result *[]*model.FbPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPaymentDo) Attrs(attrs ...field.AssignExpr) IFbPaymentDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPaymentDo) Assign(attrs ...field.AssignExpr) IFbPaymentDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPaymentDo) Joins(fields ...field.RelationField) IFbPaymentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPaymentDo) Preload(fields ...field.RelationField) IFbPaymentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPaymentDo) FirstOrInit() (*model.FbPayment, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPayment), nil
	}
}

func (f fbPaymentDo) FirstOrCreate() (*model.FbPayment, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPayment), nil
	}
}

func (f fbPaymentDo) FindByPage(offset int, limit int) (result []*model.FbPayment, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPaymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPaymentDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPaymentDo) Delete(models ...*model.FbPayment) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPaymentDo) withDO(do gen.Dao) *fbPaymentDo {
	f.DO = *do.(*gen.DO)
	return f
}
