// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbDailyMemberRegisterReport(db *gorm.DB, opts ...gen.DOOption) fbDailyMemberRegisterReport {
	_fbDailyMemberRegisterReport := fbDailyMemberRegisterReport{}

	_fbDailyMemberRegisterReport.fbDailyMemberRegisterReportDo.UseDB(db, opts...)
	_fbDailyMemberRegisterReport.fbDailyMemberRegisterReportDo.UseModel(&model.FbDailyMemberRegisterReport{})

	tableName := _fbDailyMemberRegisterReport.fbDailyMemberRegisterReportDo.TableName()
	_fbDailyMemberRegisterReport.ALL = field.NewAsterisk(tableName)
	_fbDailyMemberRegisterReport.ID = field.NewInt64(tableName, "id")
	_fbDailyMemberRegisterReport.Day = field.NewInt32(tableName, "day")
	_fbDailyMemberRegisterReport.ReportType = field.NewInt32(tableName, "report_type")
	_fbDailyMemberRegisterReport.Type = field.NewInt32(tableName, "type")
	_fbDailyMemberRegisterReport.Name = field.NewString(tableName, "name")
	_fbDailyMemberRegisterReport.Num = field.NewInt64(tableName, "num")
	_fbDailyMemberRegisterReport.CreatedAt = field.NewInt64(tableName, "created_at")

	_fbDailyMemberRegisterReport.fillFieldMap()

	return _fbDailyMemberRegisterReport
}

type fbDailyMemberRegisterReport struct {
	fbDailyMemberRegisterReportDo

	ALL        field.Asterisk
	ID         field.Int64  // ID
	Day        field.Int32  // 年月日
	ReportType field.Int32  // 1日报，2周报，3月报，4总计
	Type       field.Int32  // 1IP，2设备
	Name       field.String // type 对应的统计对象
	Num        field.Int64  // 数量
	CreatedAt  field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (f fbDailyMemberRegisterReport) Table(newTableName string) *fbDailyMemberRegisterReport {
	f.fbDailyMemberRegisterReportDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbDailyMemberRegisterReport) As(alias string) *fbDailyMemberRegisterReport {
	f.fbDailyMemberRegisterReportDo.DO = *(f.fbDailyMemberRegisterReportDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbDailyMemberRegisterReport) updateTableName(table string) *fbDailyMemberRegisterReport {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.ReportType = field.NewInt32(table, "report_type")
	f.Type = field.NewInt32(table, "type")
	f.Name = field.NewString(table, "name")
	f.Num = field.NewInt64(table, "num")
	f.CreatedAt = field.NewInt64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbDailyMemberRegisterReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbDailyMemberRegisterReport) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["report_type"] = f.ReportType
	f.fieldMap["type"] = f.Type
	f.fieldMap["name"] = f.Name
	f.fieldMap["num"] = f.Num
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbDailyMemberRegisterReport) clone(db *gorm.DB) fbDailyMemberRegisterReport {
	f.fbDailyMemberRegisterReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbDailyMemberRegisterReport) replaceDB(db *gorm.DB) fbDailyMemberRegisterReport {
	f.fbDailyMemberRegisterReportDo.ReplaceDB(db)
	return f
}

type fbDailyMemberRegisterReportDo struct{ gen.DO }

type IFbDailyMemberRegisterReportDo interface {
	gen.SubQuery
	Debug() IFbDailyMemberRegisterReportDo
	WithContext(ctx context.Context) IFbDailyMemberRegisterReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbDailyMemberRegisterReportDo
	WriteDB() IFbDailyMemberRegisterReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbDailyMemberRegisterReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbDailyMemberRegisterReportDo
	Not(conds ...gen.Condition) IFbDailyMemberRegisterReportDo
	Or(conds ...gen.Condition) IFbDailyMemberRegisterReportDo
	Select(conds ...field.Expr) IFbDailyMemberRegisterReportDo
	Where(conds ...gen.Condition) IFbDailyMemberRegisterReportDo
	Order(conds ...field.Expr) IFbDailyMemberRegisterReportDo
	Distinct(cols ...field.Expr) IFbDailyMemberRegisterReportDo
	Omit(cols ...field.Expr) IFbDailyMemberRegisterReportDo
	Join(table schema.Tabler, on ...field.Expr) IFbDailyMemberRegisterReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyMemberRegisterReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyMemberRegisterReportDo
	Group(cols ...field.Expr) IFbDailyMemberRegisterReportDo
	Having(conds ...gen.Condition) IFbDailyMemberRegisterReportDo
	Limit(limit int) IFbDailyMemberRegisterReportDo
	Offset(offset int) IFbDailyMemberRegisterReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyMemberRegisterReportDo
	Unscoped() IFbDailyMemberRegisterReportDo
	Create(values ...*model.FbDailyMemberRegisterReport) error
	CreateInBatches(values []*model.FbDailyMemberRegisterReport, batchSize int) error
	Save(values ...*model.FbDailyMemberRegisterReport) error
	First() (*model.FbDailyMemberRegisterReport, error)
	Take() (*model.FbDailyMemberRegisterReport, error)
	Last() (*model.FbDailyMemberRegisterReport, error)
	Find() ([]*model.FbDailyMemberRegisterReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyMemberRegisterReport, err error)
	FindInBatches(result *[]*model.FbDailyMemberRegisterReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbDailyMemberRegisterReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbDailyMemberRegisterReportDo
	Assign(attrs ...field.AssignExpr) IFbDailyMemberRegisterReportDo
	Joins(fields ...field.RelationField) IFbDailyMemberRegisterReportDo
	Preload(fields ...field.RelationField) IFbDailyMemberRegisterReportDo
	FirstOrInit() (*model.FbDailyMemberRegisterReport, error)
	FirstOrCreate() (*model.FbDailyMemberRegisterReport, error)
	FindByPage(offset int, limit int) (result []*model.FbDailyMemberRegisterReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbDailyMemberRegisterReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbDailyMemberRegisterReportDo) Debug() IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Debug())
}

func (f fbDailyMemberRegisterReportDo) WithContext(ctx context.Context) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbDailyMemberRegisterReportDo) ReadDB() IFbDailyMemberRegisterReportDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbDailyMemberRegisterReportDo) WriteDB() IFbDailyMemberRegisterReportDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbDailyMemberRegisterReportDo) Session(config *gorm.Session) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbDailyMemberRegisterReportDo) Clauses(conds ...clause.Expression) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbDailyMemberRegisterReportDo) Returning(value interface{}, columns ...string) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbDailyMemberRegisterReportDo) Not(conds ...gen.Condition) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbDailyMemberRegisterReportDo) Or(conds ...gen.Condition) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbDailyMemberRegisterReportDo) Select(conds ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbDailyMemberRegisterReportDo) Where(conds ...gen.Condition) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbDailyMemberRegisterReportDo) Order(conds ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbDailyMemberRegisterReportDo) Distinct(cols ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbDailyMemberRegisterReportDo) Omit(cols ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbDailyMemberRegisterReportDo) Join(table schema.Tabler, on ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbDailyMemberRegisterReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbDailyMemberRegisterReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbDailyMemberRegisterReportDo) Group(cols ...field.Expr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbDailyMemberRegisterReportDo) Having(conds ...gen.Condition) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbDailyMemberRegisterReportDo) Limit(limit int) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbDailyMemberRegisterReportDo) Offset(offset int) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbDailyMemberRegisterReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbDailyMemberRegisterReportDo) Unscoped() IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbDailyMemberRegisterReportDo) Create(values ...*model.FbDailyMemberRegisterReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbDailyMemberRegisterReportDo) CreateInBatches(values []*model.FbDailyMemberRegisterReport, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbDailyMemberRegisterReportDo) Save(values ...*model.FbDailyMemberRegisterReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbDailyMemberRegisterReportDo) First() (*model.FbDailyMemberRegisterReport, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyMemberRegisterReport), nil
	}
}

func (f fbDailyMemberRegisterReportDo) Take() (*model.FbDailyMemberRegisterReport, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyMemberRegisterReport), nil
	}
}

func (f fbDailyMemberRegisterReportDo) Last() (*model.FbDailyMemberRegisterReport, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyMemberRegisterReport), nil
	}
}

func (f fbDailyMemberRegisterReportDo) Find() ([]*model.FbDailyMemberRegisterReport, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbDailyMemberRegisterReport), err
}

func (f fbDailyMemberRegisterReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyMemberRegisterReport, err error) {
	buf := make([]*model.FbDailyMemberRegisterReport, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbDailyMemberRegisterReportDo) FindInBatches(result *[]*model.FbDailyMemberRegisterReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbDailyMemberRegisterReportDo) Attrs(attrs ...field.AssignExpr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbDailyMemberRegisterReportDo) Assign(attrs ...field.AssignExpr) IFbDailyMemberRegisterReportDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbDailyMemberRegisterReportDo) Joins(fields ...field.RelationField) IFbDailyMemberRegisterReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbDailyMemberRegisterReportDo) Preload(fields ...field.RelationField) IFbDailyMemberRegisterReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbDailyMemberRegisterReportDo) FirstOrInit() (*model.FbDailyMemberRegisterReport, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyMemberRegisterReport), nil
	}
}

func (f fbDailyMemberRegisterReportDo) FirstOrCreate() (*model.FbDailyMemberRegisterReport, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyMemberRegisterReport), nil
	}
}

func (f fbDailyMemberRegisterReportDo) FindByPage(offset int, limit int) (result []*model.FbDailyMemberRegisterReport, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbDailyMemberRegisterReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbDailyMemberRegisterReportDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbDailyMemberRegisterReportDo) Delete(models ...*model.FbDailyMemberRegisterReport) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbDailyMemberRegisterReportDo) withDO(do gen.Dao) *fbDailyMemberRegisterReportDo {
	f.DO = *do.(*gen.DO)
	return f
}
