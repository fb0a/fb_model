// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbTaskList(db *gorm.DB, opts ...gen.DOOption) fbTaskList {
	_fbTaskList := fbTaskList{}

	_fbTaskList.fbTaskListDo.UseDB(db, opts...)
	_fbTaskList.fbTaskListDo.UseModel(&model.FbTaskList{})

	tableName := _fbTaskList.fbTaskListDo.TableName()
	_fbTaskList.ALL = field.NewAsterisk(tableName)
	_fbTaskList.ID = field.NewInt64(tableName, "id")
	_fbTaskList.Name = field.NewString(tableName, "name")
	_fbTaskList.TaskCategory = field.NewInt32(tableName, "task_category")
	_fbTaskList.Ty = field.NewInt32(tableName, "ty")
	_fbTaskList.State = field.NewInt32(tableName, "state")
	_fbTaskList.Config = field.NewString(tableName, "config")
	_fbTaskList.StartAt = field.NewInt64(tableName, "start_at")
	_fbTaskList.EndAt = field.NewInt64(tableName, "end_at")
	_fbTaskList.Multiple = field.NewString(tableName, "multiple")
	_fbTaskList.Recommend = field.NewInt32(tableName, "recommend")
	_fbTaskList.Sort = field.NewInt32(tableName, "sort")
	_fbTaskList.Images = field.NewString(tableName, "images")
	_fbTaskList.Summary = field.NewString(tableName, "summary")
	_fbTaskList.DisplayType = field.NewInt32(tableName, "display_type")
	_fbTaskList.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbTaskList.CreatedUID = field.NewInt64(tableName, "created_uid")
	_fbTaskList.CreatedName = field.NewString(tableName, "created_name")
	_fbTaskList.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbTaskList.UpdatedUID = field.NewInt64(tableName, "updated_uid")
	_fbTaskList.UpdatedName = field.NewString(tableName, "updated_name")
	_fbTaskList.NameTa = field.NewString(tableName, "name_ta")
	_fbTaskList.SummaryTa = field.NewString(tableName, "summary_ta")
	_fbTaskList.Vip = field.NewInt32(tableName, "vip")
	_fbTaskList.VipLevel = field.NewString(tableName, "vip_level")

	_fbTaskList.fillFieldMap()

	return _fbTaskList
}

// fbTaskList 任务列表
type fbTaskList struct {
	fbTaskListDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String // 任务名称英文名称
	TaskCategory field.Int32  // 任务大类 1新手任务，2日常任务
	Ty           field.Int32  // 任务类型
	State        field.Int32  // 状态 1开启 2关闭 3未开启 4已删除
	Config       field.String // 活动配置
	StartAt      field.Int64  // 开始时间
	EndAt        field.Int64  // 结束时间
	Multiple     field.String // 流水倍数
	Recommend    field.Int32  // 推荐状态 1推荐 2不推荐
	Sort         field.Int32  // 英语排序
	Images       field.String // 图片(包含背景图和logo)
	Summary      field.String // 简介
	DisplayType  field.Int32  // // 展示方式 1:内置页面 2:跳转外部链接
	CreatedAt    field.Int64  // 创建时间
	CreatedUID   field.Int64  // 创建人uid
	CreatedName  field.String // 创建人名
	UpdatedAt    field.Int64  // 修改时间
	UpdatedUID   field.Int64  // 修改人uid
	UpdatedName  field.String // 修改人名
	NameTa       field.String
	SummaryTa    field.String
	Vip          field.Int32
	VipLevel     field.String

	fieldMap map[string]field.Expr
}

func (f fbTaskList) Table(newTableName string) *fbTaskList {
	f.fbTaskListDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbTaskList) As(alias string) *fbTaskList {
	f.fbTaskListDo.DO = *(f.fbTaskListDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbTaskList) updateTableName(table string) *fbTaskList {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.TaskCategory = field.NewInt32(table, "task_category")
	f.Ty = field.NewInt32(table, "ty")
	f.State = field.NewInt32(table, "state")
	f.Config = field.NewString(table, "config")
	f.StartAt = field.NewInt64(table, "start_at")
	f.EndAt = field.NewInt64(table, "end_at")
	f.Multiple = field.NewString(table, "multiple")
	f.Recommend = field.NewInt32(table, "recommend")
	f.Sort = field.NewInt32(table, "sort")
	f.Images = field.NewString(table, "images")
	f.Summary = field.NewString(table, "summary")
	f.DisplayType = field.NewInt32(table, "display_type")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.CreatedUID = field.NewInt64(table, "created_uid")
	f.CreatedName = field.NewString(table, "created_name")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.NameTa = field.NewString(table, "name_ta")
	f.SummaryTa = field.NewString(table, "summary_ta")
	f.Vip = field.NewInt32(table, "vip")
	f.VipLevel = field.NewString(table, "vip_level")

	f.fillFieldMap()

	return f
}

func (f *fbTaskList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbTaskList) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 24)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["task_category"] = f.TaskCategory
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["state"] = f.State
	f.fieldMap["config"] = f.Config
	f.fieldMap["start_at"] = f.StartAt
	f.fieldMap["end_at"] = f.EndAt
	f.fieldMap["multiple"] = f.Multiple
	f.fieldMap["recommend"] = f.Recommend
	f.fieldMap["sort"] = f.Sort
	f.fieldMap["images"] = f.Images
	f.fieldMap["summary"] = f.Summary
	f.fieldMap["display_type"] = f.DisplayType
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["created_uid"] = f.CreatedUID
	f.fieldMap["created_name"] = f.CreatedName
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_uid"] = f.UpdatedUID
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["name_ta"] = f.NameTa
	f.fieldMap["summary_ta"] = f.SummaryTa
	f.fieldMap["vip"] = f.Vip
	f.fieldMap["vip_level"] = f.VipLevel
}

func (f fbTaskList) clone(db *gorm.DB) fbTaskList {
	f.fbTaskListDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbTaskList) replaceDB(db *gorm.DB) fbTaskList {
	f.fbTaskListDo.ReplaceDB(db)
	return f
}

type fbTaskListDo struct{ gen.DO }

type IFbTaskListDo interface {
	gen.SubQuery
	Debug() IFbTaskListDo
	WithContext(ctx context.Context) IFbTaskListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbTaskListDo
	WriteDB() IFbTaskListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbTaskListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbTaskListDo
	Not(conds ...gen.Condition) IFbTaskListDo
	Or(conds ...gen.Condition) IFbTaskListDo
	Select(conds ...field.Expr) IFbTaskListDo
	Where(conds ...gen.Condition) IFbTaskListDo
	Order(conds ...field.Expr) IFbTaskListDo
	Distinct(cols ...field.Expr) IFbTaskListDo
	Omit(cols ...field.Expr) IFbTaskListDo
	Join(table schema.Tabler, on ...field.Expr) IFbTaskListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbTaskListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbTaskListDo
	Group(cols ...field.Expr) IFbTaskListDo
	Having(conds ...gen.Condition) IFbTaskListDo
	Limit(limit int) IFbTaskListDo
	Offset(offset int) IFbTaskListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbTaskListDo
	Unscoped() IFbTaskListDo
	Create(values ...*model.FbTaskList) error
	CreateInBatches(values []*model.FbTaskList, batchSize int) error
	Save(values ...*model.FbTaskList) error
	First() (*model.FbTaskList, error)
	Take() (*model.FbTaskList, error)
	Last() (*model.FbTaskList, error)
	Find() ([]*model.FbTaskList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbTaskList, err error)
	FindInBatches(result *[]*model.FbTaskList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbTaskList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbTaskListDo
	Assign(attrs ...field.AssignExpr) IFbTaskListDo
	Joins(fields ...field.RelationField) IFbTaskListDo
	Preload(fields ...field.RelationField) IFbTaskListDo
	FirstOrInit() (*model.FbTaskList, error)
	FirstOrCreate() (*model.FbTaskList, error)
	FindByPage(offset int, limit int) (result []*model.FbTaskList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbTaskListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbTaskListDo) Debug() IFbTaskListDo {
	return f.withDO(f.DO.Debug())
}

func (f fbTaskListDo) WithContext(ctx context.Context) IFbTaskListDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbTaskListDo) ReadDB() IFbTaskListDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbTaskListDo) WriteDB() IFbTaskListDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbTaskListDo) Session(config *gorm.Session) IFbTaskListDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbTaskListDo) Clauses(conds ...clause.Expression) IFbTaskListDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbTaskListDo) Returning(value interface{}, columns ...string) IFbTaskListDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbTaskListDo) Not(conds ...gen.Condition) IFbTaskListDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbTaskListDo) Or(conds ...gen.Condition) IFbTaskListDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbTaskListDo) Select(conds ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbTaskListDo) Where(conds ...gen.Condition) IFbTaskListDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbTaskListDo) Order(conds ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbTaskListDo) Distinct(cols ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbTaskListDo) Omit(cols ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbTaskListDo) Join(table schema.Tabler, on ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbTaskListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbTaskListDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbTaskListDo) Group(cols ...field.Expr) IFbTaskListDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbTaskListDo) Having(conds ...gen.Condition) IFbTaskListDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbTaskListDo) Limit(limit int) IFbTaskListDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbTaskListDo) Offset(offset int) IFbTaskListDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbTaskListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbTaskListDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbTaskListDo) Unscoped() IFbTaskListDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbTaskListDo) Create(values ...*model.FbTaskList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbTaskListDo) CreateInBatches(values []*model.FbTaskList, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbTaskListDo) Save(values ...*model.FbTaskList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbTaskListDo) First() (*model.FbTaskList, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbTaskList), nil
	}
}

func (f fbTaskListDo) Take() (*model.FbTaskList, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbTaskList), nil
	}
}

func (f fbTaskListDo) Last() (*model.FbTaskList, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbTaskList), nil
	}
}

func (f fbTaskListDo) Find() ([]*model.FbTaskList, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbTaskList), err
}

func (f fbTaskListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbTaskList, err error) {
	buf := make([]*model.FbTaskList, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbTaskListDo) FindInBatches(result *[]*model.FbTaskList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbTaskListDo) Attrs(attrs ...field.AssignExpr) IFbTaskListDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbTaskListDo) Assign(attrs ...field.AssignExpr) IFbTaskListDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbTaskListDo) Joins(fields ...field.RelationField) IFbTaskListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbTaskListDo) Preload(fields ...field.RelationField) IFbTaskListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbTaskListDo) FirstOrInit() (*model.FbTaskList, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbTaskList), nil
	}
}

func (f fbTaskListDo) FirstOrCreate() (*model.FbTaskList, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbTaskList), nil
	}
}

func (f fbTaskListDo) FindByPage(offset int, limit int) (result []*model.FbTaskList, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbTaskListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbTaskListDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbTaskListDo) Delete(models ...*model.FbTaskList) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbTaskListDo) withDO(do gen.Dao) *fbTaskListDo {
	f.DO = *do.(*gen.DO)
	return f
}
