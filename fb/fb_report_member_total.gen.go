// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbReportMemberTotal(db *gorm.DB, opts ...gen.DOOption) fbReportMemberTotal {
	_fbReportMemberTotal := fbReportMemberTotal{}

	_fbReportMemberTotal.fbReportMemberTotalDo.UseDB(db, opts...)
	_fbReportMemberTotal.fbReportMemberTotalDo.UseModel(&model.FbReportMemberTotal{})

	tableName := _fbReportMemberTotal.fbReportMemberTotalDo.TableName()
	_fbReportMemberTotal.ALL = field.NewAsterisk(tableName)
	_fbReportMemberTotal.UID = field.NewInt64(tableName, "uid")
	_fbReportMemberTotal.Phone = field.NewString(tableName, "phone")
	_fbReportMemberTotal.Username = field.NewString(tableName, "username")
	_fbReportMemberTotal.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_fbReportMemberTotal.SettleAmount = field.NewFloat64(tableName, "settle_amount")
	_fbReportMemberTotal.Ggr = field.NewFloat64(tableName, "ggr")
	_fbReportMemberTotal.DepositAmount = field.NewFloat64(tableName, "deposit_amount")
	_fbReportMemberTotal.WithdrawAmount = field.NewFloat64(tableName, "withdraw_amount")
	_fbReportMemberTotal.CreatedAt = field.NewInt64(tableName, "created_at")

	_fbReportMemberTotal.fillFieldMap()

	return _fbReportMemberTotal
}

// fbReportMemberTotal 会员总报表
type fbReportMemberTotal struct {
	fbReportMemberTotalDo

	ALL            field.Asterisk
	UID            field.Int64
	Phone          field.String  // 手机号
	Username       field.String  // 用户名
	ValidBetAmount field.Float64 // 投注额
	SettleAmount   field.Float64 // 派彩额
	Ggr            field.Float64 // GGR
	DepositAmount  field.Float64 // 存款额
	WithdrawAmount field.Float64 // 提款额
	CreatedAt      field.Int64

	fieldMap map[string]field.Expr
}

func (f fbReportMemberTotal) Table(newTableName string) *fbReportMemberTotal {
	f.fbReportMemberTotalDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbReportMemberTotal) As(alias string) *fbReportMemberTotal {
	f.fbReportMemberTotalDo.DO = *(f.fbReportMemberTotalDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbReportMemberTotal) updateTableName(table string) *fbReportMemberTotal {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewInt64(table, "uid")
	f.Phone = field.NewString(table, "phone")
	f.Username = field.NewString(table, "username")
	f.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	f.SettleAmount = field.NewFloat64(table, "settle_amount")
	f.Ggr = field.NewFloat64(table, "ggr")
	f.DepositAmount = field.NewFloat64(table, "deposit_amount")
	f.WithdrawAmount = field.NewFloat64(table, "withdraw_amount")
	f.CreatedAt = field.NewInt64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbReportMemberTotal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbReportMemberTotal) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["username"] = f.Username
	f.fieldMap["valid_bet_amount"] = f.ValidBetAmount
	f.fieldMap["settle_amount"] = f.SettleAmount
	f.fieldMap["ggr"] = f.Ggr
	f.fieldMap["deposit_amount"] = f.DepositAmount
	f.fieldMap["withdraw_amount"] = f.WithdrawAmount
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbReportMemberTotal) clone(db *gorm.DB) fbReportMemberTotal {
	f.fbReportMemberTotalDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbReportMemberTotal) replaceDB(db *gorm.DB) fbReportMemberTotal {
	f.fbReportMemberTotalDo.ReplaceDB(db)
	return f
}

type fbReportMemberTotalDo struct{ gen.DO }

type IFbReportMemberTotalDo interface {
	gen.SubQuery
	Debug() IFbReportMemberTotalDo
	WithContext(ctx context.Context) IFbReportMemberTotalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbReportMemberTotalDo
	WriteDB() IFbReportMemberTotalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbReportMemberTotalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbReportMemberTotalDo
	Not(conds ...gen.Condition) IFbReportMemberTotalDo
	Or(conds ...gen.Condition) IFbReportMemberTotalDo
	Select(conds ...field.Expr) IFbReportMemberTotalDo
	Where(conds ...gen.Condition) IFbReportMemberTotalDo
	Order(conds ...field.Expr) IFbReportMemberTotalDo
	Distinct(cols ...field.Expr) IFbReportMemberTotalDo
	Omit(cols ...field.Expr) IFbReportMemberTotalDo
	Join(table schema.Tabler, on ...field.Expr) IFbReportMemberTotalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberTotalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberTotalDo
	Group(cols ...field.Expr) IFbReportMemberTotalDo
	Having(conds ...gen.Condition) IFbReportMemberTotalDo
	Limit(limit int) IFbReportMemberTotalDo
	Offset(offset int) IFbReportMemberTotalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberTotalDo
	Unscoped() IFbReportMemberTotalDo
	Create(values ...*model.FbReportMemberTotal) error
	CreateInBatches(values []*model.FbReportMemberTotal, batchSize int) error
	Save(values ...*model.FbReportMemberTotal) error
	First() (*model.FbReportMemberTotal, error)
	Take() (*model.FbReportMemberTotal, error)
	Last() (*model.FbReportMemberTotal, error)
	Find() ([]*model.FbReportMemberTotal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMemberTotal, err error)
	FindInBatches(result *[]*model.FbReportMemberTotal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbReportMemberTotal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbReportMemberTotalDo
	Assign(attrs ...field.AssignExpr) IFbReportMemberTotalDo
	Joins(fields ...field.RelationField) IFbReportMemberTotalDo
	Preload(fields ...field.RelationField) IFbReportMemberTotalDo
	FirstOrInit() (*model.FbReportMemberTotal, error)
	FirstOrCreate() (*model.FbReportMemberTotal, error)
	FindByPage(offset int, limit int) (result []*model.FbReportMemberTotal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbReportMemberTotalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbReportMemberTotalDo) Debug() IFbReportMemberTotalDo {
	return f.withDO(f.DO.Debug())
}

func (f fbReportMemberTotalDo) WithContext(ctx context.Context) IFbReportMemberTotalDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbReportMemberTotalDo) ReadDB() IFbReportMemberTotalDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbReportMemberTotalDo) WriteDB() IFbReportMemberTotalDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbReportMemberTotalDo) Session(config *gorm.Session) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbReportMemberTotalDo) Clauses(conds ...clause.Expression) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbReportMemberTotalDo) Returning(value interface{}, columns ...string) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbReportMemberTotalDo) Not(conds ...gen.Condition) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbReportMemberTotalDo) Or(conds ...gen.Condition) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbReportMemberTotalDo) Select(conds ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbReportMemberTotalDo) Where(conds ...gen.Condition) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbReportMemberTotalDo) Order(conds ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbReportMemberTotalDo) Distinct(cols ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbReportMemberTotalDo) Omit(cols ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbReportMemberTotalDo) Join(table schema.Tabler, on ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbReportMemberTotalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbReportMemberTotalDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbReportMemberTotalDo) Group(cols ...field.Expr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbReportMemberTotalDo) Having(conds ...gen.Condition) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbReportMemberTotalDo) Limit(limit int) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbReportMemberTotalDo) Offset(offset int) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbReportMemberTotalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbReportMemberTotalDo) Unscoped() IFbReportMemberTotalDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbReportMemberTotalDo) Create(values ...*model.FbReportMemberTotal) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbReportMemberTotalDo) CreateInBatches(values []*model.FbReportMemberTotal, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbReportMemberTotalDo) Save(values ...*model.FbReportMemberTotal) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbReportMemberTotalDo) First() (*model.FbReportMemberTotal, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberTotal), nil
	}
}

func (f fbReportMemberTotalDo) Take() (*model.FbReportMemberTotal, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberTotal), nil
	}
}

func (f fbReportMemberTotalDo) Last() (*model.FbReportMemberTotal, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberTotal), nil
	}
}

func (f fbReportMemberTotalDo) Find() ([]*model.FbReportMemberTotal, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbReportMemberTotal), err
}

func (f fbReportMemberTotalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMemberTotal, err error) {
	buf := make([]*model.FbReportMemberTotal, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbReportMemberTotalDo) FindInBatches(result *[]*model.FbReportMemberTotal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbReportMemberTotalDo) Attrs(attrs ...field.AssignExpr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbReportMemberTotalDo) Assign(attrs ...field.AssignExpr) IFbReportMemberTotalDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbReportMemberTotalDo) Joins(fields ...field.RelationField) IFbReportMemberTotalDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbReportMemberTotalDo) Preload(fields ...field.RelationField) IFbReportMemberTotalDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbReportMemberTotalDo) FirstOrInit() (*model.FbReportMemberTotal, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberTotal), nil
	}
}

func (f fbReportMemberTotalDo) FirstOrCreate() (*model.FbReportMemberTotal, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberTotal), nil
	}
}

func (f fbReportMemberTotalDo) FindByPage(offset int, limit int) (result []*model.FbReportMemberTotal, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbReportMemberTotalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbReportMemberTotalDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbReportMemberTotalDo) Delete(models ...*model.FbReportMemberTotal) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbReportMemberTotalDo) withDO(do gen.Dao) *fbReportMemberTotalDo {
	f.DO = *do.(*gen.DO)
	return f
}
