// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbConfig(db *gorm.DB, opts ...gen.DOOption) fbConfig {
	_fbConfig := fbConfig{}

	_fbConfig.fbConfigDo.UseDB(db, opts...)
	_fbConfig.fbConfigDo.UseModel(&model.FbConfig{})

	tableName := _fbConfig.fbConfigDo.TableName()
	_fbConfig.ALL = field.NewAsterisk(tableName)
	_fbConfig.Name = field.NewString(tableName, "name")
	_fbConfig.EnName = field.NewString(tableName, "en_name")
	_fbConfig.Ty = field.NewInt32(tableName, "ty")
	_fbConfig.Key = field.NewString(tableName, "key")
	_fbConfig.Value = field.NewString(tableName, "value")

	_fbConfig.fillFieldMap()

	return _fbConfig
}

// fbConfig 配置表
type fbConfig struct {
	fbConfigDo

	ALL    field.Asterisk
	Name   field.String
	EnName field.String
	Ty     field.Int32  // 1 系统基础配置 2 合规开关配置 3合规财务
	Key    field.String // 键
	Value  field.String // 值

	fieldMap map[string]field.Expr
}

func (f fbConfig) Table(newTableName string) *fbConfig {
	f.fbConfigDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbConfig) As(alias string) *fbConfig {
	f.fbConfigDo.DO = *(f.fbConfigDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbConfig) updateTableName(table string) *fbConfig {
	f.ALL = field.NewAsterisk(table)
	f.Name = field.NewString(table, "name")
	f.EnName = field.NewString(table, "en_name")
	f.Ty = field.NewInt32(table, "ty")
	f.Key = field.NewString(table, "key")
	f.Value = field.NewString(table, "value")

	f.fillFieldMap()

	return f
}

func (f *fbConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbConfig) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["name"] = f.Name
	f.fieldMap["en_name"] = f.EnName
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["key"] = f.Key
	f.fieldMap["value"] = f.Value
}

func (f fbConfig) clone(db *gorm.DB) fbConfig {
	f.fbConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbConfig) replaceDB(db *gorm.DB) fbConfig {
	f.fbConfigDo.ReplaceDB(db)
	return f
}

type fbConfigDo struct{ gen.DO }

type IFbConfigDo interface {
	gen.SubQuery
	Debug() IFbConfigDo
	WithContext(ctx context.Context) IFbConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbConfigDo
	WriteDB() IFbConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbConfigDo
	Not(conds ...gen.Condition) IFbConfigDo
	Or(conds ...gen.Condition) IFbConfigDo
	Select(conds ...field.Expr) IFbConfigDo
	Where(conds ...gen.Condition) IFbConfigDo
	Order(conds ...field.Expr) IFbConfigDo
	Distinct(cols ...field.Expr) IFbConfigDo
	Omit(cols ...field.Expr) IFbConfigDo
	Join(table schema.Tabler, on ...field.Expr) IFbConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbConfigDo
	Group(cols ...field.Expr) IFbConfigDo
	Having(conds ...gen.Condition) IFbConfigDo
	Limit(limit int) IFbConfigDo
	Offset(offset int) IFbConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbConfigDo
	Unscoped() IFbConfigDo
	Create(values ...*model.FbConfig) error
	CreateInBatches(values []*model.FbConfig, batchSize int) error
	Save(values ...*model.FbConfig) error
	First() (*model.FbConfig, error)
	Take() (*model.FbConfig, error)
	Last() (*model.FbConfig, error)
	Find() ([]*model.FbConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbConfig, err error)
	FindInBatches(result *[]*model.FbConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbConfigDo
	Assign(attrs ...field.AssignExpr) IFbConfigDo
	Joins(fields ...field.RelationField) IFbConfigDo
	Preload(fields ...field.RelationField) IFbConfigDo
	FirstOrInit() (*model.FbConfig, error)
	FirstOrCreate() (*model.FbConfig, error)
	FindByPage(offset int, limit int) (result []*model.FbConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbConfigDo) Debug() IFbConfigDo {
	return f.withDO(f.DO.Debug())
}

func (f fbConfigDo) WithContext(ctx context.Context) IFbConfigDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbConfigDo) ReadDB() IFbConfigDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbConfigDo) WriteDB() IFbConfigDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbConfigDo) Session(config *gorm.Session) IFbConfigDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbConfigDo) Clauses(conds ...clause.Expression) IFbConfigDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbConfigDo) Returning(value interface{}, columns ...string) IFbConfigDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbConfigDo) Not(conds ...gen.Condition) IFbConfigDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbConfigDo) Or(conds ...gen.Condition) IFbConfigDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbConfigDo) Select(conds ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbConfigDo) Where(conds ...gen.Condition) IFbConfigDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbConfigDo) Order(conds ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbConfigDo) Distinct(cols ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbConfigDo) Omit(cols ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbConfigDo) Join(table schema.Tabler, on ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbConfigDo) Group(cols ...field.Expr) IFbConfigDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbConfigDo) Having(conds ...gen.Condition) IFbConfigDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbConfigDo) Limit(limit int) IFbConfigDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbConfigDo) Offset(offset int) IFbConfigDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbConfigDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbConfigDo) Unscoped() IFbConfigDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbConfigDo) Create(values ...*model.FbConfig) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbConfigDo) CreateInBatches(values []*model.FbConfig, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbConfigDo) Save(values ...*model.FbConfig) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbConfigDo) First() (*model.FbConfig, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbConfig), nil
	}
}

func (f fbConfigDo) Take() (*model.FbConfig, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbConfig), nil
	}
}

func (f fbConfigDo) Last() (*model.FbConfig, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbConfig), nil
	}
}

func (f fbConfigDo) Find() ([]*model.FbConfig, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbConfig), err
}

func (f fbConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbConfig, err error) {
	buf := make([]*model.FbConfig, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbConfigDo) FindInBatches(result *[]*model.FbConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbConfigDo) Attrs(attrs ...field.AssignExpr) IFbConfigDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbConfigDo) Assign(attrs ...field.AssignExpr) IFbConfigDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbConfigDo) Joins(fields ...field.RelationField) IFbConfigDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbConfigDo) Preload(fields ...field.RelationField) IFbConfigDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbConfigDo) FirstOrInit() (*model.FbConfig, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbConfig), nil
	}
}

func (f fbConfigDo) FirstOrCreate() (*model.FbConfig, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbConfig), nil
	}
}

func (f fbConfigDo) FindByPage(offset int, limit int) (result []*model.FbConfig, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbConfigDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbConfigDo) Delete(models ...*model.FbConfig) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbConfigDo) withDO(do gen.Dao) *fbConfigDo {
	f.DO = *do.(*gen.DO)
	return f
}
