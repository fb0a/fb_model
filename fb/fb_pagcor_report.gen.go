// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPagcorReport(db *gorm.DB, opts ...gen.DOOption) fbPagcorReport {
	_fbPagcorReport := fbPagcorReport{}

	_fbPagcorReport.fbPagcorReportDo.UseDB(db, opts...)
	_fbPagcorReport.fbPagcorReportDo.UseModel(&model.FbPagcorReport{})

	tableName := _fbPagcorReport.fbPagcorReportDo.TableName()
	_fbPagcorReport.ALL = field.NewAsterisk(tableName)
	_fbPagcorReport.ID = field.NewInt64(tableName, "id")
	_fbPagcorReport.Day = field.NewTime(tableName, "day")
	_fbPagcorReport.TotalBetAmount = field.NewFloat64(tableName, "total_bet_amount")
	_fbPagcorReport.TotalValidBetAmount = field.NewFloat64(tableName, "total_valid_bet_amount")
	_fbPagcorReport.TotalSettlementAmount = field.NewFloat64(tableName, "total_settlement_amount")
	_fbPagcorReport.TotalNetAmount = field.NewFloat64(tableName, "total_net_amount")
	_fbPagcorReport.TestValidBetAmount = field.NewFloat64(tableName, "test_valid_bet_amount")
	_fbPagcorReport.TestSettlementAmount = field.NewFloat64(tableName, "test_settlement_amount")
	_fbPagcorReport.TestNetAmount = field.NewFloat64(tableName, "test_net_amount")
	_fbPagcorReport.Count_ = field.NewInt64(tableName, "count")
	_fbPagcorReport.BrandName = field.NewString(tableName, "brand_name")
	_fbPagcorReport.Category = field.NewString(tableName, "category")
	_fbPagcorReport.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbPagcorReport.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbPagcorReport.fillFieldMap()

	return _fbPagcorReport
}

// fbPagcorReport pagcor游戏报表
type fbPagcorReport struct {
	fbPagcorReportDo

	ALL                   field.Asterisk
	ID                    field.Int64
	Day                   field.Time    // 数据日期
	TotalBetAmount        field.Float64 // total_bet_amount
	TotalValidBetAmount   field.Float64 // 有效投注金额
	TotalSettlementAmount field.Float64 // total_settlement_amount
	TotalNetAmount        field.Float64 // 投注盈亏
	TestValidBetAmount    field.Float64
	TestSettlementAmount  field.Float64
	TestNetAmount         field.Float64
	Count_                field.Int64  // 统计
	BrandName             field.String // 品牌
	Category              field.String // category
	CreatedAt             field.Int64  // 创建时间
	UpdatedAt             field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbPagcorReport) Table(newTableName string) *fbPagcorReport {
	f.fbPagcorReportDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPagcorReport) As(alias string) *fbPagcorReport {
	f.fbPagcorReportDo.DO = *(f.fbPagcorReportDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPagcorReport) updateTableName(table string) *fbPagcorReport {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewTime(table, "day")
	f.TotalBetAmount = field.NewFloat64(table, "total_bet_amount")
	f.TotalValidBetAmount = field.NewFloat64(table, "total_valid_bet_amount")
	f.TotalSettlementAmount = field.NewFloat64(table, "total_settlement_amount")
	f.TotalNetAmount = field.NewFloat64(table, "total_net_amount")
	f.TestValidBetAmount = field.NewFloat64(table, "test_valid_bet_amount")
	f.TestSettlementAmount = field.NewFloat64(table, "test_settlement_amount")
	f.TestNetAmount = field.NewFloat64(table, "test_net_amount")
	f.Count_ = field.NewInt64(table, "count")
	f.BrandName = field.NewString(table, "brand_name")
	f.Category = field.NewString(table, "category")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbPagcorReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPagcorReport) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 14)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["total_bet_amount"] = f.TotalBetAmount
	f.fieldMap["total_valid_bet_amount"] = f.TotalValidBetAmount
	f.fieldMap["total_settlement_amount"] = f.TotalSettlementAmount
	f.fieldMap["total_net_amount"] = f.TotalNetAmount
	f.fieldMap["test_valid_bet_amount"] = f.TestValidBetAmount
	f.fieldMap["test_settlement_amount"] = f.TestSettlementAmount
	f.fieldMap["test_net_amount"] = f.TestNetAmount
	f.fieldMap["count"] = f.Count_
	f.fieldMap["brand_name"] = f.BrandName
	f.fieldMap["category"] = f.Category
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbPagcorReport) clone(db *gorm.DB) fbPagcorReport {
	f.fbPagcorReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPagcorReport) replaceDB(db *gorm.DB) fbPagcorReport {
	f.fbPagcorReportDo.ReplaceDB(db)
	return f
}

type fbPagcorReportDo struct{ gen.DO }

type IFbPagcorReportDo interface {
	gen.SubQuery
	Debug() IFbPagcorReportDo
	WithContext(ctx context.Context) IFbPagcorReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPagcorReportDo
	WriteDB() IFbPagcorReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPagcorReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPagcorReportDo
	Not(conds ...gen.Condition) IFbPagcorReportDo
	Or(conds ...gen.Condition) IFbPagcorReportDo
	Select(conds ...field.Expr) IFbPagcorReportDo
	Where(conds ...gen.Condition) IFbPagcorReportDo
	Order(conds ...field.Expr) IFbPagcorReportDo
	Distinct(cols ...field.Expr) IFbPagcorReportDo
	Omit(cols ...field.Expr) IFbPagcorReportDo
	Join(table schema.Tabler, on ...field.Expr) IFbPagcorReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportDo
	Group(cols ...field.Expr) IFbPagcorReportDo
	Having(conds ...gen.Condition) IFbPagcorReportDo
	Limit(limit int) IFbPagcorReportDo
	Offset(offset int) IFbPagcorReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPagcorReportDo
	Unscoped() IFbPagcorReportDo
	Create(values ...*model.FbPagcorReport) error
	CreateInBatches(values []*model.FbPagcorReport, batchSize int) error
	Save(values ...*model.FbPagcorReport) error
	First() (*model.FbPagcorReport, error)
	Take() (*model.FbPagcorReport, error)
	Last() (*model.FbPagcorReport, error)
	Find() ([]*model.FbPagcorReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPagcorReport, err error)
	FindInBatches(result *[]*model.FbPagcorReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPagcorReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPagcorReportDo
	Assign(attrs ...field.AssignExpr) IFbPagcorReportDo
	Joins(fields ...field.RelationField) IFbPagcorReportDo
	Preload(fields ...field.RelationField) IFbPagcorReportDo
	FirstOrInit() (*model.FbPagcorReport, error)
	FirstOrCreate() (*model.FbPagcorReport, error)
	FindByPage(offset int, limit int) (result []*model.FbPagcorReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPagcorReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPagcorReportDo) Debug() IFbPagcorReportDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPagcorReportDo) WithContext(ctx context.Context) IFbPagcorReportDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPagcorReportDo) ReadDB() IFbPagcorReportDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPagcorReportDo) WriteDB() IFbPagcorReportDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPagcorReportDo) Session(config *gorm.Session) IFbPagcorReportDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPagcorReportDo) Clauses(conds ...clause.Expression) IFbPagcorReportDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPagcorReportDo) Returning(value interface{}, columns ...string) IFbPagcorReportDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPagcorReportDo) Not(conds ...gen.Condition) IFbPagcorReportDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPagcorReportDo) Or(conds ...gen.Condition) IFbPagcorReportDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPagcorReportDo) Select(conds ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPagcorReportDo) Where(conds ...gen.Condition) IFbPagcorReportDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPagcorReportDo) Order(conds ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPagcorReportDo) Distinct(cols ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPagcorReportDo) Omit(cols ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPagcorReportDo) Join(table schema.Tabler, on ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPagcorReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPagcorReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPagcorReportDo) Group(cols ...field.Expr) IFbPagcorReportDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPagcorReportDo) Having(conds ...gen.Condition) IFbPagcorReportDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPagcorReportDo) Limit(limit int) IFbPagcorReportDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPagcorReportDo) Offset(offset int) IFbPagcorReportDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPagcorReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPagcorReportDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPagcorReportDo) Unscoped() IFbPagcorReportDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPagcorReportDo) Create(values ...*model.FbPagcorReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPagcorReportDo) CreateInBatches(values []*model.FbPagcorReport, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPagcorReportDo) Save(values ...*model.FbPagcorReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPagcorReportDo) First() (*model.FbPagcorReport, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReport), nil
	}
}

func (f fbPagcorReportDo) Take() (*model.FbPagcorReport, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReport), nil
	}
}

func (f fbPagcorReportDo) Last() (*model.FbPagcorReport, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReport), nil
	}
}

func (f fbPagcorReportDo) Find() ([]*model.FbPagcorReport, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPagcorReport), err
}

func (f fbPagcorReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPagcorReport, err error) {
	buf := make([]*model.FbPagcorReport, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPagcorReportDo) FindInBatches(result *[]*model.FbPagcorReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPagcorReportDo) Attrs(attrs ...field.AssignExpr) IFbPagcorReportDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPagcorReportDo) Assign(attrs ...field.AssignExpr) IFbPagcorReportDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPagcorReportDo) Joins(fields ...field.RelationField) IFbPagcorReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPagcorReportDo) Preload(fields ...field.RelationField) IFbPagcorReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPagcorReportDo) FirstOrInit() (*model.FbPagcorReport, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReport), nil
	}
}

func (f fbPagcorReportDo) FirstOrCreate() (*model.FbPagcorReport, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorReport), nil
	}
}

func (f fbPagcorReportDo) FindByPage(offset int, limit int) (result []*model.FbPagcorReport, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPagcorReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPagcorReportDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPagcorReportDo) Delete(models ...*model.FbPagcorReport) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPagcorReportDo) withDO(do gen.Dao) *fbPagcorReportDo {
	f.DO = *do.(*gen.DO)
	return f
}
