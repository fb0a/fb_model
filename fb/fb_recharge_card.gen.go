// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbRechargeCard(db *gorm.DB, opts ...gen.DOOption) fbRechargeCard {
	_fbRechargeCard := fbRechargeCard{}

	_fbRechargeCard.fbRechargeCardDo.UseDB(db, opts...)
	_fbRechargeCard.fbRechargeCardDo.UseModel(&model.FbRechargeCard{})

	tableName := _fbRechargeCard.fbRechargeCardDo.TableName()
	_fbRechargeCard.ALL = field.NewAsterisk(tableName)
	_fbRechargeCard.ID = field.NewInt64(tableName, "id")
	_fbRechargeCard.Name = field.NewString(tableName, "name")
	_fbRechargeCard.Amount = field.NewFloat64(tableName, "amount")
	_fbRechargeCard.Multiple = field.NewFloat64(tableName, "multiple")
	_fbRechargeCard.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbRechargeCard.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbRechargeCard.UpdatedName = field.NewString(tableName, "updated_name")
	_fbRechargeCard.UpdatedUID = field.NewInt64(tableName, "updated_uid")

	_fbRechargeCard.fillFieldMap()

	return _fbRechargeCard
}

// fbRechargeCard 充值卡列表
type fbRechargeCard struct {
	fbRechargeCardDo

	ALL         field.Asterisk
	ID          field.Int64   // id
	Name        field.String  // 充值卡名称
	Amount      field.Float64 // 充值金额
	Multiple    field.Float64 // 打码倍数
	CreatedAt   field.Int64   // 创建时间
	UpdatedAt   field.Int64   // 更新时间
	UpdatedName field.String  // 更新人
	UpdatedUID  field.Int64   // 更新人uid

	fieldMap map[string]field.Expr
}

func (f fbRechargeCard) Table(newTableName string) *fbRechargeCard {
	f.fbRechargeCardDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbRechargeCard) As(alias string) *fbRechargeCard {
	f.fbRechargeCardDo.DO = *(f.fbRechargeCardDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbRechargeCard) updateTableName(table string) *fbRechargeCard {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.Amount = field.NewFloat64(table, "amount")
	f.Multiple = field.NewFloat64(table, "multiple")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")

	f.fillFieldMap()

	return f
}

func (f *fbRechargeCard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbRechargeCard) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["amount"] = f.Amount
	f.fieldMap["multiple"] = f.Multiple
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["updated_uid"] = f.UpdatedUID
}

func (f fbRechargeCard) clone(db *gorm.DB) fbRechargeCard {
	f.fbRechargeCardDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbRechargeCard) replaceDB(db *gorm.DB) fbRechargeCard {
	f.fbRechargeCardDo.ReplaceDB(db)
	return f
}

type fbRechargeCardDo struct{ gen.DO }

type IFbRechargeCardDo interface {
	gen.SubQuery
	Debug() IFbRechargeCardDo
	WithContext(ctx context.Context) IFbRechargeCardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbRechargeCardDo
	WriteDB() IFbRechargeCardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbRechargeCardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbRechargeCardDo
	Not(conds ...gen.Condition) IFbRechargeCardDo
	Or(conds ...gen.Condition) IFbRechargeCardDo
	Select(conds ...field.Expr) IFbRechargeCardDo
	Where(conds ...gen.Condition) IFbRechargeCardDo
	Order(conds ...field.Expr) IFbRechargeCardDo
	Distinct(cols ...field.Expr) IFbRechargeCardDo
	Omit(cols ...field.Expr) IFbRechargeCardDo
	Join(table schema.Tabler, on ...field.Expr) IFbRechargeCardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbRechargeCardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbRechargeCardDo
	Group(cols ...field.Expr) IFbRechargeCardDo
	Having(conds ...gen.Condition) IFbRechargeCardDo
	Limit(limit int) IFbRechargeCardDo
	Offset(offset int) IFbRechargeCardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbRechargeCardDo
	Unscoped() IFbRechargeCardDo
	Create(values ...*model.FbRechargeCard) error
	CreateInBatches(values []*model.FbRechargeCard, batchSize int) error
	Save(values ...*model.FbRechargeCard) error
	First() (*model.FbRechargeCard, error)
	Take() (*model.FbRechargeCard, error)
	Last() (*model.FbRechargeCard, error)
	Find() ([]*model.FbRechargeCard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbRechargeCard, err error)
	FindInBatches(result *[]*model.FbRechargeCard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbRechargeCard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbRechargeCardDo
	Assign(attrs ...field.AssignExpr) IFbRechargeCardDo
	Joins(fields ...field.RelationField) IFbRechargeCardDo
	Preload(fields ...field.RelationField) IFbRechargeCardDo
	FirstOrInit() (*model.FbRechargeCard, error)
	FirstOrCreate() (*model.FbRechargeCard, error)
	FindByPage(offset int, limit int) (result []*model.FbRechargeCard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbRechargeCardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbRechargeCardDo) Debug() IFbRechargeCardDo {
	return f.withDO(f.DO.Debug())
}

func (f fbRechargeCardDo) WithContext(ctx context.Context) IFbRechargeCardDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbRechargeCardDo) ReadDB() IFbRechargeCardDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbRechargeCardDo) WriteDB() IFbRechargeCardDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbRechargeCardDo) Session(config *gorm.Session) IFbRechargeCardDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbRechargeCardDo) Clauses(conds ...clause.Expression) IFbRechargeCardDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbRechargeCardDo) Returning(value interface{}, columns ...string) IFbRechargeCardDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbRechargeCardDo) Not(conds ...gen.Condition) IFbRechargeCardDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbRechargeCardDo) Or(conds ...gen.Condition) IFbRechargeCardDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbRechargeCardDo) Select(conds ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbRechargeCardDo) Where(conds ...gen.Condition) IFbRechargeCardDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbRechargeCardDo) Order(conds ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbRechargeCardDo) Distinct(cols ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbRechargeCardDo) Omit(cols ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbRechargeCardDo) Join(table schema.Tabler, on ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbRechargeCardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbRechargeCardDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbRechargeCardDo) Group(cols ...field.Expr) IFbRechargeCardDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbRechargeCardDo) Having(conds ...gen.Condition) IFbRechargeCardDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbRechargeCardDo) Limit(limit int) IFbRechargeCardDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbRechargeCardDo) Offset(offset int) IFbRechargeCardDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbRechargeCardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbRechargeCardDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbRechargeCardDo) Unscoped() IFbRechargeCardDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbRechargeCardDo) Create(values ...*model.FbRechargeCard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbRechargeCardDo) CreateInBatches(values []*model.FbRechargeCard, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbRechargeCardDo) Save(values ...*model.FbRechargeCard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbRechargeCardDo) First() (*model.FbRechargeCard, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbRechargeCard), nil
	}
}

func (f fbRechargeCardDo) Take() (*model.FbRechargeCard, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbRechargeCard), nil
	}
}

func (f fbRechargeCardDo) Last() (*model.FbRechargeCard, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbRechargeCard), nil
	}
}

func (f fbRechargeCardDo) Find() ([]*model.FbRechargeCard, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbRechargeCard), err
}

func (f fbRechargeCardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbRechargeCard, err error) {
	buf := make([]*model.FbRechargeCard, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbRechargeCardDo) FindInBatches(result *[]*model.FbRechargeCard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbRechargeCardDo) Attrs(attrs ...field.AssignExpr) IFbRechargeCardDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbRechargeCardDo) Assign(attrs ...field.AssignExpr) IFbRechargeCardDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbRechargeCardDo) Joins(fields ...field.RelationField) IFbRechargeCardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbRechargeCardDo) Preload(fields ...field.RelationField) IFbRechargeCardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbRechargeCardDo) FirstOrInit() (*model.FbRechargeCard, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbRechargeCard), nil
	}
}

func (f fbRechargeCardDo) FirstOrCreate() (*model.FbRechargeCard, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbRechargeCard), nil
	}
}

func (f fbRechargeCardDo) FindByPage(offset int, limit int) (result []*model.FbRechargeCard, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbRechargeCardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbRechargeCardDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbRechargeCardDo) Delete(models ...*model.FbRechargeCard) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbRechargeCardDo) withDO(do gen.Dao) *fbRechargeCardDo {
	f.DO = *do.(*gen.DO)
	return f
}
