// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                            = new(Query)
	FbAdmin                      *fbAdmin
	FbAdminGroup                 *fbAdminGroup
	FbAdminPriv                  *fbAdminPriv
	FbBalanceAdjustment          *fbBalanceAdjustment
	FbBalanceTransaction         *fbBalanceTransaction
	FbBanner                     *fbBanner
	FbDailyChannelReport         *fbDailyChannelReport
	FbDailyMemberReportAdded     *fbDailyMemberReportAdded
	FbDailyPlatformBalanceReport *fbDailyPlatformBalanceReport
	FbDailyPlatformPerformance   *fbDailyPlatformPerformance
	FbDailyPlatformReport        *fbDailyPlatformReport
	FbDailyVenueReport           *fbDailyVenueReport
	FbDeposit                    *fbDeposit
	FbFinanceAccount             *fbFinanceAccount
	FbGameList                   *fbGameList
	FbLazadaOrder                *fbLazadaOrder
	FbMember                     *fbMember
	FbMemberPlatform             *fbMemberPlatform
	FbMembersBalance             *fbMembersBalance
	FbMembersKyc                 *fbMembersKyc
	FbMembersVip                 *fbMembersVip
	FbOtpSmsRecord               *fbOtpSmsRecord
	FbPagcorGameSummary          *fbPagcorGameSummary
	FbPayment                    *fbPayment
	FbPaymentChannel             *fbPaymentChannel
	FbPlatform                   *fbPlatform
	FbPromo                      *fbPromo
	FbPromoBlindbox              *fbPromoBlindbox
	FbPromoBonu                  *fbPromoBonu
	FbPromoList                  *fbPromoList
	FbPromoSuperAceRebate        *fbPromoSuperAceRebate
	FbSm                         *fbSm
	FbWhitelist                  *fbWhitelist
	FbWithdraw                   *fbWithdraw
	TempGame                     *tempGame
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	FbAdmin = &Q.FbAdmin
	FbAdminGroup = &Q.FbAdminGroup
	FbAdminPriv = &Q.FbAdminPriv
	FbBalanceAdjustment = &Q.FbBalanceAdjustment
	FbBalanceTransaction = &Q.FbBalanceTransaction
	FbBanner = &Q.FbBanner
	FbDailyChannelReport = &Q.FbDailyChannelReport
	FbDailyMemberReportAdded = &Q.FbDailyMemberReportAdded
	FbDailyPlatformBalanceReport = &Q.FbDailyPlatformBalanceReport
	FbDailyPlatformPerformance = &Q.FbDailyPlatformPerformance
	FbDailyPlatformReport = &Q.FbDailyPlatformReport
	FbDailyVenueReport = &Q.FbDailyVenueReport
	FbDeposit = &Q.FbDeposit
	FbFinanceAccount = &Q.FbFinanceAccount
	FbGameList = &Q.FbGameList
	FbLazadaOrder = &Q.FbLazadaOrder
	FbMember = &Q.FbMember
	FbMemberPlatform = &Q.FbMemberPlatform
	FbMembersBalance = &Q.FbMembersBalance
	FbMembersKyc = &Q.FbMembersKyc
	FbMembersVip = &Q.FbMembersVip
	FbOtpSmsRecord = &Q.FbOtpSmsRecord
	FbPagcorGameSummary = &Q.FbPagcorGameSummary
	FbPayment = &Q.FbPayment
	FbPaymentChannel = &Q.FbPaymentChannel
	FbPlatform = &Q.FbPlatform
	FbPromo = &Q.FbPromo
	FbPromoBlindbox = &Q.FbPromoBlindbox
	FbPromoBonu = &Q.FbPromoBonu
	FbPromoList = &Q.FbPromoList
	FbPromoSuperAceRebate = &Q.FbPromoSuperAceRebate
	FbSm = &Q.FbSm
	FbWhitelist = &Q.FbWhitelist
	FbWithdraw = &Q.FbWithdraw
	TempGame = &Q.TempGame
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                           db,
		FbAdmin:                      newFbAdmin(db, opts...),
		FbAdminGroup:                 newFbAdminGroup(db, opts...),
		FbAdminPriv:                  newFbAdminPriv(db, opts...),
		FbBalanceAdjustment:          newFbBalanceAdjustment(db, opts...),
		FbBalanceTransaction:         newFbBalanceTransaction(db, opts...),
		FbBanner:                     newFbBanner(db, opts...),
		FbDailyChannelReport:         newFbDailyChannelReport(db, opts...),
		FbDailyMemberReportAdded:     newFbDailyMemberReportAdded(db, opts...),
		FbDailyPlatformBalanceReport: newFbDailyPlatformBalanceReport(db, opts...),
		FbDailyPlatformPerformance:   newFbDailyPlatformPerformance(db, opts...),
		FbDailyPlatformReport:        newFbDailyPlatformReport(db, opts...),
		FbDailyVenueReport:           newFbDailyVenueReport(db, opts...),
		FbDeposit:                    newFbDeposit(db, opts...),
		FbFinanceAccount:             newFbFinanceAccount(db, opts...),
		FbGameList:                   newFbGameList(db, opts...),
		FbLazadaOrder:                newFbLazadaOrder(db, opts...),
		FbMember:                     newFbMember(db, opts...),
		FbMemberPlatform:             newFbMemberPlatform(db, opts...),
		FbMembersBalance:             newFbMembersBalance(db, opts...),
		FbMembersKyc:                 newFbMembersKyc(db, opts...),
		FbMembersVip:                 newFbMembersVip(db, opts...),
		FbOtpSmsRecord:               newFbOtpSmsRecord(db, opts...),
		FbPagcorGameSummary:          newFbPagcorGameSummary(db, opts...),
		FbPayment:                    newFbPayment(db, opts...),
		FbPaymentChannel:             newFbPaymentChannel(db, opts...),
		FbPlatform:                   newFbPlatform(db, opts...),
		FbPromo:                      newFbPromo(db, opts...),
		FbPromoBlindbox:              newFbPromoBlindbox(db, opts...),
		FbPromoBonu:                  newFbPromoBonu(db, opts...),
		FbPromoList:                  newFbPromoList(db, opts...),
		FbPromoSuperAceRebate:        newFbPromoSuperAceRebate(db, opts...),
		FbSm:                         newFbSm(db, opts...),
		FbWhitelist:                  newFbWhitelist(db, opts...),
		FbWithdraw:                   newFbWithdraw(db, opts...),
		TempGame:                     newTempGame(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	FbAdmin                      fbAdmin
	FbAdminGroup                 fbAdminGroup
	FbAdminPriv                  fbAdminPriv
	FbBalanceAdjustment          fbBalanceAdjustment
	FbBalanceTransaction         fbBalanceTransaction
	FbBanner                     fbBanner
	FbDailyChannelReport         fbDailyChannelReport
	FbDailyMemberReportAdded     fbDailyMemberReportAdded
	FbDailyPlatformBalanceReport fbDailyPlatformBalanceReport
	FbDailyPlatformPerformance   fbDailyPlatformPerformance
	FbDailyPlatformReport        fbDailyPlatformReport
	FbDailyVenueReport           fbDailyVenueReport
	FbDeposit                    fbDeposit
	FbFinanceAccount             fbFinanceAccount
	FbGameList                   fbGameList
	FbLazadaOrder                fbLazadaOrder
	FbMember                     fbMember
	FbMemberPlatform             fbMemberPlatform
	FbMembersBalance             fbMembersBalance
	FbMembersKyc                 fbMembersKyc
	FbMembersVip                 fbMembersVip
	FbOtpSmsRecord               fbOtpSmsRecord
	FbPagcorGameSummary          fbPagcorGameSummary
	FbPayment                    fbPayment
	FbPaymentChannel             fbPaymentChannel
	FbPlatform                   fbPlatform
	FbPromo                      fbPromo
	FbPromoBlindbox              fbPromoBlindbox
	FbPromoBonu                  fbPromoBonu
	FbPromoList                  fbPromoList
	FbPromoSuperAceRebate        fbPromoSuperAceRebate
	FbSm                         fbSm
	FbWhitelist                  fbWhitelist
	FbWithdraw                   fbWithdraw
	TempGame                     tempGame
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                           db,
		FbAdmin:                      q.FbAdmin.clone(db),
		FbAdminGroup:                 q.FbAdminGroup.clone(db),
		FbAdminPriv:                  q.FbAdminPriv.clone(db),
		FbBalanceAdjustment:          q.FbBalanceAdjustment.clone(db),
		FbBalanceTransaction:         q.FbBalanceTransaction.clone(db),
		FbBanner:                     q.FbBanner.clone(db),
		FbDailyChannelReport:         q.FbDailyChannelReport.clone(db),
		FbDailyMemberReportAdded:     q.FbDailyMemberReportAdded.clone(db),
		FbDailyPlatformBalanceReport: q.FbDailyPlatformBalanceReport.clone(db),
		FbDailyPlatformPerformance:   q.FbDailyPlatformPerformance.clone(db),
		FbDailyPlatformReport:        q.FbDailyPlatformReport.clone(db),
		FbDailyVenueReport:           q.FbDailyVenueReport.clone(db),
		FbDeposit:                    q.FbDeposit.clone(db),
		FbFinanceAccount:             q.FbFinanceAccount.clone(db),
		FbGameList:                   q.FbGameList.clone(db),
		FbLazadaOrder:                q.FbLazadaOrder.clone(db),
		FbMember:                     q.FbMember.clone(db),
		FbMemberPlatform:             q.FbMemberPlatform.clone(db),
		FbMembersBalance:             q.FbMembersBalance.clone(db),
		FbMembersKyc:                 q.FbMembersKyc.clone(db),
		FbMembersVip:                 q.FbMembersVip.clone(db),
		FbOtpSmsRecord:               q.FbOtpSmsRecord.clone(db),
		FbPagcorGameSummary:          q.FbPagcorGameSummary.clone(db),
		FbPayment:                    q.FbPayment.clone(db),
		FbPaymentChannel:             q.FbPaymentChannel.clone(db),
		FbPlatform:                   q.FbPlatform.clone(db),
		FbPromo:                      q.FbPromo.clone(db),
		FbPromoBlindbox:              q.FbPromoBlindbox.clone(db),
		FbPromoBonu:                  q.FbPromoBonu.clone(db),
		FbPromoList:                  q.FbPromoList.clone(db),
		FbPromoSuperAceRebate:        q.FbPromoSuperAceRebate.clone(db),
		FbSm:                         q.FbSm.clone(db),
		FbWhitelist:                  q.FbWhitelist.clone(db),
		FbWithdraw:                   q.FbWithdraw.clone(db),
		TempGame:                     q.TempGame.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                           db,
		FbAdmin:                      q.FbAdmin.replaceDB(db),
		FbAdminGroup:                 q.FbAdminGroup.replaceDB(db),
		FbAdminPriv:                  q.FbAdminPriv.replaceDB(db),
		FbBalanceAdjustment:          q.FbBalanceAdjustment.replaceDB(db),
		FbBalanceTransaction:         q.FbBalanceTransaction.replaceDB(db),
		FbBanner:                     q.FbBanner.replaceDB(db),
		FbDailyChannelReport:         q.FbDailyChannelReport.replaceDB(db),
		FbDailyMemberReportAdded:     q.FbDailyMemberReportAdded.replaceDB(db),
		FbDailyPlatformBalanceReport: q.FbDailyPlatformBalanceReport.replaceDB(db),
		FbDailyPlatformPerformance:   q.FbDailyPlatformPerformance.replaceDB(db),
		FbDailyPlatformReport:        q.FbDailyPlatformReport.replaceDB(db),
		FbDailyVenueReport:           q.FbDailyVenueReport.replaceDB(db),
		FbDeposit:                    q.FbDeposit.replaceDB(db),
		FbFinanceAccount:             q.FbFinanceAccount.replaceDB(db),
		FbGameList:                   q.FbGameList.replaceDB(db),
		FbLazadaOrder:                q.FbLazadaOrder.replaceDB(db),
		FbMember:                     q.FbMember.replaceDB(db),
		FbMemberPlatform:             q.FbMemberPlatform.replaceDB(db),
		FbMembersBalance:             q.FbMembersBalance.replaceDB(db),
		FbMembersKyc:                 q.FbMembersKyc.replaceDB(db),
		FbMembersVip:                 q.FbMembersVip.replaceDB(db),
		FbOtpSmsRecord:               q.FbOtpSmsRecord.replaceDB(db),
		FbPagcorGameSummary:          q.FbPagcorGameSummary.replaceDB(db),
		FbPayment:                    q.FbPayment.replaceDB(db),
		FbPaymentChannel:             q.FbPaymentChannel.replaceDB(db),
		FbPlatform:                   q.FbPlatform.replaceDB(db),
		FbPromo:                      q.FbPromo.replaceDB(db),
		FbPromoBlindbox:              q.FbPromoBlindbox.replaceDB(db),
		FbPromoBonu:                  q.FbPromoBonu.replaceDB(db),
		FbPromoList:                  q.FbPromoList.replaceDB(db),
		FbPromoSuperAceRebate:        q.FbPromoSuperAceRebate.replaceDB(db),
		FbSm:                         q.FbSm.replaceDB(db),
		FbWhitelist:                  q.FbWhitelist.replaceDB(db),
		FbWithdraw:                   q.FbWithdraw.replaceDB(db),
		TempGame:                     q.TempGame.replaceDB(db),
	}
}

type queryCtx struct {
	FbAdmin                      IFbAdminDo
	FbAdminGroup                 IFbAdminGroupDo
	FbAdminPriv                  IFbAdminPrivDo
	FbBalanceAdjustment          IFbBalanceAdjustmentDo
	FbBalanceTransaction         IFbBalanceTransactionDo
	FbBanner                     IFbBannerDo
	FbDailyChannelReport         IFbDailyChannelReportDo
	FbDailyMemberReportAdded     IFbDailyMemberReportAddedDo
	FbDailyPlatformBalanceReport IFbDailyPlatformBalanceReportDo
	FbDailyPlatformPerformance   IFbDailyPlatformPerformanceDo
	FbDailyPlatformReport        IFbDailyPlatformReportDo
	FbDailyVenueReport           IFbDailyVenueReportDo
	FbDeposit                    IFbDepositDo
	FbFinanceAccount             IFbFinanceAccountDo
	FbGameList                   IFbGameListDo
	FbLazadaOrder                IFbLazadaOrderDo
	FbMember                     IFbMemberDo
	FbMemberPlatform             IFbMemberPlatformDo
	FbMembersBalance             IFbMembersBalanceDo
	FbMembersKyc                 IFbMembersKycDo
	FbMembersVip                 IFbMembersVipDo
	FbOtpSmsRecord               IFbOtpSmsRecordDo
	FbPagcorGameSummary          IFbPagcorGameSummaryDo
	FbPayment                    IFbPaymentDo
	FbPaymentChannel             IFbPaymentChannelDo
	FbPlatform                   IFbPlatformDo
	FbPromo                      IFbPromoDo
	FbPromoBlindbox              IFbPromoBlindboxDo
	FbPromoBonu                  IFbPromoBonuDo
	FbPromoList                  IFbPromoListDo
	FbPromoSuperAceRebate        IFbPromoSuperAceRebateDo
	FbSm                         IFbSmDo
	FbWhitelist                  IFbWhitelistDo
	FbWithdraw                   IFbWithdrawDo
	TempGame                     ITempGameDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		FbAdmin:                      q.FbAdmin.WithContext(ctx),
		FbAdminGroup:                 q.FbAdminGroup.WithContext(ctx),
		FbAdminPriv:                  q.FbAdminPriv.WithContext(ctx),
		FbBalanceAdjustment:          q.FbBalanceAdjustment.WithContext(ctx),
		FbBalanceTransaction:         q.FbBalanceTransaction.WithContext(ctx),
		FbBanner:                     q.FbBanner.WithContext(ctx),
		FbDailyChannelReport:         q.FbDailyChannelReport.WithContext(ctx),
		FbDailyMemberReportAdded:     q.FbDailyMemberReportAdded.WithContext(ctx),
		FbDailyPlatformBalanceReport: q.FbDailyPlatformBalanceReport.WithContext(ctx),
		FbDailyPlatformPerformance:   q.FbDailyPlatformPerformance.WithContext(ctx),
		FbDailyPlatformReport:        q.FbDailyPlatformReport.WithContext(ctx),
		FbDailyVenueReport:           q.FbDailyVenueReport.WithContext(ctx),
		FbDeposit:                    q.FbDeposit.WithContext(ctx),
		FbFinanceAccount:             q.FbFinanceAccount.WithContext(ctx),
		FbGameList:                   q.FbGameList.WithContext(ctx),
		FbLazadaOrder:                q.FbLazadaOrder.WithContext(ctx),
		FbMember:                     q.FbMember.WithContext(ctx),
		FbMemberPlatform:             q.FbMemberPlatform.WithContext(ctx),
		FbMembersBalance:             q.FbMembersBalance.WithContext(ctx),
		FbMembersKyc:                 q.FbMembersKyc.WithContext(ctx),
		FbMembersVip:                 q.FbMembersVip.WithContext(ctx),
		FbOtpSmsRecord:               q.FbOtpSmsRecord.WithContext(ctx),
		FbPagcorGameSummary:          q.FbPagcorGameSummary.WithContext(ctx),
		FbPayment:                    q.FbPayment.WithContext(ctx),
		FbPaymentChannel:             q.FbPaymentChannel.WithContext(ctx),
		FbPlatform:                   q.FbPlatform.WithContext(ctx),
		FbPromo:                      q.FbPromo.WithContext(ctx),
		FbPromoBlindbox:              q.FbPromoBlindbox.WithContext(ctx),
		FbPromoBonu:                  q.FbPromoBonu.WithContext(ctx),
		FbPromoList:                  q.FbPromoList.WithContext(ctx),
		FbPromoSuperAceRebate:        q.FbPromoSuperAceRebate.WithContext(ctx),
		FbSm:                         q.FbSm.WithContext(ctx),
		FbWhitelist:                  q.FbWhitelist.WithContext(ctx),
		FbWithdraw:                   q.FbWithdraw.WithContext(ctx),
		TempGame:                     q.TempGame.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
