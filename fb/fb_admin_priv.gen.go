// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbAdminPriv(db *gorm.DB, opts ...gen.DOOption) fbAdminPriv {
	_fbAdminPriv := fbAdminPriv{}

	_fbAdminPriv.fbAdminPrivDo.UseDB(db, opts...)
	_fbAdminPriv.fbAdminPrivDo.UseModel(&model.FbAdminPriv{})

	tableName := _fbAdminPriv.fbAdminPrivDo.TableName()
	_fbAdminPriv.ALL = field.NewAsterisk(tableName)
	_fbAdminPriv.ID = field.NewInt64(tableName, "id")
	_fbAdminPriv.Name = field.NewString(tableName, "name")
	_fbAdminPriv.RouteName = field.NewString(tableName, "routeName")
	_fbAdminPriv.Module = field.NewString(tableName, "module")
	_fbAdminPriv.Sortlevel = field.NewString(tableName, "sortlevel")
	_fbAdminPriv.State = field.NewInt32(tableName, "state")
	_fbAdminPriv.Cmpl = field.NewInt32(tableName, "cmpl")
	_fbAdminPriv.Pid = field.NewInt64(tableName, "pid")
	_fbAdminPriv.Flag = field.NewInt32(tableName, "flag")

	_fbAdminPriv.fillFieldMap()

	return _fbAdminPriv
}

// fbAdminPriv 后台用户权限表
type fbAdminPriv struct {
	fbAdminPrivDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 权限名字
	RouteName field.String
	Module    field.String // 模块
	Sortlevel field.String
	State     field.Int32 // 1:开启2:关闭3:删除
	Cmpl      field.Int32 // 1 合规后台 2管理后台
	Pid       field.Int64
	Flag      field.Int32 // 1:普通路由2:按钮路由

	fieldMap map[string]field.Expr
}

func (f fbAdminPriv) Table(newTableName string) *fbAdminPriv {
	f.fbAdminPrivDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbAdminPriv) As(alias string) *fbAdminPriv {
	f.fbAdminPrivDo.DO = *(f.fbAdminPrivDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbAdminPriv) updateTableName(table string) *fbAdminPriv {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.RouteName = field.NewString(table, "routeName")
	f.Module = field.NewString(table, "module")
	f.Sortlevel = field.NewString(table, "sortlevel")
	f.State = field.NewInt32(table, "state")
	f.Cmpl = field.NewInt32(table, "cmpl")
	f.Pid = field.NewInt64(table, "pid")
	f.Flag = field.NewInt32(table, "flag")

	f.fillFieldMap()

	return f
}

func (f *fbAdminPriv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbAdminPriv) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["routeName"] = f.RouteName
	f.fieldMap["module"] = f.Module
	f.fieldMap["sortlevel"] = f.Sortlevel
	f.fieldMap["state"] = f.State
	f.fieldMap["cmpl"] = f.Cmpl
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["flag"] = f.Flag
}

func (f fbAdminPriv) clone(db *gorm.DB) fbAdminPriv {
	f.fbAdminPrivDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbAdminPriv) replaceDB(db *gorm.DB) fbAdminPriv {
	f.fbAdminPrivDo.ReplaceDB(db)
	return f
}

type fbAdminPrivDo struct{ gen.DO }

type IFbAdminPrivDo interface {
	gen.SubQuery
	Debug() IFbAdminPrivDo
	WithContext(ctx context.Context) IFbAdminPrivDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbAdminPrivDo
	WriteDB() IFbAdminPrivDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbAdminPrivDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbAdminPrivDo
	Not(conds ...gen.Condition) IFbAdminPrivDo
	Or(conds ...gen.Condition) IFbAdminPrivDo
	Select(conds ...field.Expr) IFbAdminPrivDo
	Where(conds ...gen.Condition) IFbAdminPrivDo
	Order(conds ...field.Expr) IFbAdminPrivDo
	Distinct(cols ...field.Expr) IFbAdminPrivDo
	Omit(cols ...field.Expr) IFbAdminPrivDo
	Join(table schema.Tabler, on ...field.Expr) IFbAdminPrivDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbAdminPrivDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbAdminPrivDo
	Group(cols ...field.Expr) IFbAdminPrivDo
	Having(conds ...gen.Condition) IFbAdminPrivDo
	Limit(limit int) IFbAdminPrivDo
	Offset(offset int) IFbAdminPrivDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbAdminPrivDo
	Unscoped() IFbAdminPrivDo
	Create(values ...*model.FbAdminPriv) error
	CreateInBatches(values []*model.FbAdminPriv, batchSize int) error
	Save(values ...*model.FbAdminPriv) error
	First() (*model.FbAdminPriv, error)
	Take() (*model.FbAdminPriv, error)
	Last() (*model.FbAdminPriv, error)
	Find() ([]*model.FbAdminPriv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbAdminPriv, err error)
	FindInBatches(result *[]*model.FbAdminPriv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbAdminPriv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbAdminPrivDo
	Assign(attrs ...field.AssignExpr) IFbAdminPrivDo
	Joins(fields ...field.RelationField) IFbAdminPrivDo
	Preload(fields ...field.RelationField) IFbAdminPrivDo
	FirstOrInit() (*model.FbAdminPriv, error)
	FirstOrCreate() (*model.FbAdminPriv, error)
	FindByPage(offset int, limit int) (result []*model.FbAdminPriv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbAdminPrivDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbAdminPrivDo) Debug() IFbAdminPrivDo {
	return f.withDO(f.DO.Debug())
}

func (f fbAdminPrivDo) WithContext(ctx context.Context) IFbAdminPrivDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbAdminPrivDo) ReadDB() IFbAdminPrivDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbAdminPrivDo) WriteDB() IFbAdminPrivDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbAdminPrivDo) Session(config *gorm.Session) IFbAdminPrivDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbAdminPrivDo) Clauses(conds ...clause.Expression) IFbAdminPrivDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbAdminPrivDo) Returning(value interface{}, columns ...string) IFbAdminPrivDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbAdminPrivDo) Not(conds ...gen.Condition) IFbAdminPrivDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbAdminPrivDo) Or(conds ...gen.Condition) IFbAdminPrivDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbAdminPrivDo) Select(conds ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbAdminPrivDo) Where(conds ...gen.Condition) IFbAdminPrivDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbAdminPrivDo) Order(conds ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbAdminPrivDo) Distinct(cols ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbAdminPrivDo) Omit(cols ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbAdminPrivDo) Join(table schema.Tabler, on ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbAdminPrivDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbAdminPrivDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbAdminPrivDo) Group(cols ...field.Expr) IFbAdminPrivDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbAdminPrivDo) Having(conds ...gen.Condition) IFbAdminPrivDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbAdminPrivDo) Limit(limit int) IFbAdminPrivDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbAdminPrivDo) Offset(offset int) IFbAdminPrivDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbAdminPrivDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbAdminPrivDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbAdminPrivDo) Unscoped() IFbAdminPrivDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbAdminPrivDo) Create(values ...*model.FbAdminPriv) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbAdminPrivDo) CreateInBatches(values []*model.FbAdminPriv, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbAdminPrivDo) Save(values ...*model.FbAdminPriv) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbAdminPrivDo) First() (*model.FbAdminPriv, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminPriv), nil
	}
}

func (f fbAdminPrivDo) Take() (*model.FbAdminPriv, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminPriv), nil
	}
}

func (f fbAdminPrivDo) Last() (*model.FbAdminPriv, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminPriv), nil
	}
}

func (f fbAdminPrivDo) Find() ([]*model.FbAdminPriv, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbAdminPriv), err
}

func (f fbAdminPrivDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbAdminPriv, err error) {
	buf := make([]*model.FbAdminPriv, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbAdminPrivDo) FindInBatches(result *[]*model.FbAdminPriv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbAdminPrivDo) Attrs(attrs ...field.AssignExpr) IFbAdminPrivDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbAdminPrivDo) Assign(attrs ...field.AssignExpr) IFbAdminPrivDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbAdminPrivDo) Joins(fields ...field.RelationField) IFbAdminPrivDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbAdminPrivDo) Preload(fields ...field.RelationField) IFbAdminPrivDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbAdminPrivDo) FirstOrInit() (*model.FbAdminPriv, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminPriv), nil
	}
}

func (f fbAdminPrivDo) FirstOrCreate() (*model.FbAdminPriv, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbAdminPriv), nil
	}
}

func (f fbAdminPrivDo) FindByPage(offset int, limit int) (result []*model.FbAdminPriv, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbAdminPrivDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbAdminPrivDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbAdminPrivDo) Delete(models ...*model.FbAdminPriv) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbAdminPrivDo) withDO(do gen.Dao) *fbAdminPrivDo {
	f.DO = *do.(*gen.DO)
	return f
}
