// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbMembersBirthday(db *gorm.DB, opts ...gen.DOOption) fbMembersBirthday {
	_fbMembersBirthday := fbMembersBirthday{}

	_fbMembersBirthday.fbMembersBirthdayDo.UseDB(db, opts...)
	_fbMembersBirthday.fbMembersBirthdayDo.UseModel(&model.FbMembersBirthday{})

	tableName := _fbMembersBirthday.fbMembersBirthdayDo.TableName()
	_fbMembersBirthday.ALL = field.NewAsterisk(tableName)
	_fbMembersBirthday.UID = field.NewInt64(tableName, "uid")
	_fbMembersBirthday.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbMembersBirthday.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbMembersBirthday.Year = field.NewInt32(tableName, "year")
	_fbMembersBirthday.Month = field.NewInt32(tableName, "month")
	_fbMembersBirthday.Day = field.NewInt32(tableName, "day")

	_fbMembersBirthday.fillFieldMap()

	return _fbMembersBirthday
}

// fbMembersBirthday 会员生日表
type fbMembersBirthday struct {
	fbMembersBirthdayDo

	ALL       field.Asterisk
	UID       field.Int64
	CreatedAt field.Int64 // 创建时间
	UpdatedAt field.Int64 // 创建时间
	Year      field.Int32 // 年
	Month     field.Int32 // 月
	Day       field.Int32 // 日

	fieldMap map[string]field.Expr
}

func (f fbMembersBirthday) Table(newTableName string) *fbMembersBirthday {
	f.fbMembersBirthdayDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbMembersBirthday) As(alias string) *fbMembersBirthday {
	f.fbMembersBirthdayDo.DO = *(f.fbMembersBirthdayDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbMembersBirthday) updateTableName(table string) *fbMembersBirthday {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewInt64(table, "uid")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.Year = field.NewInt32(table, "year")
	f.Month = field.NewInt32(table, "month")
	f.Day = field.NewInt32(table, "day")

	f.fillFieldMap()

	return f
}

func (f *fbMembersBirthday) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbMembersBirthday) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["year"] = f.Year
	f.fieldMap["month"] = f.Month
	f.fieldMap["day"] = f.Day
}

func (f fbMembersBirthday) clone(db *gorm.DB) fbMembersBirthday {
	f.fbMembersBirthdayDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbMembersBirthday) replaceDB(db *gorm.DB) fbMembersBirthday {
	f.fbMembersBirthdayDo.ReplaceDB(db)
	return f
}

type fbMembersBirthdayDo struct{ gen.DO }

type IFbMembersBirthdayDo interface {
	gen.SubQuery
	Debug() IFbMembersBirthdayDo
	WithContext(ctx context.Context) IFbMembersBirthdayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbMembersBirthdayDo
	WriteDB() IFbMembersBirthdayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbMembersBirthdayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbMembersBirthdayDo
	Not(conds ...gen.Condition) IFbMembersBirthdayDo
	Or(conds ...gen.Condition) IFbMembersBirthdayDo
	Select(conds ...field.Expr) IFbMembersBirthdayDo
	Where(conds ...gen.Condition) IFbMembersBirthdayDo
	Order(conds ...field.Expr) IFbMembersBirthdayDo
	Distinct(cols ...field.Expr) IFbMembersBirthdayDo
	Omit(cols ...field.Expr) IFbMembersBirthdayDo
	Join(table schema.Tabler, on ...field.Expr) IFbMembersBirthdayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersBirthdayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersBirthdayDo
	Group(cols ...field.Expr) IFbMembersBirthdayDo
	Having(conds ...gen.Condition) IFbMembersBirthdayDo
	Limit(limit int) IFbMembersBirthdayDo
	Offset(offset int) IFbMembersBirthdayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersBirthdayDo
	Unscoped() IFbMembersBirthdayDo
	Create(values ...*model.FbMembersBirthday) error
	CreateInBatches(values []*model.FbMembersBirthday, batchSize int) error
	Save(values ...*model.FbMembersBirthday) error
	First() (*model.FbMembersBirthday, error)
	Take() (*model.FbMembersBirthday, error)
	Last() (*model.FbMembersBirthday, error)
	Find() ([]*model.FbMembersBirthday, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersBirthday, err error)
	FindInBatches(result *[]*model.FbMembersBirthday, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbMembersBirthday) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbMembersBirthdayDo
	Assign(attrs ...field.AssignExpr) IFbMembersBirthdayDo
	Joins(fields ...field.RelationField) IFbMembersBirthdayDo
	Preload(fields ...field.RelationField) IFbMembersBirthdayDo
	FirstOrInit() (*model.FbMembersBirthday, error)
	FirstOrCreate() (*model.FbMembersBirthday, error)
	FindByPage(offset int, limit int) (result []*model.FbMembersBirthday, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbMembersBirthdayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbMembersBirthdayDo) Debug() IFbMembersBirthdayDo {
	return f.withDO(f.DO.Debug())
}

func (f fbMembersBirthdayDo) WithContext(ctx context.Context) IFbMembersBirthdayDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbMembersBirthdayDo) ReadDB() IFbMembersBirthdayDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbMembersBirthdayDo) WriteDB() IFbMembersBirthdayDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbMembersBirthdayDo) Session(config *gorm.Session) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbMembersBirthdayDo) Clauses(conds ...clause.Expression) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbMembersBirthdayDo) Returning(value interface{}, columns ...string) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbMembersBirthdayDo) Not(conds ...gen.Condition) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbMembersBirthdayDo) Or(conds ...gen.Condition) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbMembersBirthdayDo) Select(conds ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbMembersBirthdayDo) Where(conds ...gen.Condition) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbMembersBirthdayDo) Order(conds ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbMembersBirthdayDo) Distinct(cols ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbMembersBirthdayDo) Omit(cols ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbMembersBirthdayDo) Join(table schema.Tabler, on ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbMembersBirthdayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbMembersBirthdayDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbMembersBirthdayDo) Group(cols ...field.Expr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbMembersBirthdayDo) Having(conds ...gen.Condition) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbMembersBirthdayDo) Limit(limit int) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbMembersBirthdayDo) Offset(offset int) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbMembersBirthdayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbMembersBirthdayDo) Unscoped() IFbMembersBirthdayDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbMembersBirthdayDo) Create(values ...*model.FbMembersBirthday) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbMembersBirthdayDo) CreateInBatches(values []*model.FbMembersBirthday, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbMembersBirthdayDo) Save(values ...*model.FbMembersBirthday) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbMembersBirthdayDo) First() (*model.FbMembersBirthday, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBirthday), nil
	}
}

func (f fbMembersBirthdayDo) Take() (*model.FbMembersBirthday, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBirthday), nil
	}
}

func (f fbMembersBirthdayDo) Last() (*model.FbMembersBirthday, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBirthday), nil
	}
}

func (f fbMembersBirthdayDo) Find() ([]*model.FbMembersBirthday, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbMembersBirthday), err
}

func (f fbMembersBirthdayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbMembersBirthday, err error) {
	buf := make([]*model.FbMembersBirthday, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbMembersBirthdayDo) FindInBatches(result *[]*model.FbMembersBirthday, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbMembersBirthdayDo) Attrs(attrs ...field.AssignExpr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbMembersBirthdayDo) Assign(attrs ...field.AssignExpr) IFbMembersBirthdayDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbMembersBirthdayDo) Joins(fields ...field.RelationField) IFbMembersBirthdayDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbMembersBirthdayDo) Preload(fields ...field.RelationField) IFbMembersBirthdayDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbMembersBirthdayDo) FirstOrInit() (*model.FbMembersBirthday, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBirthday), nil
	}
}

func (f fbMembersBirthdayDo) FirstOrCreate() (*model.FbMembersBirthday, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbMembersBirthday), nil
	}
}

func (f fbMembersBirthdayDo) FindByPage(offset int, limit int) (result []*model.FbMembersBirthday, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbMembersBirthdayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbMembersBirthdayDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbMembersBirthdayDo) Delete(models ...*model.FbMembersBirthday) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbMembersBirthdayDo) withDO(do gen.Dao) *fbMembersBirthdayDo {
	f.DO = *do.(*gen.DO)
	return f
}
