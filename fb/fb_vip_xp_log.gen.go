// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbVipXpLog(db *gorm.DB, opts ...gen.DOOption) fbVipXpLog {
	_fbVipXpLog := fbVipXpLog{}

	_fbVipXpLog.fbVipXpLogDo.UseDB(db, opts...)
	_fbVipXpLog.fbVipXpLogDo.UseModel(&model.FbVipXpLog{})

	tableName := _fbVipXpLog.fbVipXpLogDo.TableName()
	_fbVipXpLog.ALL = field.NewAsterisk(tableName)
	_fbVipXpLog.ID = field.NewInt64(tableName, "id")
	_fbVipXpLog.UID = field.NewInt64(tableName, "uid")
	_fbVipXpLog.Username = field.NewString(tableName, "username")
	_fbVipXpLog.FormerXp = field.NewFloat64(tableName, "former_xp")
	_fbVipXpLog.GetXp = field.NewFloat64(tableName, "get_xp")
	_fbVipXpLog.CurrentXp = field.NewFloat64(tableName, "current_xp")
	_fbVipXpLog.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_fbVipXpLog.FormerVipLevel = field.NewInt32(tableName, "former_vip_level")
	_fbVipXpLog.CurrentVipLevel = field.NewInt32(tableName, "current_vip_level")
	_fbVipXpLog.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbVipXpLog.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbVipXpLog.ReviewAt = field.NewInt64(tableName, "review_at")
	_fbVipXpLog.ReviewUID = field.NewInt64(tableName, "review_uid")
	_fbVipXpLog.ReviewName = field.NewString(tableName, "review_name")
	_fbVipXpLog.Remark = field.NewString(tableName, "remark")

	_fbVipXpLog.fillFieldMap()

	return _fbVipXpLog
}

// fbVipXpLog 用户vip成长值日志表
type fbVipXpLog struct {
	fbVipXpLogDo

	ALL             field.Asterisk
	ID              field.Int64
	UID             field.Int64   // 用户ID
	Username        field.String  // 用户名
	FormerXp        field.Float64 // 之前的xp
	GetXp           field.Float64 // 获取到的xp
	CurrentXp       field.Float64 // 当前xp
	BetAmount       field.Float64 // 新增的投注金额
	FormerVipLevel  field.Int32   // 之前的vip等级
	CurrentVipLevel field.Int32   // 当前ip等级
	CreatedAt       field.Int64   // 创建时间
	UpdatedAt       field.Int64   // 维护时间
	ReviewAt        field.Int64   // 审核时间
	ReviewUID       field.Int64   // 审核人uid
	ReviewName      field.String  // 审核人
	Remark          field.String  // 审核备注

	fieldMap map[string]field.Expr
}

func (f fbVipXpLog) Table(newTableName string) *fbVipXpLog {
	f.fbVipXpLogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbVipXpLog) As(alias string) *fbVipXpLog {
	f.fbVipXpLogDo.DO = *(f.fbVipXpLogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbVipXpLog) updateTableName(table string) *fbVipXpLog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.FormerXp = field.NewFloat64(table, "former_xp")
	f.GetXp = field.NewFloat64(table, "get_xp")
	f.CurrentXp = field.NewFloat64(table, "current_xp")
	f.BetAmount = field.NewFloat64(table, "bet_amount")
	f.FormerVipLevel = field.NewInt32(table, "former_vip_level")
	f.CurrentVipLevel = field.NewInt32(table, "current_vip_level")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.ReviewAt = field.NewInt64(table, "review_at")
	f.ReviewUID = field.NewInt64(table, "review_uid")
	f.ReviewName = field.NewString(table, "review_name")
	f.Remark = field.NewString(table, "remark")

	f.fillFieldMap()

	return f
}

func (f *fbVipXpLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbVipXpLog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["former_xp"] = f.FormerXp
	f.fieldMap["get_xp"] = f.GetXp
	f.fieldMap["current_xp"] = f.CurrentXp
	f.fieldMap["bet_amount"] = f.BetAmount
	f.fieldMap["former_vip_level"] = f.FormerVipLevel
	f.fieldMap["current_vip_level"] = f.CurrentVipLevel
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["review_at"] = f.ReviewAt
	f.fieldMap["review_uid"] = f.ReviewUID
	f.fieldMap["review_name"] = f.ReviewName
	f.fieldMap["remark"] = f.Remark
}

func (f fbVipXpLog) clone(db *gorm.DB) fbVipXpLog {
	f.fbVipXpLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbVipXpLog) replaceDB(db *gorm.DB) fbVipXpLog {
	f.fbVipXpLogDo.ReplaceDB(db)
	return f
}

type fbVipXpLogDo struct{ gen.DO }

type IFbVipXpLogDo interface {
	gen.SubQuery
	Debug() IFbVipXpLogDo
	WithContext(ctx context.Context) IFbVipXpLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbVipXpLogDo
	WriteDB() IFbVipXpLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbVipXpLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbVipXpLogDo
	Not(conds ...gen.Condition) IFbVipXpLogDo
	Or(conds ...gen.Condition) IFbVipXpLogDo
	Select(conds ...field.Expr) IFbVipXpLogDo
	Where(conds ...gen.Condition) IFbVipXpLogDo
	Order(conds ...field.Expr) IFbVipXpLogDo
	Distinct(cols ...field.Expr) IFbVipXpLogDo
	Omit(cols ...field.Expr) IFbVipXpLogDo
	Join(table schema.Tabler, on ...field.Expr) IFbVipXpLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbVipXpLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbVipXpLogDo
	Group(cols ...field.Expr) IFbVipXpLogDo
	Having(conds ...gen.Condition) IFbVipXpLogDo
	Limit(limit int) IFbVipXpLogDo
	Offset(offset int) IFbVipXpLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbVipXpLogDo
	Unscoped() IFbVipXpLogDo
	Create(values ...*model.FbVipXpLog) error
	CreateInBatches(values []*model.FbVipXpLog, batchSize int) error
	Save(values ...*model.FbVipXpLog) error
	First() (*model.FbVipXpLog, error)
	Take() (*model.FbVipXpLog, error)
	Last() (*model.FbVipXpLog, error)
	Find() ([]*model.FbVipXpLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbVipXpLog, err error)
	FindInBatches(result *[]*model.FbVipXpLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbVipXpLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbVipXpLogDo
	Assign(attrs ...field.AssignExpr) IFbVipXpLogDo
	Joins(fields ...field.RelationField) IFbVipXpLogDo
	Preload(fields ...field.RelationField) IFbVipXpLogDo
	FirstOrInit() (*model.FbVipXpLog, error)
	FirstOrCreate() (*model.FbVipXpLog, error)
	FindByPage(offset int, limit int) (result []*model.FbVipXpLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbVipXpLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbVipXpLogDo) Debug() IFbVipXpLogDo {
	return f.withDO(f.DO.Debug())
}

func (f fbVipXpLogDo) WithContext(ctx context.Context) IFbVipXpLogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbVipXpLogDo) ReadDB() IFbVipXpLogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbVipXpLogDo) WriteDB() IFbVipXpLogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbVipXpLogDo) Session(config *gorm.Session) IFbVipXpLogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbVipXpLogDo) Clauses(conds ...clause.Expression) IFbVipXpLogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbVipXpLogDo) Returning(value interface{}, columns ...string) IFbVipXpLogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbVipXpLogDo) Not(conds ...gen.Condition) IFbVipXpLogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbVipXpLogDo) Or(conds ...gen.Condition) IFbVipXpLogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbVipXpLogDo) Select(conds ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbVipXpLogDo) Where(conds ...gen.Condition) IFbVipXpLogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbVipXpLogDo) Order(conds ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbVipXpLogDo) Distinct(cols ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbVipXpLogDo) Omit(cols ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbVipXpLogDo) Join(table schema.Tabler, on ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbVipXpLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbVipXpLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbVipXpLogDo) Group(cols ...field.Expr) IFbVipXpLogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbVipXpLogDo) Having(conds ...gen.Condition) IFbVipXpLogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbVipXpLogDo) Limit(limit int) IFbVipXpLogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbVipXpLogDo) Offset(offset int) IFbVipXpLogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbVipXpLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbVipXpLogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbVipXpLogDo) Unscoped() IFbVipXpLogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbVipXpLogDo) Create(values ...*model.FbVipXpLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbVipXpLogDo) CreateInBatches(values []*model.FbVipXpLog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbVipXpLogDo) Save(values ...*model.FbVipXpLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbVipXpLogDo) First() (*model.FbVipXpLog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipXpLog), nil
	}
}

func (f fbVipXpLogDo) Take() (*model.FbVipXpLog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipXpLog), nil
	}
}

func (f fbVipXpLogDo) Last() (*model.FbVipXpLog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipXpLog), nil
	}
}

func (f fbVipXpLogDo) Find() ([]*model.FbVipXpLog, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbVipXpLog), err
}

func (f fbVipXpLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbVipXpLog, err error) {
	buf := make([]*model.FbVipXpLog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbVipXpLogDo) FindInBatches(result *[]*model.FbVipXpLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbVipXpLogDo) Attrs(attrs ...field.AssignExpr) IFbVipXpLogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbVipXpLogDo) Assign(attrs ...field.AssignExpr) IFbVipXpLogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbVipXpLogDo) Joins(fields ...field.RelationField) IFbVipXpLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbVipXpLogDo) Preload(fields ...field.RelationField) IFbVipXpLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbVipXpLogDo) FirstOrInit() (*model.FbVipXpLog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipXpLog), nil
	}
}

func (f fbVipXpLogDo) FirstOrCreate() (*model.FbVipXpLog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbVipXpLog), nil
	}
}

func (f fbVipXpLogDo) FindByPage(offset int, limit int) (result []*model.FbVipXpLog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbVipXpLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbVipXpLogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbVipXpLogDo) Delete(models ...*model.FbVipXpLog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbVipXpLogDo) withDO(do gen.Dao) *fbVipXpLogDo {
	f.DO = *do.(*gen.DO)
	return f
}
