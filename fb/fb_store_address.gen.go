// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbStoreAddress(db *gorm.DB, opts ...gen.DOOption) fbStoreAddress {
	_fbStoreAddress := fbStoreAddress{}

	_fbStoreAddress.fbStoreAddressDo.UseDB(db, opts...)
	_fbStoreAddress.fbStoreAddressDo.UseModel(&model.FbStoreAddress{})

	tableName := _fbStoreAddress.fbStoreAddressDo.TableName()
	_fbStoreAddress.ALL = field.NewAsterisk(tableName)
	_fbStoreAddress.ID = field.NewInt64(tableName, "id")
	_fbStoreAddress.Address = field.NewString(tableName, "address")
	_fbStoreAddress.State = field.NewInt32(tableName, "state")
	_fbStoreAddress.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbStoreAddress.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbStoreAddress.UpdatedName = field.NewString(tableName, "updated_name")
	_fbStoreAddress.UpdatedUID = field.NewInt64(tableName, "updated_uid")

	_fbStoreAddress.fillFieldMap()

	return _fbStoreAddress
}

// fbStoreAddress 门店地址表
type fbStoreAddress struct {
	fbStoreAddressDo

	ALL         field.Asterisk
	ID          field.Int64  // 商品id
	Address     field.String // 门店地址
	State       field.Int32  // 状态 1:未启用 2:启用
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64  // 更新时间
	UpdatedName field.String // 更新人
	UpdatedUID  field.Int64  // 更新人uid

	fieldMap map[string]field.Expr
}

func (f fbStoreAddress) Table(newTableName string) *fbStoreAddress {
	f.fbStoreAddressDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbStoreAddress) As(alias string) *fbStoreAddress {
	f.fbStoreAddressDo.DO = *(f.fbStoreAddressDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbStoreAddress) updateTableName(table string) *fbStoreAddress {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Address = field.NewString(table, "address")
	f.State = field.NewInt32(table, "state")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.UpdatedName = field.NewString(table, "updated_name")
	f.UpdatedUID = field.NewInt64(table, "updated_uid")

	f.fillFieldMap()

	return f
}

func (f *fbStoreAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbStoreAddress) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["address"] = f.Address
	f.fieldMap["state"] = f.State
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["updated_name"] = f.UpdatedName
	f.fieldMap["updated_uid"] = f.UpdatedUID
}

func (f fbStoreAddress) clone(db *gorm.DB) fbStoreAddress {
	f.fbStoreAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbStoreAddress) replaceDB(db *gorm.DB) fbStoreAddress {
	f.fbStoreAddressDo.ReplaceDB(db)
	return f
}

type fbStoreAddressDo struct{ gen.DO }

type IFbStoreAddressDo interface {
	gen.SubQuery
	Debug() IFbStoreAddressDo
	WithContext(ctx context.Context) IFbStoreAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbStoreAddressDo
	WriteDB() IFbStoreAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbStoreAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbStoreAddressDo
	Not(conds ...gen.Condition) IFbStoreAddressDo
	Or(conds ...gen.Condition) IFbStoreAddressDo
	Select(conds ...field.Expr) IFbStoreAddressDo
	Where(conds ...gen.Condition) IFbStoreAddressDo
	Order(conds ...field.Expr) IFbStoreAddressDo
	Distinct(cols ...field.Expr) IFbStoreAddressDo
	Omit(cols ...field.Expr) IFbStoreAddressDo
	Join(table schema.Tabler, on ...field.Expr) IFbStoreAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbStoreAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbStoreAddressDo
	Group(cols ...field.Expr) IFbStoreAddressDo
	Having(conds ...gen.Condition) IFbStoreAddressDo
	Limit(limit int) IFbStoreAddressDo
	Offset(offset int) IFbStoreAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbStoreAddressDo
	Unscoped() IFbStoreAddressDo
	Create(values ...*model.FbStoreAddress) error
	CreateInBatches(values []*model.FbStoreAddress, batchSize int) error
	Save(values ...*model.FbStoreAddress) error
	First() (*model.FbStoreAddress, error)
	Take() (*model.FbStoreAddress, error)
	Last() (*model.FbStoreAddress, error)
	Find() ([]*model.FbStoreAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbStoreAddress, err error)
	FindInBatches(result *[]*model.FbStoreAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbStoreAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbStoreAddressDo
	Assign(attrs ...field.AssignExpr) IFbStoreAddressDo
	Joins(fields ...field.RelationField) IFbStoreAddressDo
	Preload(fields ...field.RelationField) IFbStoreAddressDo
	FirstOrInit() (*model.FbStoreAddress, error)
	FirstOrCreate() (*model.FbStoreAddress, error)
	FindByPage(offset int, limit int) (result []*model.FbStoreAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbStoreAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbStoreAddressDo) Debug() IFbStoreAddressDo {
	return f.withDO(f.DO.Debug())
}

func (f fbStoreAddressDo) WithContext(ctx context.Context) IFbStoreAddressDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbStoreAddressDo) ReadDB() IFbStoreAddressDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbStoreAddressDo) WriteDB() IFbStoreAddressDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbStoreAddressDo) Session(config *gorm.Session) IFbStoreAddressDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbStoreAddressDo) Clauses(conds ...clause.Expression) IFbStoreAddressDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbStoreAddressDo) Returning(value interface{}, columns ...string) IFbStoreAddressDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbStoreAddressDo) Not(conds ...gen.Condition) IFbStoreAddressDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbStoreAddressDo) Or(conds ...gen.Condition) IFbStoreAddressDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbStoreAddressDo) Select(conds ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbStoreAddressDo) Where(conds ...gen.Condition) IFbStoreAddressDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbStoreAddressDo) Order(conds ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbStoreAddressDo) Distinct(cols ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbStoreAddressDo) Omit(cols ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbStoreAddressDo) Join(table schema.Tabler, on ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbStoreAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbStoreAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbStoreAddressDo) Group(cols ...field.Expr) IFbStoreAddressDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbStoreAddressDo) Having(conds ...gen.Condition) IFbStoreAddressDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbStoreAddressDo) Limit(limit int) IFbStoreAddressDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbStoreAddressDo) Offset(offset int) IFbStoreAddressDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbStoreAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbStoreAddressDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbStoreAddressDo) Unscoped() IFbStoreAddressDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbStoreAddressDo) Create(values ...*model.FbStoreAddress) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbStoreAddressDo) CreateInBatches(values []*model.FbStoreAddress, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbStoreAddressDo) Save(values ...*model.FbStoreAddress) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbStoreAddressDo) First() (*model.FbStoreAddress, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbStoreAddress), nil
	}
}

func (f fbStoreAddressDo) Take() (*model.FbStoreAddress, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbStoreAddress), nil
	}
}

func (f fbStoreAddressDo) Last() (*model.FbStoreAddress, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbStoreAddress), nil
	}
}

func (f fbStoreAddressDo) Find() ([]*model.FbStoreAddress, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbStoreAddress), err
}

func (f fbStoreAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbStoreAddress, err error) {
	buf := make([]*model.FbStoreAddress, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbStoreAddressDo) FindInBatches(result *[]*model.FbStoreAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbStoreAddressDo) Attrs(attrs ...field.AssignExpr) IFbStoreAddressDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbStoreAddressDo) Assign(attrs ...field.AssignExpr) IFbStoreAddressDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbStoreAddressDo) Joins(fields ...field.RelationField) IFbStoreAddressDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbStoreAddressDo) Preload(fields ...field.RelationField) IFbStoreAddressDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbStoreAddressDo) FirstOrInit() (*model.FbStoreAddress, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbStoreAddress), nil
	}
}

func (f fbStoreAddressDo) FirstOrCreate() (*model.FbStoreAddress, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbStoreAddress), nil
	}
}

func (f fbStoreAddressDo) FindByPage(offset int, limit int) (result []*model.FbStoreAddress, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbStoreAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbStoreAddressDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbStoreAddressDo) Delete(models ...*model.FbStoreAddress) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbStoreAddressDo) withDO(do gen.Dao) *fbStoreAddressDo {
	f.DO = *do.(*gen.DO)
	return f
}
