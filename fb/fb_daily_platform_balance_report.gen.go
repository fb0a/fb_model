// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbDailyPlatformBalanceReport(db *gorm.DB, opts ...gen.DOOption) fbDailyPlatformBalanceReport {
	_fbDailyPlatformBalanceReport := fbDailyPlatformBalanceReport{}

	_fbDailyPlatformBalanceReport.fbDailyPlatformBalanceReportDo.UseDB(db, opts...)
	_fbDailyPlatformBalanceReport.fbDailyPlatformBalanceReportDo.UseModel(&model.FbDailyPlatformBalanceReport{})

	tableName := _fbDailyPlatformBalanceReport.fbDailyPlatformBalanceReportDo.TableName()
	_fbDailyPlatformBalanceReport.ALL = field.NewAsterisk(tableName)
	_fbDailyPlatformBalanceReport.ID = field.NewUint64(tableName, "id")
	_fbDailyPlatformBalanceReport.Day = field.NewInt32(tableName, "day")
	_fbDailyPlatformBalanceReport.Balance = field.NewString(tableName, "balance")
	_fbDailyPlatformBalanceReport.BalanceChange = field.NewString(tableName, "balance_change")
	_fbDailyPlatformBalanceReport.Difference = field.NewString(tableName, "difference")
	_fbDailyPlatformBalanceReport.Bets = field.NewString(tableName, "bets")
	_fbDailyPlatformBalanceReport.Bonus = field.NewString(tableName, "bonus")
	_fbDailyPlatformBalanceReport.Lbonus = field.NewString(tableName, "lbonus")
	_fbDailyPlatformBalanceReport.AddScore = field.NewString(tableName, "add_score")
	_fbDailyPlatformBalanceReport.RedureScore = field.NewString(tableName, "redure_score")

	_fbDailyPlatformBalanceReport.fillFieldMap()

	return _fbDailyPlatformBalanceReport
}

// fbDailyPlatformBalanceReport 平台钱包日报
type fbDailyPlatformBalanceReport struct {
	fbDailyPlatformBalanceReportDo

	ALL           field.Asterisk
	ID            field.Uint64
	Day           field.Int32  // 年月日
	Balance       field.String // 会员总余额
	BalanceChange field.String // 较前日变动
	Difference    field.String // 总存提差
	Bets          field.String // 总投注
	Bonus         field.String // 总派彩
	Lbonus        field.String // 总礼金发放
	AddScore      field.String // 上分
	RedureScore   field.String // 下分

	fieldMap map[string]field.Expr
}

func (f fbDailyPlatformBalanceReport) Table(newTableName string) *fbDailyPlatformBalanceReport {
	f.fbDailyPlatformBalanceReportDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbDailyPlatformBalanceReport) As(alias string) *fbDailyPlatformBalanceReport {
	f.fbDailyPlatformBalanceReportDo.DO = *(f.fbDailyPlatformBalanceReportDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbDailyPlatformBalanceReport) updateTableName(table string) *fbDailyPlatformBalanceReport {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint64(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.Balance = field.NewString(table, "balance")
	f.BalanceChange = field.NewString(table, "balance_change")
	f.Difference = field.NewString(table, "difference")
	f.Bets = field.NewString(table, "bets")
	f.Bonus = field.NewString(table, "bonus")
	f.Lbonus = field.NewString(table, "lbonus")
	f.AddScore = field.NewString(table, "add_score")
	f.RedureScore = field.NewString(table, "redure_score")

	f.fillFieldMap()

	return f
}

func (f *fbDailyPlatformBalanceReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbDailyPlatformBalanceReport) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["balance"] = f.Balance
	f.fieldMap["balance_change"] = f.BalanceChange
	f.fieldMap["difference"] = f.Difference
	f.fieldMap["bets"] = f.Bets
	f.fieldMap["bonus"] = f.Bonus
	f.fieldMap["lbonus"] = f.Lbonus
	f.fieldMap["add_score"] = f.AddScore
	f.fieldMap["redure_score"] = f.RedureScore
}

func (f fbDailyPlatformBalanceReport) clone(db *gorm.DB) fbDailyPlatformBalanceReport {
	f.fbDailyPlatformBalanceReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbDailyPlatformBalanceReport) replaceDB(db *gorm.DB) fbDailyPlatformBalanceReport {
	f.fbDailyPlatformBalanceReportDo.ReplaceDB(db)
	return f
}

type fbDailyPlatformBalanceReportDo struct{ gen.DO }

type IFbDailyPlatformBalanceReportDo interface {
	gen.SubQuery
	Debug() IFbDailyPlatformBalanceReportDo
	WithContext(ctx context.Context) IFbDailyPlatformBalanceReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbDailyPlatformBalanceReportDo
	WriteDB() IFbDailyPlatformBalanceReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbDailyPlatformBalanceReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbDailyPlatformBalanceReportDo
	Not(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo
	Or(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo
	Select(conds ...field.Expr) IFbDailyPlatformBalanceReportDo
	Where(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo
	Order(conds ...field.Expr) IFbDailyPlatformBalanceReportDo
	Distinct(cols ...field.Expr) IFbDailyPlatformBalanceReportDo
	Omit(cols ...field.Expr) IFbDailyPlatformBalanceReportDo
	Join(table schema.Tabler, on ...field.Expr) IFbDailyPlatformBalanceReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformBalanceReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformBalanceReportDo
	Group(cols ...field.Expr) IFbDailyPlatformBalanceReportDo
	Having(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo
	Limit(limit int) IFbDailyPlatformBalanceReportDo
	Offset(offset int) IFbDailyPlatformBalanceReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyPlatformBalanceReportDo
	Unscoped() IFbDailyPlatformBalanceReportDo
	Create(values ...*model.FbDailyPlatformBalanceReport) error
	CreateInBatches(values []*model.FbDailyPlatformBalanceReport, batchSize int) error
	Save(values ...*model.FbDailyPlatformBalanceReport) error
	First() (*model.FbDailyPlatformBalanceReport, error)
	Take() (*model.FbDailyPlatformBalanceReport, error)
	Last() (*model.FbDailyPlatformBalanceReport, error)
	Find() ([]*model.FbDailyPlatformBalanceReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyPlatformBalanceReport, err error)
	FindInBatches(result *[]*model.FbDailyPlatformBalanceReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbDailyPlatformBalanceReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbDailyPlatformBalanceReportDo
	Assign(attrs ...field.AssignExpr) IFbDailyPlatformBalanceReportDo
	Joins(fields ...field.RelationField) IFbDailyPlatformBalanceReportDo
	Preload(fields ...field.RelationField) IFbDailyPlatformBalanceReportDo
	FirstOrInit() (*model.FbDailyPlatformBalanceReport, error)
	FirstOrCreate() (*model.FbDailyPlatformBalanceReport, error)
	FindByPage(offset int, limit int) (result []*model.FbDailyPlatformBalanceReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbDailyPlatformBalanceReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbDailyPlatformBalanceReportDo) Debug() IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Debug())
}

func (f fbDailyPlatformBalanceReportDo) WithContext(ctx context.Context) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbDailyPlatformBalanceReportDo) ReadDB() IFbDailyPlatformBalanceReportDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbDailyPlatformBalanceReportDo) WriteDB() IFbDailyPlatformBalanceReportDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbDailyPlatformBalanceReportDo) Session(config *gorm.Session) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbDailyPlatformBalanceReportDo) Clauses(conds ...clause.Expression) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbDailyPlatformBalanceReportDo) Returning(value interface{}, columns ...string) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbDailyPlatformBalanceReportDo) Not(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbDailyPlatformBalanceReportDo) Or(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbDailyPlatformBalanceReportDo) Select(conds ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbDailyPlatformBalanceReportDo) Where(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbDailyPlatformBalanceReportDo) Order(conds ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbDailyPlatformBalanceReportDo) Distinct(cols ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbDailyPlatformBalanceReportDo) Omit(cols ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbDailyPlatformBalanceReportDo) Join(table schema.Tabler, on ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbDailyPlatformBalanceReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbDailyPlatformBalanceReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbDailyPlatformBalanceReportDo) Group(cols ...field.Expr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbDailyPlatformBalanceReportDo) Having(conds ...gen.Condition) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbDailyPlatformBalanceReportDo) Limit(limit int) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbDailyPlatformBalanceReportDo) Offset(offset int) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbDailyPlatformBalanceReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbDailyPlatformBalanceReportDo) Unscoped() IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbDailyPlatformBalanceReportDo) Create(values ...*model.FbDailyPlatformBalanceReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbDailyPlatformBalanceReportDo) CreateInBatches(values []*model.FbDailyPlatformBalanceReport, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbDailyPlatformBalanceReportDo) Save(values ...*model.FbDailyPlatformBalanceReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbDailyPlatformBalanceReportDo) First() (*model.FbDailyPlatformBalanceReport, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformBalanceReport), nil
	}
}

func (f fbDailyPlatformBalanceReportDo) Take() (*model.FbDailyPlatformBalanceReport, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformBalanceReport), nil
	}
}

func (f fbDailyPlatformBalanceReportDo) Last() (*model.FbDailyPlatformBalanceReport, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformBalanceReport), nil
	}
}

func (f fbDailyPlatformBalanceReportDo) Find() ([]*model.FbDailyPlatformBalanceReport, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbDailyPlatformBalanceReport), err
}

func (f fbDailyPlatformBalanceReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbDailyPlatformBalanceReport, err error) {
	buf := make([]*model.FbDailyPlatformBalanceReport, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbDailyPlatformBalanceReportDo) FindInBatches(result *[]*model.FbDailyPlatformBalanceReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbDailyPlatformBalanceReportDo) Attrs(attrs ...field.AssignExpr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbDailyPlatformBalanceReportDo) Assign(attrs ...field.AssignExpr) IFbDailyPlatformBalanceReportDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbDailyPlatformBalanceReportDo) Joins(fields ...field.RelationField) IFbDailyPlatformBalanceReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbDailyPlatformBalanceReportDo) Preload(fields ...field.RelationField) IFbDailyPlatformBalanceReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbDailyPlatformBalanceReportDo) FirstOrInit() (*model.FbDailyPlatformBalanceReport, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformBalanceReport), nil
	}
}

func (f fbDailyPlatformBalanceReportDo) FirstOrCreate() (*model.FbDailyPlatformBalanceReport, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbDailyPlatformBalanceReport), nil
	}
}

func (f fbDailyPlatformBalanceReportDo) FindByPage(offset int, limit int) (result []*model.FbDailyPlatformBalanceReport, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbDailyPlatformBalanceReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbDailyPlatformBalanceReportDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbDailyPlatformBalanceReportDo) Delete(models ...*model.FbDailyPlatformBalanceReport) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbDailyPlatformBalanceReportDo) withDO(do gen.Dao) *fbDailyPlatformBalanceReportDo {
	f.DO = *do.(*gen.DO)
	return f
}
