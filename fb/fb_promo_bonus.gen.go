// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPromoBonu(db *gorm.DB, opts ...gen.DOOption) fbPromoBonu {
	_fbPromoBonu := fbPromoBonu{}

	_fbPromoBonu.fbPromoBonuDo.UseDB(db, opts...)
	_fbPromoBonu.fbPromoBonuDo.UseModel(&model.FbPromoBonu{})

	tableName := _fbPromoBonu.fbPromoBonuDo.TableName()
	_fbPromoBonu.ALL = field.NewAsterisk(tableName)
	_fbPromoBonu.ID = field.NewInt64(tableName, "id")
	_fbPromoBonu.UID = field.NewInt64(tableName, "uid")
	_fbPromoBonu.Username = field.NewString(tableName, "username")
	_fbPromoBonu.ParentUID = field.NewString(tableName, "parent_uid")
	_fbPromoBonu.ParentName = field.NewString(tableName, "parent_name")
	_fbPromoBonu.ActivityID = field.NewInt64(tableName, "activity_id")
	_fbPromoBonu.CashType = field.NewInt32(tableName, "cash_type")
	_fbPromoBonu.Bonus = field.NewFloat64(tableName, "bonus")
	_fbPromoBonu.Multiple = field.NewFloat64(tableName, "multiple")
	_fbPromoBonu.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbPromoBonu.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fbPromoBonu.ReviewAt = field.NewInt64(tableName, "review_at")
	_fbPromoBonu.ReviewState = field.NewInt32(tableName, "review_state")
	_fbPromoBonu.ReviewUID = field.NewInt64(tableName, "review_uid")
	_fbPromoBonu.ReviewName = field.NewString(tableName, "review_name")
	_fbPromoBonu.Remark = field.NewString(tableName, "remark")
	_fbPromoBonu.CreatedName = field.NewString(tableName, "created_name")

	_fbPromoBonu.fillFieldMap()

	return _fbPromoBonu
}

// fbPromoBonu 活动公共彩金记录表
type fbPromoBonu struct {
	fbPromoBonuDo

	ALL         field.Asterisk
	ID          field.Int64
	UID         field.Int64   // 用户ID
	Username    field.String  // 用户名
	ParentUID   field.String  // 上级UID
	ParentName  field.String  // 上级用户名
	ActivityID  field.Int64   // 活动ID
	CashType    field.Int32   // 活动类型
	Bonus       field.Float64 // 活动奖金金额
	Multiple    field.Float64 // 打码倍数
	CreatedAt   field.Int64   // 创建时间
	UpdatedAt   field.Int64   // 更新时间
	ReviewAt    field.Int64   // 审核时间
	ReviewState field.Int32   // 1待审核 2已领取 3已失效 4已审核 5审核拒绝
	ReviewUID   field.Int64   // 审核人uid
	ReviewName  field.String  // 审核人
	Remark      field.String  // 审核备注
	CreatedName field.String  // 创建人

	fieldMap map[string]field.Expr
}

func (f fbPromoBonu) Table(newTableName string) *fbPromoBonu {
	f.fbPromoBonuDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPromoBonu) As(alias string) *fbPromoBonu {
	f.fbPromoBonuDo.DO = *(f.fbPromoBonuDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPromoBonu) updateTableName(table string) *fbPromoBonu {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.ParentUID = field.NewString(table, "parent_uid")
	f.ParentName = field.NewString(table, "parent_name")
	f.ActivityID = field.NewInt64(table, "activity_id")
	f.CashType = field.NewInt32(table, "cash_type")
	f.Bonus = field.NewFloat64(table, "bonus")
	f.Multiple = field.NewFloat64(table, "multiple")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.ReviewAt = field.NewInt64(table, "review_at")
	f.ReviewState = field.NewInt32(table, "review_state")
	f.ReviewUID = field.NewInt64(table, "review_uid")
	f.ReviewName = field.NewString(table, "review_name")
	f.Remark = field.NewString(table, "remark")
	f.CreatedName = field.NewString(table, "created_name")

	f.fillFieldMap()

	return f
}

func (f *fbPromoBonu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPromoBonu) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 17)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["parent_uid"] = f.ParentUID
	f.fieldMap["parent_name"] = f.ParentName
	f.fieldMap["activity_id"] = f.ActivityID
	f.fieldMap["cash_type"] = f.CashType
	f.fieldMap["bonus"] = f.Bonus
	f.fieldMap["multiple"] = f.Multiple
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["review_at"] = f.ReviewAt
	f.fieldMap["review_state"] = f.ReviewState
	f.fieldMap["review_uid"] = f.ReviewUID
	f.fieldMap["review_name"] = f.ReviewName
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["created_name"] = f.CreatedName
}

func (f fbPromoBonu) clone(db *gorm.DB) fbPromoBonu {
	f.fbPromoBonuDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPromoBonu) replaceDB(db *gorm.DB) fbPromoBonu {
	f.fbPromoBonuDo.ReplaceDB(db)
	return f
}

type fbPromoBonuDo struct{ gen.DO }

type IFbPromoBonuDo interface {
	gen.SubQuery
	Debug() IFbPromoBonuDo
	WithContext(ctx context.Context) IFbPromoBonuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPromoBonuDo
	WriteDB() IFbPromoBonuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPromoBonuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPromoBonuDo
	Not(conds ...gen.Condition) IFbPromoBonuDo
	Or(conds ...gen.Condition) IFbPromoBonuDo
	Select(conds ...field.Expr) IFbPromoBonuDo
	Where(conds ...gen.Condition) IFbPromoBonuDo
	Order(conds ...field.Expr) IFbPromoBonuDo
	Distinct(cols ...field.Expr) IFbPromoBonuDo
	Omit(cols ...field.Expr) IFbPromoBonuDo
	Join(table schema.Tabler, on ...field.Expr) IFbPromoBonuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoBonuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoBonuDo
	Group(cols ...field.Expr) IFbPromoBonuDo
	Having(conds ...gen.Condition) IFbPromoBonuDo
	Limit(limit int) IFbPromoBonuDo
	Offset(offset int) IFbPromoBonuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoBonuDo
	Unscoped() IFbPromoBonuDo
	Create(values ...*model.FbPromoBonu) error
	CreateInBatches(values []*model.FbPromoBonu, batchSize int) error
	Save(values ...*model.FbPromoBonu) error
	First() (*model.FbPromoBonu, error)
	Take() (*model.FbPromoBonu, error)
	Last() (*model.FbPromoBonu, error)
	Find() ([]*model.FbPromoBonu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoBonu, err error)
	FindInBatches(result *[]*model.FbPromoBonu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPromoBonu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPromoBonuDo
	Assign(attrs ...field.AssignExpr) IFbPromoBonuDo
	Joins(fields ...field.RelationField) IFbPromoBonuDo
	Preload(fields ...field.RelationField) IFbPromoBonuDo
	FirstOrInit() (*model.FbPromoBonu, error)
	FirstOrCreate() (*model.FbPromoBonu, error)
	FindByPage(offset int, limit int) (result []*model.FbPromoBonu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPromoBonuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPromoBonuDo) Debug() IFbPromoBonuDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPromoBonuDo) WithContext(ctx context.Context) IFbPromoBonuDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPromoBonuDo) ReadDB() IFbPromoBonuDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPromoBonuDo) WriteDB() IFbPromoBonuDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPromoBonuDo) Session(config *gorm.Session) IFbPromoBonuDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPromoBonuDo) Clauses(conds ...clause.Expression) IFbPromoBonuDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPromoBonuDo) Returning(value interface{}, columns ...string) IFbPromoBonuDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPromoBonuDo) Not(conds ...gen.Condition) IFbPromoBonuDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPromoBonuDo) Or(conds ...gen.Condition) IFbPromoBonuDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPromoBonuDo) Select(conds ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPromoBonuDo) Where(conds ...gen.Condition) IFbPromoBonuDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPromoBonuDo) Order(conds ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPromoBonuDo) Distinct(cols ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPromoBonuDo) Omit(cols ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPromoBonuDo) Join(table schema.Tabler, on ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPromoBonuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPromoBonuDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPromoBonuDo) Group(cols ...field.Expr) IFbPromoBonuDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPromoBonuDo) Having(conds ...gen.Condition) IFbPromoBonuDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPromoBonuDo) Limit(limit int) IFbPromoBonuDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPromoBonuDo) Offset(offset int) IFbPromoBonuDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPromoBonuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPromoBonuDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPromoBonuDo) Unscoped() IFbPromoBonuDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPromoBonuDo) Create(values ...*model.FbPromoBonu) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPromoBonuDo) CreateInBatches(values []*model.FbPromoBonu, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPromoBonuDo) Save(values ...*model.FbPromoBonu) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPromoBonuDo) First() (*model.FbPromoBonu, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBonu), nil
	}
}

func (f fbPromoBonuDo) Take() (*model.FbPromoBonu, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBonu), nil
	}
}

func (f fbPromoBonuDo) Last() (*model.FbPromoBonu, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBonu), nil
	}
}

func (f fbPromoBonuDo) Find() ([]*model.FbPromoBonu, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPromoBonu), err
}

func (f fbPromoBonuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPromoBonu, err error) {
	buf := make([]*model.FbPromoBonu, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPromoBonuDo) FindInBatches(result *[]*model.FbPromoBonu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPromoBonuDo) Attrs(attrs ...field.AssignExpr) IFbPromoBonuDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPromoBonuDo) Assign(attrs ...field.AssignExpr) IFbPromoBonuDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPromoBonuDo) Joins(fields ...field.RelationField) IFbPromoBonuDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPromoBonuDo) Preload(fields ...field.RelationField) IFbPromoBonuDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPromoBonuDo) FirstOrInit() (*model.FbPromoBonu, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBonu), nil
	}
}

func (f fbPromoBonuDo) FirstOrCreate() (*model.FbPromoBonu, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPromoBonu), nil
	}
}

func (f fbPromoBonuDo) FindByPage(offset int, limit int) (result []*model.FbPromoBonu, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPromoBonuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPromoBonuDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPromoBonuDo) Delete(models ...*model.FbPromoBonu) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPromoBonuDo) withDO(do gen.Dao) *fbPromoBonuDo {
	f.DO = *do.(*gen.DO)
	return f
}
