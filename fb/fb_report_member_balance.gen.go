// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbReportMemberBalance(db *gorm.DB, opts ...gen.DOOption) fbReportMemberBalance {
	_fbReportMemberBalance := fbReportMemberBalance{}

	_fbReportMemberBalance.fbReportMemberBalanceDo.UseDB(db, opts...)
	_fbReportMemberBalance.fbReportMemberBalanceDo.UseModel(&model.FbReportMemberBalance{})

	tableName := _fbReportMemberBalance.fbReportMemberBalanceDo.TableName()
	_fbReportMemberBalance.ALL = field.NewAsterisk(tableName)
	_fbReportMemberBalance.ID = field.NewInt64(tableName, "id")
	_fbReportMemberBalance.Day = field.NewInt32(tableName, "day")
	_fbReportMemberBalance.Balance = field.NewString(tableName, "balance")
	_fbReportMemberBalance.BalanceChange = field.NewString(tableName, "balance_change")
	_fbReportMemberBalance.Difference = field.NewString(tableName, "difference")
	_fbReportMemberBalance.Bets = field.NewString(tableName, "bets")
	_fbReportMemberBalance.Bonus = field.NewString(tableName, "bonus")
	_fbReportMemberBalance.Lbonus = field.NewString(tableName, "lbonus")
	_fbReportMemberBalance.AddScore = field.NewString(tableName, "add_score")
	_fbReportMemberBalance.RedureScore = field.NewString(tableName, "redure_score")
	_fbReportMemberBalance.CreatedAt = field.NewInt64(tableName, "created_at")

	_fbReportMemberBalance.fillFieldMap()

	return _fbReportMemberBalance
}

// fbReportMemberBalance 平台钱包日报
type fbReportMemberBalance struct {
	fbReportMemberBalanceDo

	ALL           field.Asterisk
	ID            field.Int64
	Day           field.Int32  // 年月日
	Balance       field.String // 会员总余额
	BalanceChange field.String // 较前日变动
	Difference    field.String // 总存提差
	Bets          field.String // 总投注
	Bonus         field.String // 总派彩
	Lbonus        field.String // 总礼金发放
	AddScore      field.String // 上分
	RedureScore   field.String // 下分
	CreatedAt     field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (f fbReportMemberBalance) Table(newTableName string) *fbReportMemberBalance {
	f.fbReportMemberBalanceDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbReportMemberBalance) As(alias string) *fbReportMemberBalance {
	f.fbReportMemberBalanceDo.DO = *(f.fbReportMemberBalanceDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbReportMemberBalance) updateTableName(table string) *fbReportMemberBalance {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Day = field.NewInt32(table, "day")
	f.Balance = field.NewString(table, "balance")
	f.BalanceChange = field.NewString(table, "balance_change")
	f.Difference = field.NewString(table, "difference")
	f.Bets = field.NewString(table, "bets")
	f.Bonus = field.NewString(table, "bonus")
	f.Lbonus = field.NewString(table, "lbonus")
	f.AddScore = field.NewString(table, "add_score")
	f.RedureScore = field.NewString(table, "redure_score")
	f.CreatedAt = field.NewInt64(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fbReportMemberBalance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbReportMemberBalance) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["balance"] = f.Balance
	f.fieldMap["balance_change"] = f.BalanceChange
	f.fieldMap["difference"] = f.Difference
	f.fieldMap["bets"] = f.Bets
	f.fieldMap["bonus"] = f.Bonus
	f.fieldMap["lbonus"] = f.Lbonus
	f.fieldMap["add_score"] = f.AddScore
	f.fieldMap["redure_score"] = f.RedureScore
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fbReportMemberBalance) clone(db *gorm.DB) fbReportMemberBalance {
	f.fbReportMemberBalanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbReportMemberBalance) replaceDB(db *gorm.DB) fbReportMemberBalance {
	f.fbReportMemberBalanceDo.ReplaceDB(db)
	return f
}

type fbReportMemberBalanceDo struct{ gen.DO }

type IFbReportMemberBalanceDo interface {
	gen.SubQuery
	Debug() IFbReportMemberBalanceDo
	WithContext(ctx context.Context) IFbReportMemberBalanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbReportMemberBalanceDo
	WriteDB() IFbReportMemberBalanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbReportMemberBalanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbReportMemberBalanceDo
	Not(conds ...gen.Condition) IFbReportMemberBalanceDo
	Or(conds ...gen.Condition) IFbReportMemberBalanceDo
	Select(conds ...field.Expr) IFbReportMemberBalanceDo
	Where(conds ...gen.Condition) IFbReportMemberBalanceDo
	Order(conds ...field.Expr) IFbReportMemberBalanceDo
	Distinct(cols ...field.Expr) IFbReportMemberBalanceDo
	Omit(cols ...field.Expr) IFbReportMemberBalanceDo
	Join(table schema.Tabler, on ...field.Expr) IFbReportMemberBalanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberBalanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberBalanceDo
	Group(cols ...field.Expr) IFbReportMemberBalanceDo
	Having(conds ...gen.Condition) IFbReportMemberBalanceDo
	Limit(limit int) IFbReportMemberBalanceDo
	Offset(offset int) IFbReportMemberBalanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberBalanceDo
	Unscoped() IFbReportMemberBalanceDo
	Create(values ...*model.FbReportMemberBalance) error
	CreateInBatches(values []*model.FbReportMemberBalance, batchSize int) error
	Save(values ...*model.FbReportMemberBalance) error
	First() (*model.FbReportMemberBalance, error)
	Take() (*model.FbReportMemberBalance, error)
	Last() (*model.FbReportMemberBalance, error)
	Find() ([]*model.FbReportMemberBalance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMemberBalance, err error)
	FindInBatches(result *[]*model.FbReportMemberBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbReportMemberBalance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbReportMemberBalanceDo
	Assign(attrs ...field.AssignExpr) IFbReportMemberBalanceDo
	Joins(fields ...field.RelationField) IFbReportMemberBalanceDo
	Preload(fields ...field.RelationField) IFbReportMemberBalanceDo
	FirstOrInit() (*model.FbReportMemberBalance, error)
	FirstOrCreate() (*model.FbReportMemberBalance, error)
	FindByPage(offset int, limit int) (result []*model.FbReportMemberBalance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbReportMemberBalanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbReportMemberBalanceDo) Debug() IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Debug())
}

func (f fbReportMemberBalanceDo) WithContext(ctx context.Context) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbReportMemberBalanceDo) ReadDB() IFbReportMemberBalanceDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbReportMemberBalanceDo) WriteDB() IFbReportMemberBalanceDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbReportMemberBalanceDo) Session(config *gorm.Session) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbReportMemberBalanceDo) Clauses(conds ...clause.Expression) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbReportMemberBalanceDo) Returning(value interface{}, columns ...string) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbReportMemberBalanceDo) Not(conds ...gen.Condition) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbReportMemberBalanceDo) Or(conds ...gen.Condition) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbReportMemberBalanceDo) Select(conds ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbReportMemberBalanceDo) Where(conds ...gen.Condition) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbReportMemberBalanceDo) Order(conds ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbReportMemberBalanceDo) Distinct(cols ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbReportMemberBalanceDo) Omit(cols ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbReportMemberBalanceDo) Join(table schema.Tabler, on ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbReportMemberBalanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbReportMemberBalanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbReportMemberBalanceDo) Group(cols ...field.Expr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbReportMemberBalanceDo) Having(conds ...gen.Condition) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbReportMemberBalanceDo) Limit(limit int) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbReportMemberBalanceDo) Offset(offset int) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbReportMemberBalanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbReportMemberBalanceDo) Unscoped() IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbReportMemberBalanceDo) Create(values ...*model.FbReportMemberBalance) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbReportMemberBalanceDo) CreateInBatches(values []*model.FbReportMemberBalance, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbReportMemberBalanceDo) Save(values ...*model.FbReportMemberBalance) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbReportMemberBalanceDo) First() (*model.FbReportMemberBalance, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberBalance), nil
	}
}

func (f fbReportMemberBalanceDo) Take() (*model.FbReportMemberBalance, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberBalance), nil
	}
}

func (f fbReportMemberBalanceDo) Last() (*model.FbReportMemberBalance, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberBalance), nil
	}
}

func (f fbReportMemberBalanceDo) Find() ([]*model.FbReportMemberBalance, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbReportMemberBalance), err
}

func (f fbReportMemberBalanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbReportMemberBalance, err error) {
	buf := make([]*model.FbReportMemberBalance, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbReportMemberBalanceDo) FindInBatches(result *[]*model.FbReportMemberBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbReportMemberBalanceDo) Attrs(attrs ...field.AssignExpr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbReportMemberBalanceDo) Assign(attrs ...field.AssignExpr) IFbReportMemberBalanceDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbReportMemberBalanceDo) Joins(fields ...field.RelationField) IFbReportMemberBalanceDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbReportMemberBalanceDo) Preload(fields ...field.RelationField) IFbReportMemberBalanceDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbReportMemberBalanceDo) FirstOrInit() (*model.FbReportMemberBalance, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberBalance), nil
	}
}

func (f fbReportMemberBalanceDo) FirstOrCreate() (*model.FbReportMemberBalance, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbReportMemberBalance), nil
	}
}

func (f fbReportMemberBalanceDo) FindByPage(offset int, limit int) (result []*model.FbReportMemberBalance, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbReportMemberBalanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbReportMemberBalanceDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbReportMemberBalanceDo) Delete(models ...*model.FbReportMemberBalance) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbReportMemberBalanceDo) withDO(do gen.Dao) *fbReportMemberBalanceDo {
	f.DO = *do.(*gen.DO)
	return f
}
