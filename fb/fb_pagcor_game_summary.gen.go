// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbPagcorGameSummary(db *gorm.DB, opts ...gen.DOOption) fbPagcorGameSummary {
	_fbPagcorGameSummary := fbPagcorGameSummary{}

	_fbPagcorGameSummary.fbPagcorGameSummaryDo.UseDB(db, opts...)
	_fbPagcorGameSummary.fbPagcorGameSummaryDo.UseModel(&model.FbPagcorGameSummary{})

	tableName := _fbPagcorGameSummary.fbPagcorGameSummaryDo.TableName()
	_fbPagcorGameSummary.ALL = field.NewAsterisk(tableName)
	_fbPagcorGameSummary.ID = field.NewUint64(tableName, "id")
	_fbPagcorGameSummary.Day = field.NewTime(tableName, "day")
	_fbPagcorGameSummary.TotalBetAmount = field.NewString(tableName, "total_bet_amount")
	_fbPagcorGameSummary.TotalValidBetAmount = field.NewString(tableName, "total_valid_bet_amount")
	_fbPagcorGameSummary.TotalSettlementAmount = field.NewString(tableName, "total_settlement_amount")
	_fbPagcorGameSummary.TotalNetAmount = field.NewString(tableName, "total_net_amount")
	_fbPagcorGameSummary.Count_ = field.NewInt64(tableName, "count")
	_fbPagcorGameSummary.BrandName = field.NewString(tableName, "brand_name")
	_fbPagcorGameSummary.Category = field.NewString(tableName, "category")
	_fbPagcorGameSummary.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbPagcorGameSummary.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbPagcorGameSummary.fillFieldMap()

	return _fbPagcorGameSummary
}

// fbPagcorGameSummary pagcor游戏报表
type fbPagcorGameSummary struct {
	fbPagcorGameSummaryDo

	ALL                   field.Asterisk
	ID                    field.Uint64
	Day                   field.Time   // 数据日期
	TotalBetAmount        field.String // total_bet_amount
	TotalValidBetAmount   field.String // 有效投注金额
	TotalSettlementAmount field.String // total_settlement_amount
	TotalNetAmount        field.String // 投注盈亏
	Count_                field.Int64  // 统计
	BrandName             field.String // 品牌
	Category              field.String // category
	CreatedAt             field.Int64  // 创建时间
	UpdatedAt             field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbPagcorGameSummary) Table(newTableName string) *fbPagcorGameSummary {
	f.fbPagcorGameSummaryDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbPagcorGameSummary) As(alias string) *fbPagcorGameSummary {
	f.fbPagcorGameSummaryDo.DO = *(f.fbPagcorGameSummaryDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbPagcorGameSummary) updateTableName(table string) *fbPagcorGameSummary {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint64(table, "id")
	f.Day = field.NewTime(table, "day")
	f.TotalBetAmount = field.NewString(table, "total_bet_amount")
	f.TotalValidBetAmount = field.NewString(table, "total_valid_bet_amount")
	f.TotalSettlementAmount = field.NewString(table, "total_settlement_amount")
	f.TotalNetAmount = field.NewString(table, "total_net_amount")
	f.Count_ = field.NewInt64(table, "count")
	f.BrandName = field.NewString(table, "brand_name")
	f.Category = field.NewString(table, "category")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbPagcorGameSummary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbPagcorGameSummary) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["day"] = f.Day
	f.fieldMap["total_bet_amount"] = f.TotalBetAmount
	f.fieldMap["total_valid_bet_amount"] = f.TotalValidBetAmount
	f.fieldMap["total_settlement_amount"] = f.TotalSettlementAmount
	f.fieldMap["total_net_amount"] = f.TotalNetAmount
	f.fieldMap["count"] = f.Count_
	f.fieldMap["brand_name"] = f.BrandName
	f.fieldMap["category"] = f.Category
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbPagcorGameSummary) clone(db *gorm.DB) fbPagcorGameSummary {
	f.fbPagcorGameSummaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbPagcorGameSummary) replaceDB(db *gorm.DB) fbPagcorGameSummary {
	f.fbPagcorGameSummaryDo.ReplaceDB(db)
	return f
}

type fbPagcorGameSummaryDo struct{ gen.DO }

type IFbPagcorGameSummaryDo interface {
	gen.SubQuery
	Debug() IFbPagcorGameSummaryDo
	WithContext(ctx context.Context) IFbPagcorGameSummaryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbPagcorGameSummaryDo
	WriteDB() IFbPagcorGameSummaryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbPagcorGameSummaryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbPagcorGameSummaryDo
	Not(conds ...gen.Condition) IFbPagcorGameSummaryDo
	Or(conds ...gen.Condition) IFbPagcorGameSummaryDo
	Select(conds ...field.Expr) IFbPagcorGameSummaryDo
	Where(conds ...gen.Condition) IFbPagcorGameSummaryDo
	Order(conds ...field.Expr) IFbPagcorGameSummaryDo
	Distinct(cols ...field.Expr) IFbPagcorGameSummaryDo
	Omit(cols ...field.Expr) IFbPagcorGameSummaryDo
	Join(table schema.Tabler, on ...field.Expr) IFbPagcorGameSummaryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbPagcorGameSummaryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbPagcorGameSummaryDo
	Group(cols ...field.Expr) IFbPagcorGameSummaryDo
	Having(conds ...gen.Condition) IFbPagcorGameSummaryDo
	Limit(limit int) IFbPagcorGameSummaryDo
	Offset(offset int) IFbPagcorGameSummaryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPagcorGameSummaryDo
	Unscoped() IFbPagcorGameSummaryDo
	Create(values ...*model.FbPagcorGameSummary) error
	CreateInBatches(values []*model.FbPagcorGameSummary, batchSize int) error
	Save(values ...*model.FbPagcorGameSummary) error
	First() (*model.FbPagcorGameSummary, error)
	Take() (*model.FbPagcorGameSummary, error)
	Last() (*model.FbPagcorGameSummary, error)
	Find() ([]*model.FbPagcorGameSummary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPagcorGameSummary, err error)
	FindInBatches(result *[]*model.FbPagcorGameSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbPagcorGameSummary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbPagcorGameSummaryDo
	Assign(attrs ...field.AssignExpr) IFbPagcorGameSummaryDo
	Joins(fields ...field.RelationField) IFbPagcorGameSummaryDo
	Preload(fields ...field.RelationField) IFbPagcorGameSummaryDo
	FirstOrInit() (*model.FbPagcorGameSummary, error)
	FirstOrCreate() (*model.FbPagcorGameSummary, error)
	FindByPage(offset int, limit int) (result []*model.FbPagcorGameSummary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbPagcorGameSummaryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbPagcorGameSummaryDo) Debug() IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Debug())
}

func (f fbPagcorGameSummaryDo) WithContext(ctx context.Context) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbPagcorGameSummaryDo) ReadDB() IFbPagcorGameSummaryDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbPagcorGameSummaryDo) WriteDB() IFbPagcorGameSummaryDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbPagcorGameSummaryDo) Session(config *gorm.Session) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbPagcorGameSummaryDo) Clauses(conds ...clause.Expression) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbPagcorGameSummaryDo) Returning(value interface{}, columns ...string) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbPagcorGameSummaryDo) Not(conds ...gen.Condition) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbPagcorGameSummaryDo) Or(conds ...gen.Condition) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbPagcorGameSummaryDo) Select(conds ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbPagcorGameSummaryDo) Where(conds ...gen.Condition) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbPagcorGameSummaryDo) Order(conds ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbPagcorGameSummaryDo) Distinct(cols ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbPagcorGameSummaryDo) Omit(cols ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbPagcorGameSummaryDo) Join(table schema.Tabler, on ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbPagcorGameSummaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbPagcorGameSummaryDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbPagcorGameSummaryDo) Group(cols ...field.Expr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbPagcorGameSummaryDo) Having(conds ...gen.Condition) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbPagcorGameSummaryDo) Limit(limit int) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbPagcorGameSummaryDo) Offset(offset int) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbPagcorGameSummaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbPagcorGameSummaryDo) Unscoped() IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbPagcorGameSummaryDo) Create(values ...*model.FbPagcorGameSummary) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbPagcorGameSummaryDo) CreateInBatches(values []*model.FbPagcorGameSummary, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbPagcorGameSummaryDo) Save(values ...*model.FbPagcorGameSummary) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbPagcorGameSummaryDo) First() (*model.FbPagcorGameSummary, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorGameSummary), nil
	}
}

func (f fbPagcorGameSummaryDo) Take() (*model.FbPagcorGameSummary, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorGameSummary), nil
	}
}

func (f fbPagcorGameSummaryDo) Last() (*model.FbPagcorGameSummary, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorGameSummary), nil
	}
}

func (f fbPagcorGameSummaryDo) Find() ([]*model.FbPagcorGameSummary, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbPagcorGameSummary), err
}

func (f fbPagcorGameSummaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbPagcorGameSummary, err error) {
	buf := make([]*model.FbPagcorGameSummary, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbPagcorGameSummaryDo) FindInBatches(result *[]*model.FbPagcorGameSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbPagcorGameSummaryDo) Attrs(attrs ...field.AssignExpr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbPagcorGameSummaryDo) Assign(attrs ...field.AssignExpr) IFbPagcorGameSummaryDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbPagcorGameSummaryDo) Joins(fields ...field.RelationField) IFbPagcorGameSummaryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbPagcorGameSummaryDo) Preload(fields ...field.RelationField) IFbPagcorGameSummaryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbPagcorGameSummaryDo) FirstOrInit() (*model.FbPagcorGameSummary, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorGameSummary), nil
	}
}

func (f fbPagcorGameSummaryDo) FirstOrCreate() (*model.FbPagcorGameSummary, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbPagcorGameSummary), nil
	}
}

func (f fbPagcorGameSummaryDo) FindByPage(offset int, limit int) (result []*model.FbPagcorGameSummary, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbPagcorGameSummaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbPagcorGameSummaryDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbPagcorGameSummaryDo) Delete(models ...*model.FbPagcorGameSummary) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbPagcorGameSummaryDo) withDO(do gen.Dao) *fbPagcorGameSummaryDo {
	f.DO = *do.(*gen.DO)
	return f
}
