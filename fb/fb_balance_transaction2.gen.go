// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbBalanceTransaction2(db *gorm.DB, opts ...gen.DOOption) fbBalanceTransaction2 {
	_fbBalanceTransaction2 := fbBalanceTransaction2{}

	_fbBalanceTransaction2.fbBalanceTransaction2Do.UseDB(db, opts...)
	_fbBalanceTransaction2.fbBalanceTransaction2Do.UseModel(&model.FbBalanceTransaction2{})

	tableName := _fbBalanceTransaction2.fbBalanceTransaction2Do.TableName()
	_fbBalanceTransaction2.ALL = field.NewAsterisk(tableName)
	_fbBalanceTransaction2.ID = field.NewInt64(tableName, "id")
	_fbBalanceTransaction2.BillNo = field.NewString(tableName, "bill_no")
	_fbBalanceTransaction2.UID = field.NewInt64(tableName, "uid")
	_fbBalanceTransaction2.Username = field.NewString(tableName, "username")
	_fbBalanceTransaction2.PlayerName = field.NewString(tableName, "player_name")
	_fbBalanceTransaction2.CashType = field.NewInt32(tableName, "cash_type")
	_fbBalanceTransaction2.BusinessType = field.NewInt32(tableName, "business_type")
	_fbBalanceTransaction2.Amount = field.NewFloat64(tableName, "amount")
	_fbBalanceTransaction2.BeforeAmount = field.NewFloat64(tableName, "before_amount")
	_fbBalanceTransaction2.AfterAmount = field.NewFloat64(tableName, "after_amount")
	_fbBalanceTransaction2.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbBalanceTransaction2.CreatedTime = field.NewTime(tableName, "created_time")
	_fbBalanceTransaction2.Tester = field.NewInt32(tableName, "tester")
	_fbBalanceTransaction2.Remark = field.NewString(tableName, "remark")
	_fbBalanceTransaction2.OperatorUID = field.NewInt64(tableName, "operator_uid")
	_fbBalanceTransaction2.OperatorName = field.NewString(tableName, "operator_name")
	_fbBalanceTransaction2.Device = field.NewInt32(tableName, "device")
	_fbBalanceTransaction2.PlatformID = field.NewInt64(tableName, "platform_id")
	_fbBalanceTransaction2.OperationNo = field.NewString(tableName, "operation_no")
	_fbBalanceTransaction2.State = field.NewInt32(tableName, "state")
	_fbBalanceTransaction2.DataType = field.NewInt32(tableName, "data_type")
	_fbBalanceTransaction2.OriginAmount = field.NewString(tableName, "origin_amount")
	_fbBalanceTransaction2.NickName = field.NewString(tableName, "nick_name")
	_fbBalanceTransaction2.Phone = field.NewString(tableName, "phone")
	_fbBalanceTransaction2.Vip = field.NewInt32(tableName, "vip")

	_fbBalanceTransaction2.fillFieldMap()

	return _fbBalanceTransaction2
}

// fbBalanceTransaction2 账变表
type fbBalanceTransaction2 struct {
	fbBalanceTransaction2Do

	ALL          field.Asterisk
	ID           field.Int64
	BillNo       field.String  // 转账|充值|提现ID
	UID          field.Int64   // 用户ID
	Username     field.String  // 用户名
	PlayerName   field.String  // 游戏帐号
	CashType     field.Int32   // 帐变类型
	BusinessType field.Int32   // 业务类型
	Amount       field.Float64 // 账变金额
	BeforeAmount field.Float64 // 账变前的金额（钱包）
	AfterAmount  field.Float64 // 账变后的金额（钱包）
	CreatedAt    field.Int64   // 帐变时间
	CreatedTime  field.Time    // 分区时间戳(等于created_at)
	Tester       field.Int32   // 1:正式2:测试3:代理
	Remark       field.String  // 备注
	OperatorUID  field.Int64   // 操作人uid
	OperatorName field.String  // 操作人
	Device       field.Int32   // 操作终端
	PlatformID   field.Int64   // 场馆id
	OperationNo  field.String  // 流水号
	State        field.Int32   // 状态(仅场馆业务类型使用) 1待结算 2已结算 3已取消 4重新结算
	DataType     field.Int32   // 1 mongo 2 新架构tidb 3 老架构tidb
	OriginAmount field.String  // 原始金额
	NickName     field.String  // 昵称
	Phone        field.String  // 手机号
	Vip          field.Int32   // vip等级

	fieldMap map[string]field.Expr
}

func (f fbBalanceTransaction2) Table(newTableName string) *fbBalanceTransaction2 {
	f.fbBalanceTransaction2Do.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbBalanceTransaction2) As(alias string) *fbBalanceTransaction2 {
	f.fbBalanceTransaction2Do.DO = *(f.fbBalanceTransaction2Do.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbBalanceTransaction2) updateTableName(table string) *fbBalanceTransaction2 {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.BillNo = field.NewString(table, "bill_no")
	f.UID = field.NewInt64(table, "uid")
	f.Username = field.NewString(table, "username")
	f.PlayerName = field.NewString(table, "player_name")
	f.CashType = field.NewInt32(table, "cash_type")
	f.BusinessType = field.NewInt32(table, "business_type")
	f.Amount = field.NewFloat64(table, "amount")
	f.BeforeAmount = field.NewFloat64(table, "before_amount")
	f.AfterAmount = field.NewFloat64(table, "after_amount")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.CreatedTime = field.NewTime(table, "created_time")
	f.Tester = field.NewInt32(table, "tester")
	f.Remark = field.NewString(table, "remark")
	f.OperatorUID = field.NewInt64(table, "operator_uid")
	f.OperatorName = field.NewString(table, "operator_name")
	f.Device = field.NewInt32(table, "device")
	f.PlatformID = field.NewInt64(table, "platform_id")
	f.OperationNo = field.NewString(table, "operation_no")
	f.State = field.NewInt32(table, "state")
	f.DataType = field.NewInt32(table, "data_type")
	f.OriginAmount = field.NewString(table, "origin_amount")
	f.NickName = field.NewString(table, "nick_name")
	f.Phone = field.NewString(table, "phone")
	f.Vip = field.NewInt32(table, "vip")

	f.fillFieldMap()

	return f
}

func (f *fbBalanceTransaction2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbBalanceTransaction2) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 25)
	f.fieldMap["id"] = f.ID
	f.fieldMap["bill_no"] = f.BillNo
	f.fieldMap["uid"] = f.UID
	f.fieldMap["username"] = f.Username
	f.fieldMap["player_name"] = f.PlayerName
	f.fieldMap["cash_type"] = f.CashType
	f.fieldMap["business_type"] = f.BusinessType
	f.fieldMap["amount"] = f.Amount
	f.fieldMap["before_amount"] = f.BeforeAmount
	f.fieldMap["after_amount"] = f.AfterAmount
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["created_time"] = f.CreatedTime
	f.fieldMap["tester"] = f.Tester
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["operator_uid"] = f.OperatorUID
	f.fieldMap["operator_name"] = f.OperatorName
	f.fieldMap["device"] = f.Device
	f.fieldMap["platform_id"] = f.PlatformID
	f.fieldMap["operation_no"] = f.OperationNo
	f.fieldMap["state"] = f.State
	f.fieldMap["data_type"] = f.DataType
	f.fieldMap["origin_amount"] = f.OriginAmount
	f.fieldMap["nick_name"] = f.NickName
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["vip"] = f.Vip
}

func (f fbBalanceTransaction2) clone(db *gorm.DB) fbBalanceTransaction2 {
	f.fbBalanceTransaction2Do.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbBalanceTransaction2) replaceDB(db *gorm.DB) fbBalanceTransaction2 {
	f.fbBalanceTransaction2Do.ReplaceDB(db)
	return f
}

type fbBalanceTransaction2Do struct{ gen.DO }

type IFbBalanceTransaction2Do interface {
	gen.SubQuery
	Debug() IFbBalanceTransaction2Do
	WithContext(ctx context.Context) IFbBalanceTransaction2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbBalanceTransaction2Do
	WriteDB() IFbBalanceTransaction2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbBalanceTransaction2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbBalanceTransaction2Do
	Not(conds ...gen.Condition) IFbBalanceTransaction2Do
	Or(conds ...gen.Condition) IFbBalanceTransaction2Do
	Select(conds ...field.Expr) IFbBalanceTransaction2Do
	Where(conds ...gen.Condition) IFbBalanceTransaction2Do
	Order(conds ...field.Expr) IFbBalanceTransaction2Do
	Distinct(cols ...field.Expr) IFbBalanceTransaction2Do
	Omit(cols ...field.Expr) IFbBalanceTransaction2Do
	Join(table schema.Tabler, on ...field.Expr) IFbBalanceTransaction2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbBalanceTransaction2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IFbBalanceTransaction2Do
	Group(cols ...field.Expr) IFbBalanceTransaction2Do
	Having(conds ...gen.Condition) IFbBalanceTransaction2Do
	Limit(limit int) IFbBalanceTransaction2Do
	Offset(offset int) IFbBalanceTransaction2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBalanceTransaction2Do
	Unscoped() IFbBalanceTransaction2Do
	Create(values ...*model.FbBalanceTransaction2) error
	CreateInBatches(values []*model.FbBalanceTransaction2, batchSize int) error
	Save(values ...*model.FbBalanceTransaction2) error
	First() (*model.FbBalanceTransaction2, error)
	Take() (*model.FbBalanceTransaction2, error)
	Last() (*model.FbBalanceTransaction2, error)
	Find() ([]*model.FbBalanceTransaction2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBalanceTransaction2, err error)
	FindInBatches(result *[]*model.FbBalanceTransaction2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbBalanceTransaction2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbBalanceTransaction2Do
	Assign(attrs ...field.AssignExpr) IFbBalanceTransaction2Do
	Joins(fields ...field.RelationField) IFbBalanceTransaction2Do
	Preload(fields ...field.RelationField) IFbBalanceTransaction2Do
	FirstOrInit() (*model.FbBalanceTransaction2, error)
	FirstOrCreate() (*model.FbBalanceTransaction2, error)
	FindByPage(offset int, limit int) (result []*model.FbBalanceTransaction2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbBalanceTransaction2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbBalanceTransaction2Do) Debug() IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Debug())
}

func (f fbBalanceTransaction2Do) WithContext(ctx context.Context) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbBalanceTransaction2Do) ReadDB() IFbBalanceTransaction2Do {
	return f.Clauses(dbresolver.Read)
}

func (f fbBalanceTransaction2Do) WriteDB() IFbBalanceTransaction2Do {
	return f.Clauses(dbresolver.Write)
}

func (f fbBalanceTransaction2Do) Session(config *gorm.Session) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Session(config))
}

func (f fbBalanceTransaction2Do) Clauses(conds ...clause.Expression) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbBalanceTransaction2Do) Returning(value interface{}, columns ...string) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbBalanceTransaction2Do) Not(conds ...gen.Condition) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbBalanceTransaction2Do) Or(conds ...gen.Condition) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbBalanceTransaction2Do) Select(conds ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbBalanceTransaction2Do) Where(conds ...gen.Condition) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbBalanceTransaction2Do) Order(conds ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbBalanceTransaction2Do) Distinct(cols ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbBalanceTransaction2Do) Omit(cols ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbBalanceTransaction2Do) Join(table schema.Tabler, on ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbBalanceTransaction2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbBalanceTransaction2Do) RightJoin(table schema.Tabler, on ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbBalanceTransaction2Do) Group(cols ...field.Expr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbBalanceTransaction2Do) Having(conds ...gen.Condition) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbBalanceTransaction2Do) Limit(limit int) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbBalanceTransaction2Do) Offset(offset int) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbBalanceTransaction2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbBalanceTransaction2Do) Unscoped() IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Unscoped())
}

func (f fbBalanceTransaction2Do) Create(values ...*model.FbBalanceTransaction2) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbBalanceTransaction2Do) CreateInBatches(values []*model.FbBalanceTransaction2, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbBalanceTransaction2Do) Save(values ...*model.FbBalanceTransaction2) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbBalanceTransaction2Do) First() (*model.FbBalanceTransaction2, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceTransaction2), nil
	}
}

func (f fbBalanceTransaction2Do) Take() (*model.FbBalanceTransaction2, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceTransaction2), nil
	}
}

func (f fbBalanceTransaction2Do) Last() (*model.FbBalanceTransaction2, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceTransaction2), nil
	}
}

func (f fbBalanceTransaction2Do) Find() ([]*model.FbBalanceTransaction2, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbBalanceTransaction2), err
}

func (f fbBalanceTransaction2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbBalanceTransaction2, err error) {
	buf := make([]*model.FbBalanceTransaction2, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbBalanceTransaction2Do) FindInBatches(result *[]*model.FbBalanceTransaction2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbBalanceTransaction2Do) Attrs(attrs ...field.AssignExpr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbBalanceTransaction2Do) Assign(attrs ...field.AssignExpr) IFbBalanceTransaction2Do {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbBalanceTransaction2Do) Joins(fields ...field.RelationField) IFbBalanceTransaction2Do {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbBalanceTransaction2Do) Preload(fields ...field.RelationField) IFbBalanceTransaction2Do {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbBalanceTransaction2Do) FirstOrInit() (*model.FbBalanceTransaction2, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceTransaction2), nil
	}
}

func (f fbBalanceTransaction2Do) FirstOrCreate() (*model.FbBalanceTransaction2, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbBalanceTransaction2), nil
	}
}

func (f fbBalanceTransaction2Do) FindByPage(offset int, limit int) (result []*model.FbBalanceTransaction2, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbBalanceTransaction2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbBalanceTransaction2Do) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbBalanceTransaction2Do) Delete(models ...*model.FbBalanceTransaction2) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbBalanceTransaction2Do) withDO(do gen.Dao) *fbBalanceTransaction2Do {
	f.DO = *do.(*gen.DO)
	return f
}
