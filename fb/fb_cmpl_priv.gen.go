// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fb

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fb0a/fb_model/model"
)

func newFbCmplPriv(db *gorm.DB, opts ...gen.DOOption) fbCmplPriv {
	_fbCmplPriv := fbCmplPriv{}

	_fbCmplPriv.fbCmplPrivDo.UseDB(db, opts...)
	_fbCmplPriv.fbCmplPrivDo.UseModel(&model.FbCmplPriv{})

	tableName := _fbCmplPriv.fbCmplPrivDo.TableName()
	_fbCmplPriv.ALL = field.NewAsterisk(tableName)
	_fbCmplPriv.ID = field.NewInt64(tableName, "id")
	_fbCmplPriv.Name = field.NewString(tableName, "name")
	_fbCmplPriv.RouteName = field.NewString(tableName, "routeName")
	_fbCmplPriv.Module = field.NewString(tableName, "module")
	_fbCmplPriv.Sortlevel = field.NewString(tableName, "sortlevel")
	_fbCmplPriv.State = field.NewInt32(tableName, "state")
	_fbCmplPriv.Cmpl = field.NewInt32(tableName, "cmpl")
	_fbCmplPriv.Pid = field.NewInt64(tableName, "pid")
	_fbCmplPriv.Flag = field.NewInt32(tableName, "flag")

	_fbCmplPriv.fillFieldMap()

	return _fbCmplPriv
}

// fbCmplPriv 合规后台用户权限表
type fbCmplPriv struct {
	fbCmplPrivDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 权限名字
	RouteName field.String
	Module    field.String // 模块
	Sortlevel field.String
	State     field.Int32 // 1:开启2:关闭3:删除
	Cmpl      field.Int32 // 1 合规后台 2管理后台
	Pid       field.Int64
	Flag      field.Int32 // 1:普通路由2:按钮路由

	fieldMap map[string]field.Expr
}

func (f fbCmplPriv) Table(newTableName string) *fbCmplPriv {
	f.fbCmplPrivDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbCmplPriv) As(alias string) *fbCmplPriv {
	f.fbCmplPrivDo.DO = *(f.fbCmplPrivDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbCmplPriv) updateTableName(table string) *fbCmplPriv {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.RouteName = field.NewString(table, "routeName")
	f.Module = field.NewString(table, "module")
	f.Sortlevel = field.NewString(table, "sortlevel")
	f.State = field.NewInt32(table, "state")
	f.Cmpl = field.NewInt32(table, "cmpl")
	f.Pid = field.NewInt64(table, "pid")
	f.Flag = field.NewInt32(table, "flag")

	f.fillFieldMap()

	return f
}

func (f *fbCmplPriv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbCmplPriv) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["routeName"] = f.RouteName
	f.fieldMap["module"] = f.Module
	f.fieldMap["sortlevel"] = f.Sortlevel
	f.fieldMap["state"] = f.State
	f.fieldMap["cmpl"] = f.Cmpl
	f.fieldMap["pid"] = f.Pid
	f.fieldMap["flag"] = f.Flag
}

func (f fbCmplPriv) clone(db *gorm.DB) fbCmplPriv {
	f.fbCmplPrivDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbCmplPriv) replaceDB(db *gorm.DB) fbCmplPriv {
	f.fbCmplPrivDo.ReplaceDB(db)
	return f
}

type fbCmplPrivDo struct{ gen.DO }

type IFbCmplPrivDo interface {
	gen.SubQuery
	Debug() IFbCmplPrivDo
	WithContext(ctx context.Context) IFbCmplPrivDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbCmplPrivDo
	WriteDB() IFbCmplPrivDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbCmplPrivDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbCmplPrivDo
	Not(conds ...gen.Condition) IFbCmplPrivDo
	Or(conds ...gen.Condition) IFbCmplPrivDo
	Select(conds ...field.Expr) IFbCmplPrivDo
	Where(conds ...gen.Condition) IFbCmplPrivDo
	Order(conds ...field.Expr) IFbCmplPrivDo
	Distinct(cols ...field.Expr) IFbCmplPrivDo
	Omit(cols ...field.Expr) IFbCmplPrivDo
	Join(table schema.Tabler, on ...field.Expr) IFbCmplPrivDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbCmplPrivDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbCmplPrivDo
	Group(cols ...field.Expr) IFbCmplPrivDo
	Having(conds ...gen.Condition) IFbCmplPrivDo
	Limit(limit int) IFbCmplPrivDo
	Offset(offset int) IFbCmplPrivDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbCmplPrivDo
	Unscoped() IFbCmplPrivDo
	Create(values ...*model.FbCmplPriv) error
	CreateInBatches(values []*model.FbCmplPriv, batchSize int) error
	Save(values ...*model.FbCmplPriv) error
	First() (*model.FbCmplPriv, error)
	Take() (*model.FbCmplPriv, error)
	Last() (*model.FbCmplPriv, error)
	Find() ([]*model.FbCmplPriv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbCmplPriv, err error)
	FindInBatches(result *[]*model.FbCmplPriv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbCmplPriv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbCmplPrivDo
	Assign(attrs ...field.AssignExpr) IFbCmplPrivDo
	Joins(fields ...field.RelationField) IFbCmplPrivDo
	Preload(fields ...field.RelationField) IFbCmplPrivDo
	FirstOrInit() (*model.FbCmplPriv, error)
	FirstOrCreate() (*model.FbCmplPriv, error)
	FindByPage(offset int, limit int) (result []*model.FbCmplPriv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbCmplPrivDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbCmplPrivDo) Debug() IFbCmplPrivDo {
	return f.withDO(f.DO.Debug())
}

func (f fbCmplPrivDo) WithContext(ctx context.Context) IFbCmplPrivDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbCmplPrivDo) ReadDB() IFbCmplPrivDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbCmplPrivDo) WriteDB() IFbCmplPrivDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbCmplPrivDo) Session(config *gorm.Session) IFbCmplPrivDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbCmplPrivDo) Clauses(conds ...clause.Expression) IFbCmplPrivDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbCmplPrivDo) Returning(value interface{}, columns ...string) IFbCmplPrivDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbCmplPrivDo) Not(conds ...gen.Condition) IFbCmplPrivDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbCmplPrivDo) Or(conds ...gen.Condition) IFbCmplPrivDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbCmplPrivDo) Select(conds ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbCmplPrivDo) Where(conds ...gen.Condition) IFbCmplPrivDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbCmplPrivDo) Order(conds ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbCmplPrivDo) Distinct(cols ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbCmplPrivDo) Omit(cols ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbCmplPrivDo) Join(table schema.Tabler, on ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbCmplPrivDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbCmplPrivDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbCmplPrivDo) Group(cols ...field.Expr) IFbCmplPrivDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbCmplPrivDo) Having(conds ...gen.Condition) IFbCmplPrivDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbCmplPrivDo) Limit(limit int) IFbCmplPrivDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbCmplPrivDo) Offset(offset int) IFbCmplPrivDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbCmplPrivDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbCmplPrivDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbCmplPrivDo) Unscoped() IFbCmplPrivDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbCmplPrivDo) Create(values ...*model.FbCmplPriv) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbCmplPrivDo) CreateInBatches(values []*model.FbCmplPriv, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbCmplPrivDo) Save(values ...*model.FbCmplPriv) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbCmplPrivDo) First() (*model.FbCmplPriv, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplPriv), nil
	}
}

func (f fbCmplPrivDo) Take() (*model.FbCmplPriv, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplPriv), nil
	}
}

func (f fbCmplPrivDo) Last() (*model.FbCmplPriv, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplPriv), nil
	}
}

func (f fbCmplPrivDo) Find() ([]*model.FbCmplPriv, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbCmplPriv), err
}

func (f fbCmplPrivDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbCmplPriv, err error) {
	buf := make([]*model.FbCmplPriv, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbCmplPrivDo) FindInBatches(result *[]*model.FbCmplPriv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbCmplPrivDo) Attrs(attrs ...field.AssignExpr) IFbCmplPrivDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbCmplPrivDo) Assign(attrs ...field.AssignExpr) IFbCmplPrivDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbCmplPrivDo) Joins(fields ...field.RelationField) IFbCmplPrivDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbCmplPrivDo) Preload(fields ...field.RelationField) IFbCmplPrivDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbCmplPrivDo) FirstOrInit() (*model.FbCmplPriv, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplPriv), nil
	}
}

func (f fbCmplPrivDo) FirstOrCreate() (*model.FbCmplPriv, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbCmplPriv), nil
	}
}

func (f fbCmplPrivDo) FindByPage(offset int, limit int) (result []*model.FbCmplPriv, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbCmplPrivDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbCmplPrivDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbCmplPrivDo) Delete(models ...*model.FbCmplPriv) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbCmplPrivDo) withDO(do gen.Dao) *fbCmplPrivDo {
	f.DO = *do.(*gen.DO)
	return f
}
